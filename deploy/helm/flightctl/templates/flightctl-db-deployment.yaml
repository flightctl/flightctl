apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    flightctl.service: flightctl-db
  name: flightctl-db
  namespace: {{ default .Release.Namespace .Values.global.internalNamespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      flightctl.service: flightctl-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        flightctl.service: flightctl-db
    spec:
      {{- if .Values.global.imagePullSecretName }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecretName }}
      {{- end }}
      containers:
        - env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: password
            - name: POSTGRESQL_DATABASE
              value: flightctl
            - name: POSTGRESQL_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: masterPassword
            - name: POSTGRESQL_MASTER_USER
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: masterUser
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: userPassword
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-secret
                  key: user
            - name: POSTGRESQL_MAX_CONNECTIONS
              value: {{ .Values.db.maxConnections | quote }}
          image: {{ .Values.db.image.image }}:{{ .Values.db.image.tag }}
          imagePullPolicy: {{ .Values.db.image.pullPolicy }}
          name: flightctl-db
          ports:
            - containerPort: 5432
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/pgsql/data
              name: flightctl-db
            - mountPath: /usr/share/container-scripts/postgresql/start/enable-superuser.sh
              subPath: enable-superuser.sh
              name: init-scripts
          resources:
            requests:
              cpu: {{ .Values.db.resources.requests.cpu}}
              memory: {{ .Values.db.resources.requests.memory}}
            limits:
              cpu: {{ .Values.db.resources.limits.cpu}}
              memory: {{ .Values.db.resources.limits.memory}}
      restartPolicy: Always
      volumes:
        - name: flightctl-db
          persistentVolumeClaim:
            claimName: flightctl-db
        - name: init-scripts
          configMap:
            name: flightctl-db

