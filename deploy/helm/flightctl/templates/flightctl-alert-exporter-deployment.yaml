{{- if .Values.alertExporter.enabled -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    flightctl.service: flightctl-alert-exporter
  name: flightctl-alert-exporter
  namespace: {{ default .Release.Namespace .Values.global.internalNamespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      flightctl.service: flightctl-alert-exporter
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        flightctl.service: flightctl-alert-exporter
    spec:
      containers:
        - name: alert-exporter
          image: "{{ .Values.alertExporter.image.image }}:{{ default .Chart.AppVersion .Values.alertExporter.image.tag }}"
          imagePullPolicy: "{{ default .Values.global.imagePullPolicy .Values.alertExporter.image.pullPolicy }}"
          ports:
            - containerPort: 8081
              name: metrics
              protocol: TCP
          env:
            - name: HOME
              value: "/root"
            - name: KV_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-kv-secret
                  key: password
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-app-secret
                  key: userPassword
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: flightctl-db-app-secret
                  key: user
            {{- if .Values.db.sslmode }}
            - name: DB_SSL_MODE
              value: "{{ .Values.db.sslmode }}"
            {{- end }}
            {{- if .Values.db.sslcert }}
            - name: DB_SSL_CERT
              value: "{{ .Values.db.sslcert }}"
            {{- end }}
            {{- if .Values.db.sslkey }}
            - name: DB_SSL_KEY
              value: "{{ .Values.db.sslkey }}"
            {{- end }}
            {{- if .Values.db.sslrootcert }}
            - name: DB_SSL_ROOT_CERT
              value: "{{ .Values.db.sslrootcert }}"
            {{- end }}
            {{- if .Values.alertExporter.env }}
            {{- range $key, $value := .Values.alertExporter.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - mountPath: /root/.flightctl
              name: flightctl-alert-exporter-config
              readOnly: true
            {{- include "flightctl.dbSslVolumeMounts" . | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"

      restartPolicy: Always
      volumes:
        - name: flightctl-alert-exporter-config
          configMap:
            name: flightctl-alert-exporter-config
        {{- include "flightctl.dbSslVolumes" . | nindent 8 }}
{{- end }}
