{{- $namespaces := list .Release.Namespace }}
{{- if .Values.global.internalNamespace }}
{{- $namespaces = append $namespaces .Values.global.internalNamespace }}
{{- end }}
{{- /* Look for the secret in any target namespace to keep one canonical password */}}
{{- $existingSecret := "" }}
{{- range $n := $namespaces }}
  {{- if not $existingSecret }}
    {{- $tmp := (lookup "v1" "Secret" $n "flightctl-db-admin-secret") }}
    {{- if $tmp }}{{- $existingSecret = $tmp }}{{- end }}
  {{- end }}
{{- end }}
{{- $masterPassword := "" }}
{{- if $existingSecret }}
  {{- if and (hasKey $existingSecret "data") (hasKey $existingSecret.data "masterPassword") }}
    {{- $masterPassword = (index $existingSecret.data "masterPassword") }}
  {{- else }}
    {{- fail "flightctl-db-admin-secret is missing data.masterPassword â€“ delete it or add the key." }}
  {{- end }}
{{- else }}
  {{- $masterPassword = (include "flightctl.generatePassword" .) }}
{{- end }}
{{- range $ns := $namespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: flightctl-db-admin-secret
  namespace: {{ $ns }}
  labels:
    flightctl.service: flightctl-db-admin
    security.level: high-privilege
type: Opaque
data:
  # PostgreSQL superuser credentials for database initialization only
  masterUser: {{ $.Values.db.masterUser | b64enc }}
  masterPassword: {{ if $.Values.db.masterPassword }}{{ $.Values.db.masterPassword | b64enc }}{{ else }}{{ $masterPassword }}{{ end }}
{{- end }}