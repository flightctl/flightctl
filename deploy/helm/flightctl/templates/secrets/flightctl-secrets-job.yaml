{{- if eq $.Values.global.target "acm" }}
{{- $namespaces := list $.Release.Namespace }}
{{- if $.Values.global.internalNamespace }}
{{- $namespaces = append $namespaces $.Values.global.internalNamespace }}
{{- end }}
{{- $db_secret := $.Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" $.Release.Name) }}
{{- $kv_secret := $.Values.redis.auth.existingSecret | default (printf "%s-redis" $.Release.Name) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: flightctl-secrets
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "common.labels.standard" $ | nindent 4 }}
    app.kubernetes.io/component: secrets
spec:
  manualSelector: true
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" $ | nindent 6 }}
      app.kubernetes.io/component: secrets
  template:
    metadata:
      name: flightctl-secrets
      labels:
        {{- include "common.labels.standard" $ | nindent 8 }}
        app.kubernetes.io/component: secrets
    spec:
      serviceAccountName: flightctl-secrets
      containers:
        - name: flightctl-secrets
          image: {{ $.Values.secretsJob.image.image }}:{{ $.Values.secretsJob.image.tag }}
          imagePullPolicy: {{ $.Values.secretsJob.image.pullPolicy | default $.Values.global.imagePullPolicy }}
          command:
            - /bin/sh
            - -c
            - |
              set -e
              DB_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')
              DB_MASTER_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')
              DB_USER_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')
              KV_PASSWORD=$(cat /dev/urandom | tr -dc 'A-Za-z0-90-9' | fold -w5 | head -n4 | paste -sd'-')
              {{- range $ns := $namespaces }}
              if ! oc get secret {{ $db_secret }} -n {{ $ns }} >/dev/null 2>&1; then
                oc create secret generic {{ $db_secret }} -n={{ $ns }} \
                  --from-literal=password="$DB_PASSWORD" \
                  --from-literal=masterPassword="$DB_MASTER_PASSWORD" \
                  --from-literal=masterUser="admin" \
                  --from-literal=userPassword="$DB_USER_PASSWORD" \
                  --from-literal=user="{{ $.Values.postgresql.auth.username }}"
              fi
              if ! oc get secret {{ $kv_secret }} -n {{ $ns }} >/dev/null 2>&1; then
                oc create secret generic {{ $kv_secret }} -n={{ $ns }} \
                  --from-literal=password="$KV_PASSWORD"
              fi
              {{- end }}
      restartPolicy: Never
{{- end }}
