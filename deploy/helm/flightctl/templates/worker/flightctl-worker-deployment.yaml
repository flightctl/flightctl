{{ if .Values.worker.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    flightctl.service: flightctl-worker
  name: flightctl-worker
  namespace: {{ default .Release.Namespace .Values.global.internalNamespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      flightctl.service: flightctl-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        flightctl.service: flightctl-worker
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/worker/flightctl-worker-config.yaml") . | sha256sum }}
    spec:
      serviceAccountName: flightctl-worker
      containers:
        - name: flightctl-worker
          image: {{ .Values.worker.image.image }}:{{ default .Chart.AppVersion .Values.worker.image.tag }}
          imagePullPolicy: {{ default .Values.global.imagePullPolicy .Values.worker.image.pullPolicy }}
          env:
            - name: HOME
              value: "/root"
            - name: KV_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $.Release.Name }}-redis
                  key: redis-password
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $.Values.postgresql.auth.existingSecret | default (printf "%s-postgresql" $.Release.Name) }}
                  key: {{ $.Values.postgresql.auth.secretKeys.userPasswordKey | default "password" }}
            - name: DB_USER
              value: {{ .Values.postgresql.auth.username }}
          volumeMounts:
            - mountPath: /root/.flightctl/config.yaml
              name: flightctl-worker-config
              subPath: config.yaml
              readOnly: true
      restartPolicy: Always
      volumes:
        - name: flightctl-worker-config
          configMap:
            name: flightctl-worker-config
{{ end }}
