{{- $namespaces := list .Release.Namespace }}
{{- if and .Values.global.internalNamespace (ne .Values.global.internalNamespace .Release.Namespace) }}
{{- $namespaces = append $namespaces .Values.global.internalNamespace }}
{{- end }}
{{- /* Look for the secret in any target namespace to keep one canonical password */}}
{{- $existingSecret := "" }}
{{- range $n := $namespaces }}
  {{- if not $existingSecret }}
    {{- $tmp := (lookup "v1" "Secret" $n "flightctl-db-app-secret") }}
    {{- if $tmp }}{{- $existingSecret = $tmp }}{{- end }}
  {{- end }}
{{- end }}

{{- $userPassword := "" }}
{{- if $existingSecret }}
  {{- if and (hasKey $existingSecret "data") (hasKey $existingSecret.data "userPassword") }}
    {{- $userPassword = (index $existingSecret.data "userPassword") }}
  {{- else }}
    {{ fail "flightctl-db-app-secret is missing data.userPassword â€“ delete it or add the key." }}
  {{- end }}
{{- else }}
  {{- $userPassword = (include "flightctl.generatePassword" .) }}
{{- end }}
{{- range $ns := $namespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: flightctl-db-app-secret
  namespace: {{ $ns }}
  labels:
    flightctl.service: flightctl-db-app
    security.level: application
type: Opaque
data:
  user: {{ $.Values.db.user | b64enc }}
  userPassword: {{ if $.Values.db.userPassword }}{{ $.Values.db.userPassword | b64enc }}{{ else }}{{ $userPassword }}{{ end }}
{{- end }}