{{ if .Values.api.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: flightctl-api-config
  namespace: {{ .Release.Namespace }}
data:
  config.yaml: |-
    database:
        hostname: flightctl-db.{{ default .Release.Namespace .Values.global.internalNamespace }}.svc.cluster.local
        type: pgsql
        port: 5432
        name: flightctl
        user: {{ .Values.db.masterUser }}
        password: {{ .Values.db.masterPassword }}   # we should funnel this via secrets instead
    service:
        address: :3443
        agentEndpointAddress: :7443
        agentGrpcAddress: :7444
        {{- if .Values.api.hostNames.api }}
        baseUrl: https://{{ .Values.api.hostNames.api }}{{ if .Values.api.nodePorts.api }}:{{ .Values.api.nodePorts.api }}{{ end }}/
        {{- else }}
        baseUrl: https://api.{{ include "flightctl.getBaseDomain" . }}{{ if .Values.api.nodePorts.api }}:{{ .Values.api.nodePorts.api }}{{ end }}/
        {{- end }}
        {{- if .Values.api.hostNames.agent }}
        baseAgentEndpointUrl:  https://{{ .Values.api.hostNames.agent }}{{ if .Values.api.nodePorts.agent }}:{{ .Values.api.nodePorts.agent }}{{ end }}/
        {{- else }}
        baseAgentEndpointUrl:  https://agent-api.{{ include "flightctl.getBaseDomain" . }}{{ if .Values.api.nodePorts.agent }}:{{ .Values.api.nodePorts.agent }}{{ end }}/
        {{- end }}
        {{- if .Values.api.agentGrpcBaseURL }}
        baseAgentGrpcUrl:  {{ .Values.api.agentGrpcBaseURL }}
        {{- else }}
        baseAgentGrpcUrl:  grpcs://agent-grpc.{{ include "flightctl.getBaseDomain" . }}{{ if .Values.api.nodePorts.grpc }}:{{ .Values.api.nodePorts.grpc }}{{ end }}
        {{- end }}
        {{- if .Values.api.baseUIUrl }}
        baseUIUrl:  {{ .Values.api.baseUIUrl }}
        {{- else if eq .Values.global.target "acm" }}
        baseUIUrl:  https://console-openshift-console.{{ include "flightctl.getBaseDomain" (merge . (dict "noNs" "true")) }}/edge
        {{- else  }}
        baseUIUrl:  https://ui.{{ include "flightctl.getBaseDomain" . }}
        {{- end }}
        altNames:
          {{- if .Values.api.hostNames.api }}
          - {{ .Values.api.hostNames.api }}
          {{- else }}
          - api.{{ include "flightctl.getBaseDomain" . }}
          {{- end }}
          {{- if .Values.api.hostNames.agent }}
          - {{ .Values.api.hostNames.agent }}
          {{- else }}
          - agent-api.{{ include "flightctl.getBaseDomain" . }}
          {{- end }}
          {{- if .Values.api.hostNames.grpc }}
          - {{ .Values.api.hostNames.grpc }}
          {{- else }}
          - agent-grpc.{{ include "flightctl.getBaseDomain" . }}
          {{- end }} 
          - flightctl-api
          - flightctl-api.{{ .Release.Namespace }}
          - flightctl-api.{{ .Release.Namespace }}.svc.cluster.local
          - flightctl-api-agent-grpc
          - flightctl-api-agent-grpc.{{ .Release.Namespace }}
          - flightctl-api-agent-grpc.{{ .Release.Namespace }}.svc.cluster.local
    queue:
        amqpUrl: amqp://{{ .Values.rabbitmq.auth.username }}:{{ .Values.rabbitmq.auth.password }}@flightctl-rabbitmq.{{ default .Release.Namespace .Values.global.internalNamespace }}.svc.cluster.local:{{ .Values.rabbitmq.ports.amqp }}/
    {{- if not (eq .Values.global.auth.type "none")  }}
    {{- if or (eq .Values.global.target "acm") (eq .Values.global.auth.type "openshift")  }}
    auth:
        openShiftApiUrl: {{ include "flightctl.getOpenShiftAPIUrl" . }}
        insecureSkipTlsVerify: {{ .Values.global.auth.insecureSkipTlsVerify }}
    {{- else }}
    auth:
        {{- if .Values.global.auth.oidcAuthority }}
        oidcAuthority: {{ .Values.global.auth.oidcAuthority }}
        internalOidcAuthority: {{ .Values.global.auth.internalOidcAuthority }}
        {{- else }}
        oidcAuthority: https://auth.{{ include "flightctl.getBaseDomain" . }}/realms/flightctl
        internalOidcAuthority: http://keycloak:8080/realms/flightctl
        {{- end }}
        insecureSkipTlsVerify: {{ .Values.global.auth.insecureSkipTlsVerify }}
    {{- end }}
    {{- end }}
    prometheus:
        address: ":15690"
        sloMax: 4.0
        apiLatencyBins: [0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1]
{{ end }}
