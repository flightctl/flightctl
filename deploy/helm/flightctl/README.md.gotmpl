# {{ .Name }}

![Version: {{ .Version }}](https://img.shields.io/badge/Version-{{ .Version | replace "-" "--" }}-informational?style=flat-square) ![Type: {{ .Type }}](https://img.shields.io/badge/Type-{{ .Type }}-informational?style=flat-square) {{ if .AppVersion }}![AppVersion: {{ .AppVersion }}](https://img.shields.io/badge/AppVersion-{{ .AppVersion | replace "-" "--" }}-informational?style=flat-square){{ end }}

{{ .Description }}

{{ if .Home }}**Homepage:** <{{ .Home }}>{{ end }}

{{ if .Sources }}
**Sources:**
{{- range .Sources }}
- <{{ . }}>
{{- end }}
{{ end }}

{{ if .Maintainers }}
## Maintainers

| Name | Email | Url |
| ---- | ------ | --- |
{{- range .Maintainers }}
| {{ if .Name }}{{ .Name }}{{ end }} | {{ if .Email }}<{{ .Email }}>{{ end }} | {{ if .Url }}<{{ .Url }}>{{ end }} |
{{- end }}
{{ end }}

{{ if .Dependencies }}
## Requirements

| Repository | Name | Version |
|------------|------|---------|
{{- range .Dependencies }}
| {{ if .Repository }}{{ .Repository }}{{ else }}{{ .Name }}{{ end }} | {{ .Name }} | {{ .Version }} |
{{- end }}
{{ end }}

## Installation

### Install Chart

```bash
# Install with default values
helm install my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }}

# Install with custom values
helm install my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }} -f values.yaml

# Install for development environment
helm install my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }} -f values.dev.yaml

# Install for ACM (Advanced Cluster Management) integration
helm install my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }} -f values.acm.yaml

# Install in specific namespace
helm install my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }} --namespace flightctl --create-namespace
```

### Upgrade Chart

{{ .Name | title }} uses Helm **pre-upgrade hooks** and a controlled sequence of steps to keep data consistent and minimize downtime:

1. **Scale down selected services** — services listed in `upgradeHooks.scaleDown.deployments` are **scaled to 0 in order** for a clean shutdown.
2. **Migration dry-run** — validates database migrations to catch issues early.
3. **Database migration (expand-only)** — applies backward-compatible schema changes.
4. **Service update & restart** — workloads are updated to the new spec and rolled out.

Example upgrade hooks configuration:

```yaml
upgradeHooks:
  scaleDown:
    deployments:
      - flightctl-api
      - flightctl-worker
  databaseMigrationDryRun: true  # default true
```

Note: On fresh installs, migrations run as a regular Job (not a hook).

Basic upgrade command:

```bash
helm upgrade my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }}
```

Upgrade to a specific chart version:

```bash
helm upgrade \
  --version <new-version> \
  my-{{ .Name }} oci://quay.io/flightctl/charts/{{ .Name }}
```

**Best Practices:**

* Consider `--atomic` so Helm waits and **automatically rolls back** if the upgrade fails.
* Before major upgrades, back up the database and configuration to ensure a clean restore point.
* **Preview the diff before upgrading** with the [Helm diff plugin](https://github.com/databus23/helm-diff).

### Rollbacks

Use rollbacks to revert to a previously successful revision if an upgrade causes issues. Use `helm history` to identify the target revision, then roll back if needed.

Show release history and see failure reasons in the DESCRIPTION column:

```bash
$ helm history my-{{ .Name }}
REVISION  UPDATED  STATUS    CHART          APP VERSION  DESCRIPTION
1         ...      deployed  {{ .Name }}-x.y.z  <appver>     Install complete
2         ...      failed    {{ .Name }}-x.y.z  <appver>     Upgrade "my-{{ .Name }}" failed: context deadline exceeded
```

Roll back to the previous successful revision (#1) and wait until it's healthy:

```bash
$ helm rollback my-{{ .Name }} 1 --wait
Rollback was a success! Happy Helming!
```

Verify that history reflects the rollback:

```bash
$ helm history my-{{ .Name }}
REVISION  UPDATED  STATUS      CHART          APP VERSION  DESCRIPTION
1         ...      superseded  {{ .Name }}-x.y.z  <appver>     Install complete
2         ...      failed      {{ .Name }}-x.y.z  <appver>     Upgrade "my-{{ .Name }}" failed: context deadline exceeded
3         ...      deployed    {{ .Name }}-x.y.z  <appver>     Rollback to 1
```


### Monitoring

Use these commands to inspect the current release state, values, and installed releases.

Show current release status and notes:

```bash
helm status my-{{ .Name }}
```

Show user-supplied values (add `--all` to include chart defaults as well):

```bash
helm get values my-{{ .Name }}
helm get values my-{{ .Name }} --all
```

List releases and observe revision bump/status after an upgrade attempt:

```bash
$ helm list
NAME        NAMESPACE  REVISION  UPDATED  STATUS    CHART           APP VERSION
my-{{ .Name }}   ...        1         ...      deployed  {{ .Name }}-x.y.z   <appver>
my-{{ .Name }}   ...        2         ...      failed    {{ .Name }}-x.y.z   <appver>
```


### Uninstall Chart

```bash
helm uninstall my-{{ .Name }}
```

## Usage

After installation, {{ .Name }} will be available in your cluster.

{{ if eq .Name "flightctl" }}
### Accessing Flight Control

1. **API Access**: The Flight Control API will be available at the configured endpoint
2. **UI Access**: If enabled, the web UI will be accessible through the configured route/ingress
3. **Agent Connection**: Devices can connect using the agent endpoint

### Configuration Examples

```yaml
# Example: Standalone deployment with custom domain
global:
  target: "standalone"
  baseDomain: "flightctl.example.com"
  auth:
    type: "builtin"

# Example: ACM integration
global:
  target: "acm"
  auth:
    type: "k8s"
    k8s:
      apiUrl: "https://api.cluster.example.com:6443"
```

### TLS/SSL Certificate Configuration

When using external PostgreSQL databases with TLS/SSL, Flight Control supports multiple certificate management options:

#### Option 1: Kubernetes ConfigMap/Secret (Production)

```bash
# Create certificate resources
kubectl create configmap postgres-ca-cert \
  --from-file=ca-cert.pem=/path/to/ca-cert.pem

kubectl create secret generic postgres-client-certs \
  --from-file=client-cert.pem=/path/to/client-cert.pem \
  --from-file=client-key.pem=/path/to/client-key.pem
```

```yaml
# Configure in values.yaml
db:
  external: "enabled"
  hostname: "postgres.example.com"
  sslmode: "verify-ca"
  sslConfigMap: "postgres-ca-cert"     # ConfigMap containing CA certificate
  sslSecret: "postgres-client-certs"   # Secret containing client certificates
```

**TLS/SSL Modes:**
- `disable` - No TLS/SSL (not recommended for production)
- `require` - TLS/SSL required, no certificate verification
- `verify-ca` - TLS/SSL required, verify server certificate against CA
- `verify-full` - TLS/SSL required, verify certificate and hostname

For complete TLS/SSL configuration details, see the [external database documentation](https://docs.flightctl.io/user/external-database/).
{{ end }}

For more detailed configuration options, see the [Values](#values) section below.

{{ template "chart.valuesSection" . }}

## Environment-Specific Values Files

This chart includes additional values files for different deployment scenarios:

### `values.dev.yaml`

Development environment configuration with:

- Local development settings
- Debug configurations
- Development-specific image tags

### `values.acm.yaml`

Advanced Cluster Management (ACM) integration configuration with:

- ACM-specific authentication settings
- Red Hat registry images
- ACM integration parameters

To use these files:

```bash
# Development deployment
helm install my-flightctl oci://quay.io/flightctl/charts/flightctl -f values.dev.yaml

# ACM integration deployment
helm install my-flightctl oci://quay.io/flightctl/charts/flightctl -f values.acm.yaml

# Combine multiple values files (later files override earlier ones)
helm install my-flightctl oci://quay.io/flightctl/charts/flightctl -f values.yaml -f values.acm.yaml -f my-custom.yaml
```

## Contributing

Please read the [contributing guidelines](https://github.com/flightctl/flightctl/blob/main/CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the Apache License 2.0 - see the [LICENSE](https://github.com/flightctl/flightctl/blob/main/LICENSE) file for details.
