{{ if and (eq (.Values.global).target "standalone") (eq (.Values.global.auth).type "builtin") }}
{{ $password := include "keycloak.lookupOrGeneratePassword" (dict "secret" "keycloak-db-pguser-keycloak" "namespace" (default .Release.Namespace .Values.db.namespace) "key" "password" "context" $) }}
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-db-pguser-keycloak
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  jdbcUrl: {{ printf "jdbc:postgresql://keycloak-db.%s:5432/keycloak" .Release.Namespace | b64enc | quote }}
  hostname: {{ printf "keycloak-db.%s" .Release.Namespace | b64enc | quote }}
  database: {{ printf "keycloak" | b64enc | quote }}
  username: {{ printf "keycloak" | b64enc | quote }}
  password: {{ $password }}
{{- if ne .Values.namespace .Values.db.namespace }}
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-db-pguser-keycloak
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/resource-policy": "keep"
type: Opaque
data:
  jdbcUrl: {{ printf "jdbc:postgresql://keycloak-db.%s:5432/keycloak" .Release.Namespace | b64enc | quote }}
  hostname: {{ printf "keycloak-db.%s" .Release.Namespace | b64enc | quote }}
  database: {{ printf "keycloak" | b64enc | quote }}
  username: {{ printf "keycloak" | b64enc | quote }}
  password: {{ $password | b64enc | quote }}
{{- end }}
{{ end }}
