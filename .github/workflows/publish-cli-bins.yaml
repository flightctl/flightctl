name: "Release CLI Binaries on GH"
on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:
  build:
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    env:
      NAME: flightctl-${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os == 'darwin' && 'macos-latest' || 'ubuntu-24.04' }}
    steps:
      - name: Install Go (if macOS)
        if: ${{ matrix.os == 'darwin' }}
        run: |
          brew install go
          go version

      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Build"
        env:
          GOARCH: ${{ matrix.arch }}
          GOOS: ${{ matrix.os }}
        run: |
          make build-cli
          SHA=$(shasum -a 256 bin/flightctl | awk '{ print $1 }')
          echo $SHA > ${{ env.NAME }}-sha256.txt
          mv bin/flightctl ${{ env.NAME }}
          tar cvf ${{ env.NAME }}.tar.gz ${{ env.NAME }}

      - name: "Save tar binary"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}.tar.gz
          path: ${{ env.NAME }}.tar.gz

      - name: "Save binary"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}
          path: ${{ env.NAME }}

      - name: "Save checksum"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.NAME }}-sha256.txt
          path: ${{ env.NAME }}-sha256.txt

  verify:
    strategy:
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    env:
      NAME: flightctl-${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os == 'darwin' && 'macos-latest' || 'ubuntu-24.04' }}
    if: ${{ !(matrix.os == 'linux' && matrix.arch == 'arm64') }}
    needs: [build]

    steps:
      - name: "Load binary"
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.NAME }}

      - name: "Verify"
        run: |
          chmod +x ${{ env.NAME }}
          ls -l
          file ${{ env.NAME }}
          ./${{ env.NAME }} version
          exit $?

  publish:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: "ubuntu-24.04"
    needs: [verify]
    permissions:
      contents: write

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Load binary archives"
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: release

      # if this is a push to the main branch, we update the latest release of binaries
      - name: "Publish latest"
        if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OLD_RELEASE=$(gh release list --json 'tagName' --jq 'any(.[]; .tagName == "latest")')
          if [ $OLD_RELEASE == 'true' ]; then
            # if there is a release already we only update the binaries
            # otherwise a new release will trigger an rpm build from packit
            gh release upload latest --clobber release/*
          else
            # if the release did not exist, we should create it at least once
            gh release create -p -n "Flightctl CLI pre-release" latest release/*
          fi

      # if this is a tag, we upload the release binaries, the release already exists
      - name: "Publish tag"
        if: ${{ github.ref_type == 'tag' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} release/*
