name: "Release CLI Binaries on GH"
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release-*'
    tags:
      - '*'
  pull_request:

jobs:
  setup:
    name: Set Up Shared Environment
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make

  build:
    name: Build Binaries
    strategy:
      matrix:
        tag: [ "linux-amd64", "linux-arm64", "darwin-amd64", "darwin-arm64", "windows-amd64", "windows-arm64" ]
        include:
          # Linux builds
          - tag: linux-amd64
            arch: amd64
            os: linux
            zip: .tar.gz
            ext: ""
          - tag: linux-arm64
            arch: arm64
            os: linux
            zip: .tar.gz
            ext: ""

          # macOS builds
          - tag: darwin-amd64
            arch: amd64
            os: darwin
            zip: .zip
            ext: ""
          - tag: darwin-arm64
            arch: arm64
            os: darwin
            zip: .zip
            ext: ""

          # Windows builds
          - tag: windows-amd64
            arch: amd64
            os: windows
            zip: .zip
            ext: .exe
          - tag: windows-arm64
            arch: arm64
            os: windows
            zip: .zip
            ext: .exe
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install dependencies
      - name: Install Dependencies
        run: go mod tidy

      - name: Build
        run: |
          GOOS="${{ matrix.os }}" GOARCH="${{ matrix.arch }}" make build-cli
          mv "bin/flightctl${{ matrix.ext }}" "flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }}"
          SHA=$(shasum -a 256 flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }} | cut -d' ' -f1)
          echo ${SHA} > flightctl-${{ matrix.os }}-${{ matrix.arch}}-sha256.txt
          if [ "${{ matrix.zip }}" = ".zip" ]; then
            zip flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.zip }} flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }}
          else
            tar cvf flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.zip }} flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }}
          fi

      - name: Save zip
        uses: actions/upload-artifact@v4
        with:
          name: flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.zip }}
          path: flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.zip }}

      - name: Save binary
        uses: actions/upload-artifact@v4
        with:
          name: flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }}
          path: flightctl-${{ matrix.os }}-${{ matrix.arch}}${{ matrix.ext }}

      - name: Save checksum
        uses: actions/upload-artifact@v4
        with:
          path: flightctl-${{ matrix.os }}-${{ matrix.arch}}-sha256.txt
          name: flightctl-${{ matrix.os }}-${{ matrix.arch}}-sha256.txt

  verify-windows:
    name: Verify Binaries on windows
    strategy:
      matrix:
        # GitHub Actions does not provide a native Windows ARM64 runner
        arch: [ "amd64" ]
    runs-on: "windows-latest"
    needs: build
    steps:
      - name: Load binary
        uses: actions/download-artifact@v4
        with:
          name: flightctl-windows-${{ matrix.arch }}.exe
      - name: Verify
        run: .\flightctl-windows-${{ matrix.arch }}.exe version

  verify:
    name: Verify Binaries on linux/macos
    strategy:
      matrix:
        os_arch: [ "linux-amd64", "linux-arm64", "darwin-amd64", "darwin-arm64" ]
        include:
          - os_arch: "linux-amd64"
            runner: "ubuntu-latest"
          - os_arch: "linux-arm64"
            runner: "ubuntu-latest"
          - os_arch: "darwin-amd64"
            runner: "macos-latest"
          - os_arch: "darwin-arm64"
            runner: "macos-latest"
    runs-on: ${{ matrix.runner }}
    needs: build

    steps:
      - name: Load binary
        uses: actions/download-artifact@v4
        with:
          name: flightctl-${{ matrix.os_arch }}

      - name: Make Executable
        run: chmod +x flightctl-${{ matrix.os_arch }}

      - name: Setup QEMU
        run: |
          if [[ "${{ matrix.os_arch }}" == "linux-arm64" ]]; then
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          fi

      - name: Verify
        run: |
          # Verify version output
          if [[ "${{ matrix.os_arch }}" == "linux-arm64" ]]; then
            docker run --rm --platform linux/arm64 -v ${{ github.workspace }}:/workspace ubuntu:latest /workspace/flightctl-${{ matrix.os_arch }} version -o yaml
          else
            ./flightctl-${{ matrix.os_arch }} version -o yaml
          fi
          if [ $? -gt 0 ]; then
            echo "Error: Version command failed"
            exit 1
          fi

  download-copr-rpms:
    name: Download RPMs from COPR
    if: ${{ github.event_name != 'pull_request' && github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    needs: [ verify, verify-windows ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install COPR CLI and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends curl jq python3-pip
          pip3 install copr-cli

      - name: Wait for COPR build completion
        run: |
          echo "Looking for COPR builds to download"

          # For PR testing, use a recent successful build instead of waiting for a specific version
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "PR testing mode - using most recent successful build"
            builds=$(copr-cli list-builds @redhat-et/flightctl --output-format json)
            completed_build=$(echo "$builds" | jq -r '.[] | select(.state == "succeeded") | .id' | head -1)

            if [ -n "$completed_build" ] && [ "$completed_build" != "null" ]; then
              echo "Found recent completed COPR build for testing: $completed_build"
              echo "build_id=$completed_build" >> $GITHUB_ENV
            else
              echo "No recent successful builds found"
              exit 1
            fi
          else
            echo "Waiting for COPR builds to complete for tag ${{ github.ref_name }}"

            # Wait up to 45 minutes for builds to complete
            max_attempts=90
            attempt=0

            while [ $attempt -lt $max_attempts ]; do
              # Get recent builds for the flightctl project
              builds=$(copr-cli list-builds @redhat-et/flightctl --output-format json)

              # Check if we have a successful build for this tag/version
              version="${{ github.ref_name }}"
              version=${version#v}  # Remove 'v' prefix

              completed_build=$(echo "$builds" | jq -r --arg version "$version" '.[] | select(.source_package.version == $version and .state == "succeeded") | .id' | head -1)

            if [ -n "$completed_build" ] && [ "$completed_build" != "null" ]; then
              echo "Found completed COPR build: $completed_build"
              echo "build_id=$completed_build" >> $GITHUB_ENV
              break
            fi

              echo "Waiting for COPR build to complete... (attempt $((attempt + 1))/$max_attempts)"
              sleep 30
              attempt=$((attempt + 1))
            done

            if [ $attempt -eq $max_attempts ]; then
              echo "Timeout waiting for COPR build to complete"
              exit 1
            fi
          fi

      - name: Download RPMs from COPR
        run: |
          build_id="${{ env.build_id }}"
          mkdir -p copr-rpms-final
          
          # Use download-build command to get the RPMs directly
          echo "Downloading build $build_id from COPR..."
          copr-cli download-build $build_id --dest copr-rpms-temp
          
          # Remove debuginfo, debugsource, and source RPMs
          find copr-rpms-temp -name "*debuginfo*.rpm" -delete
          find copr-rpms-temp -name "*debugsource*.rpm" -delete
          find copr-rpms-temp -name "*.src.rpm" -delete
          
          # Rename RPMs to include directory name to avoid conflicts
          echo "Renaming and organizing RPMs:"
          find copr-rpms-temp -name "*.rpm" | while read rpm_path; do
            dir_name=$(basename "$(dirname "$rpm_path")")
            rpm_name=$(basename "$rpm_path")
            new_name="${dir_name}-${rpm_name}"
            echo "  $rpm_name -> $new_name"
            cp "$rpm_path" "copr-rpms-final/$new_name"
          done
          
          # List final RPMs
          echo "Final RPMs for upload:"
          ls -la copr-rpms-final/

      - name: Save RPMs
        uses: actions/upload-artifact@v4
        with:
          name: flightctl-rpms
          path: copr-rpms-final/*.rpm

  publish:
    name: Publish Binaries
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ verify, verify-windows, download-copr-rpms ]
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load binary archives
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: release

      - name: Load RPMs
        uses: actions/download-artifact@v4
        with:
          name: flightctl-rpms
          path: release/rpms

      # if this is a push to the main branch, we update the latest release of binaries
      - name: Publish latest
        if: ${{ github.ref_type == 'branch' && github.ref_name == 'main' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OLD_RELEASE=$(gh release list --json 'tagName' --jq 'any(.[]; .tagName == "latest")')
          if [ $OLD_RELEASE == 'true' ]; then
            # if there is a release already we only update the binaries
            # otherwise a new release will trigger an rpm build from packit
            gh release upload latest --clobber release/*
          else
            # if the release did not exist, we should create it at least once
            gh release create -p -n "Flight Control CLI pre-release" latest release/*
          fi

      # if this is a tag, we upload the release binaries, the release already exists
      - name: Publish tag
        if: ${{ github.ref_type == 'tag' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ github.ref_name }} release/*
