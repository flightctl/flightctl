name: Update FlightCtl RPM Repository

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to download (e.g., 0.8.0, v0.8.0-rc2)'
        required: true
        type: string
      wait_for_copr:
        description: 'Wait for COPR build to complete'
        required: false
        default: true
        type: boolean

  release:
    types: [published]

permissions:
  contents: read
  id-token: write

jobs:
  update-rpm-repository:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: flightctl

      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.FLIGHTCTL_RPM_APP_ID }}
          private-key: ${{ secrets.FLIGHTCTL_RPM_APP_PRIVATE_KEY }}
          repositories: flightctl-rpm

      - name: Checkout RPM repository
        uses: actions/checkout@v4
        with:
          repository: flightctl/flightctl-rpm
          token: ${{ steps.app-token.outputs.token }}
          path: flightctl-rpm

      - name: Install dependencies
        run: |
          set -euo pipefail
          echo "=== Installing dependencies ==="
          sudo apt-get update
          sudo apt-get install -y createrepo-c curl jq python3-pip
          pip3 install copr-cli

          echo "Installed versions:"
          createrepo_c --version
          copr-cli --version
          jq --version

      - name: Determine version to download
        id: version
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "Using release tag: $VERSION"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual input: $VERSION"
          else
            echo "[ERROR] Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Wait for COPR build completion
        if: ${{ github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.wait_for_copr == 'true') }}
        working-directory: flightctl
        run: |
          set -euo pipefail
          echo "=== Waiting for COPR build completion ==="
          VERSION="${{ steps.version.outputs.version }}"
          echo "Waiting for COPR build for version: $VERSION"

          # Wait up to 60 minutes for builds to complete
          max_attempts=120
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt + 1))/$max_attempts - Checking for completed build..."

            # Try to find the build using COPR API
            build_id=$(copr-cli list-builds "@redhat-et/flightctl" --output-format json 2>/dev/null | \
              jq -r '.[] | select(.state == "succeeded") | .id' | head -20 | \
              while read -r bid; do
                curl -s "https://copr.fedorainfracloud.org/api_3/build/$bid" 2>/dev/null | \
                jq -r --arg ver "$VERSION" '
                  select(.source_package.version != null) as $v |
                  ($v.source_package.version | sub("-[^-]+$"; "")) as $clean |
                  select($clean == $ver) |
                  $v.id'
              done | head -1)

            if [[ -n "$build_id" ]]; then
              echo "[SUCCESS] COPR build $build_id found and ready"
              break
            fi

            echo "[INFO] Build not ready yet, waiting 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "[ERROR] Timeout waiting for COPR build for version $VERSION"
            exit 1
          fi

      - name: Download RPMs from COPR
        working-directory: flightctl
        run: |
          set -euo pipefail
          echo "=== Downloading RPMs using our script ==="
          VERSION="${{ steps.version.outputs.version }}"

          echo "Running: ./hack/copr-to-gh_pages-download.sh $VERSION"

          # Make script executable and run it
          chmod +x ./hack/copr-to-gh_pages-download.sh
          ./hack/copr-to-gh_pages-download.sh "$VERSION"

          echo "Script completed successfully!"

          # Verify what we downloaded
          echo "Downloaded content:"
          ls -la .output/copr-rpms-temp/

          total_rpms=$(find .output/copr-rpms-temp -name "*.rpm" | wc -l)
          echo "Total RPMs downloaded: $total_rpms"

          if [ $total_rpms -eq 0 ]; then
            echo "[ERROR] No RPMs were downloaded!"
            exit 1
          fi

      - name: Generate RPM repository structure
        working-directory: flightctl
        run: |
          set -euo pipefail
          echo "=== Generating RPM repository structure ==="

          # Make the script executable
          chmod +x ./hack/create-rpm-repo.sh

          # Run the repository creation script
          ./hack/create-rpm-repo.sh

          echo "Repository structure created successfully!"

          # Verify structure
          echo "Generated structure:"
          ls -la .output/flightctl-rpm/

      - name: Create branch and update RPM repository
        working-directory: flightctl-rpm
        run: |
          set -euo pipefail
          echo "=== Creating update branch ==="
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="update-rpm-$VERSION-$(date +%Y%m%d-%H%M%S)"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"

          # Copy new content from generated repository, preserving existing versions
          # First, copy the repository configuration files (always update these)
          cp ../flightctl/.output/flightctl-rpm/*.repo . 2>/dev/null || true
          cp ../flightctl/.output/flightctl-rpm/README.md . 2>/dev/null || true

          # Copy platform directories, but preserve existing content for other versions
          for platform_dir in ../flightctl/.output/flightctl-rpm/*/; do
            if [ -d "$platform_dir" ]; then
              platform=$(basename "$platform_dir")
              # Skip if it's not a platform directory
              if [[ "$platform" == "repodata" ]]; then
                continue
              fi

              echo "Processing platform: $platform"

              # Create platform directory if it doesn't exist
              mkdir -p "$platform"

              # Copy new RPMs for this version
              find "$platform_dir" -name "*.rpm" -exec cp "{}" "$platform/" \;

              # Copy repodata if it exists
              if [ -d "$platform_dir/repodata" ]; then
                cp -r "$platform_dir/repodata" "$platform/"
              fi

              # Copy platform index.html
              if [ -f "$platform_dir/index.html" ]; then
                cp "$platform_dir/index.html" "$platform/"
              fi
            fi
          done

          # Regenerate repository metadata for all platforms to include all versions
          echo "Regenerating repository metadata for all platforms..."
          for platform_dir in */; do
            if [ -d "$platform_dir" ] && [[ "$platform_dir" != ".git/" ]] && [[ "$platform_dir" != ".github/" ]]; then
              platform=${platform_dir%/}
              echo "  Updating metadata for $platform"

              # Regenerate repository metadata
              createrepo_c "$platform_dir" || {
                echo "Warning: Failed to create repo metadata for $platform"
                continue
              }
            fi
          done

          # Generate HTML files using the script in a temporary location, then copy only HTML
          echo "Regenerating HTML files with all versions..."
          cd ../flightctl
          ./hack/create-rpm-repo.sh ../flightctl-rpm /tmp/html-generation flightctl flightctl
          # Copy only the HTML files, preserving the git repository structure
          cp /tmp/html-generation/index.html ../flightctl-rpm/
          cp /tmp/html-generation/*.repo ../flightctl-rpm/ 2>/dev/null || true
          cp /tmp/html-generation/README.md ../flightctl-rpm/ 2>/dev/null || true
          # Copy platform index.html files
          for platform_dir in /tmp/html-generation/*/; do
            if [ -d "$platform_dir" ]; then
              platform=$(basename "$platform_dir")
              if [ -f "$platform_dir/index.html" ] && [ -d "../flightctl-rpm/$platform" ]; then
                cp "$platform_dir/index.html" "../flightctl-rpm/$platform/"
              fi
            fi
          done
          cd ../flightctl-rpm

          # Add all changes
          git add .

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "[INFO] No changes detected, skipping PR creation"
            echo "skip_pr=true" >> $GITHUB_ENV
          else
            echo "[INFO] Changes detected, preparing commit..."
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV
            echo "skip_pr=false" >> $GITHUB_ENV

            # Commit changes
            git commit -m "Update RPM repository for FlightCtl $VERSION" -m "- Add/update RPM packages for version $VERSION" -m "- Update repository metadata" -m "- Auto-generated from flightctl/flightctl workflow" -m "" -m "Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"

            # Push branch
            git push origin "$BRANCH_NAME"
            echo "[SUCCESS] Pushed branch $BRANCH_NAME"
          fi

      - name: Create Pull Request
        if: env.skip_pr == 'false'
        run: |
          set -euo pipefail
          echo "=== Creating Pull Request ==="
          VERSION="${{ steps.version.outputs.version }}"
          BRANCH_NAME="${{ env.branch_name }}"

          # Create PR using GitHub CLI
          cd flightctl-rpm

          PR_BODY="## FlightCtl RPM Repository Update

          This PR updates the RPM repository with FlightCtl version $VERSION.

          ### Changes
          • Updated RPM packages for version $VERSION
          • Refreshed repository metadata
          • Updated platform-specific index pages

          ### Automation
          • Source: flightctl/flightctl workflow
          • Trigger: ${{ github.event_name }}

          ### Packages Included
          • flightctl-agent-$VERSION
          • flightctl-cli-$VERSION

          ### Supported Platforms
          $(find . -maxdepth 1 -type d -name 'epel-*' -o -name 'fedora-*' | sed 's|./||' | sort | sed 's/^/• /')

          ---
          *This PR was automatically created by the FlightCtl release automation.*"

          gh pr create \
            --title "Update RPM repository for FlightCtl $VERSION" \
            --body "$PR_BODY" \
            --head "$BRANCH_NAME" \
            --base main \
            --repo flightctl/flightctl-rpm

          echo "[SUCCESS] Pull Request created successfully"

          # Get PR number for auto-merge
          PR_NUMBER=$(gh pr view "$BRANCH_NAME" --repo flightctl/flightctl-rpm --json number --jq '.number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}


      - name: Create deployment summary
        run: |
          set -euo pipefail
          echo "## FlightCtl RPM Repository Update" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- Repository: [flightctl/flightctl-rpm](https://github.com/flightctl/flightctl-rpm)" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ env.skip_pr }}" = "false" ]; then
            echo "- PR Created: #${{ env.pr_number }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Status: No changes detected, no PR created" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Platforms:" >> $GITHUB_STEP_SUMMARY
          cd flightctl/.output/flightctl-rpm
          for platform_dir in */; do
            if [ -d "$platform_dir" ] && [[ "$platform_dir" != "repodata/" ]]; then
              platform=${platform_dir%/}
              rpm_count=$(find "$platform_dir" -name "*.rpm" | wc -l)
              echo "- $platform: $rpm_count RPMs" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Installation:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# EPEL" >> $GITHUB_STEP_SUMMARY
          echo "sudo dnf config-manager addrepo --from-repofile=https://flightctl.github.io/flightctl-rpm/flightctl-epel.repo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Fedora" >> $GITHUB_STEP_SUMMARY
          echo "sudo dnf config-manager addrepo --from-repofile=https://flightctl.github.io/flightctl-rpm/flightctl-fedora.repo" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Install packages" >> $GITHUB_STEP_SUMMARY
          echo "sudo dnf install flightctl-agent flightctl-cli" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

