name: Update RPM Repository

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to download (e.g., 0.8.0, v0.8.0-rc2)'
        required: true
        type: string
      use_curl:
        description: 'Use curl for faster downloads'
        required: false
        default: true
        type: boolean

  release:
    types: [published]

  push:
    branches:
      - 'release-*'
    tags:
      - '*'

permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  update-rpm-repo:
    # Only run for releases/tags/manual/push, not PR builds
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          echo "=== Installing dependencies ==="
          sudo apt-get update
          sudo apt-get install -y createrepo-c curl jq python3-pip parallel
          pip3 install copr-cli
          
          echo "Installed versions:"
          createrepo_c --version
          copr-cli --version
          jq --version
          parallel --version
          echo "=========================="

      - name: Determine version to download
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            echo "Using release tag: $VERSION"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "Using manual input: $VERSION"
          elif [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            echo "Using push tag: $VERSION"
          else
            # For push to release branches, get the latest successful build
            echo "Push to branch ${{ github.ref_name }} - finding latest successful COPR build"
          
            # Get the most recent successful build
            builds=$(copr-cli list-builds @redhat-et/flightctl --output-format json)
            latest_build_id=$(echo "$builds" | jq -r '.[] | select(.state == "succeeded") | .id' | head -1)
          
            if [ -n "$latest_build_id" ]; then
              # Get version from the build
              build_details=$(curl -s "https://copr.fedorainfracloud.org/api_3/build/$latest_build_id")
              VERSION=$(echo "$build_details" | jq -r '.source_package.version')
              echo "Using latest successful build version: $VERSION (build: $latest_build_id)"
            else
              echo "❌ No successful builds found"
              exit 1
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final version: $VERSION"

      - name: Wait for COPR build (for tags and releases)
        if: ${{ github.event_name == 'release' || github.ref_type == 'tag' }}
        run: |
          echo "=== Waiting for COPR build completion ==="
          VERSION="${{ steps.version.outputs.version }}"
          echo "Waiting for COPR build for version: $VERSION"
          
          # Wait up to 45 minutes for builds to complete
          max_attempts=90
          attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            echo "Attempt $((attempt + 1))/$max_attempts - Checking for completed build..."
          
            # Use our script's build finding logic
            if build_id=$(timeout 30 ./hack/copr_to_gh-pages_upload.sh "$VERSION" 2>/dev/null | grep "Using COPR build ID:" | cut -d: -f2 | tr -d ' '); then
              if [ -n "$build_id" ] && [ "$build_id" != "" ]; then
                echo "✅ Found completed COPR build: $build_id"
                echo "build_ready=true" >> $GITHUB_ENV
                break
              fi
            fi
          
            echo "⏳ Build not ready yet, waiting 30 seconds..."
            sleep 30
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ Timeout waiting for COPR build for version $VERSION"
            echo "Available successful builds:"
            builds=$(copr-cli list-builds @redhat-et/flightctl --output-format json)
            echo "$builds" | jq -r '.[] | select(.state == "succeeded") | "\(.id): \(.source_package.version // "unknown")"' | head -5
            exit 1
          fi

      - name: Download RPMs from COPR
        run: |
          echo "=== Downloading RPMs using our script ==="
          VERSION="${{ steps.version.outputs.version }}"
          USE_CURL="${{ github.event.inputs.use_curl || 'true' }}"
          
          echo "Running: ./hack/copr_to_gh-pages_upload.sh $VERSION $USE_CURL"
          
          # Make script executable and run it
          chmod +x ./hack/copr_to_gh-pages_upload.sh
          ./hack/copr_to_gh-pages_upload.sh "$VERSION" "$USE_CURL"
          
          echo "Script completed successfully!"
          
          # Verify what we downloaded
          echo "Downloaded content:"
          ls -la copr-rpms-temp/
          
          total_rpms=$(find copr-rpms-temp -name "*.rpm" | wc -l)
          echo "Total RPMs downloaded: $total_rpms"
          
          if [ $total_rpms -eq 0 ]; then
            echo "❌ No RPMs were downloaded!"
            exit 1
          fi

      - name: Create GitHub Pages structure
        run: |
          echo "=== Creating GitHub Pages structure ==="
          
          # Make the script executable
          chmod +x ./hack/create-github-pages.sh
          
          # Run the pages creation script
          ./hack/create-github-pages.sh \
            copr-rpms-temp \
            pages-content \
            "${{ github.repository_owner }}" \
            "${{ github.event.repository.name }}"
          
          echo "GitHub Pages structure created successfully!"
          
          # Prepare for deployment to docs/ directory structure
          echo "=== Preparing for docs/ deployment ==="
          mkdir -p deployment-content/docs
          cp -r pages-content/* deployment-content/docs/
          
          echo "Content prepared for docs/ deployment"
          ls -la deployment-content/docs/

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deployment-content

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create deployment summary
        run: |
          echo "## 🚀 FlightCtl RPM Repository Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Available Platforms:" >> $GITHUB_STEP_SUMMARY
          for chroot_dir in pages-content/*/; do
            if [ -d "$chroot_dir" ] && [ "$(basename "$chroot_dir")" != "repodata" ]; then
              chroot=$(basename "$chroot_dir")
              rpm_count=$(find "$chroot_dir" -name "*.rpm" | wc -l)
              echo "- **$chroot**: $rpm_count RPMs" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Quick Installation:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "sudo dnf config-manager --add-repo ${{ steps.deployment.outputs.page_url }}flightctl.repo" >> $GITHUB_STEP_SUMMARY
          echo "sudo dnf install flightctl" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Manual Download:" >> $GITHUB_STEP_SUMMARY
          echo "Browse packages at: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
