name: "Integration tests"

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release-*'
  pull_request:

permissions:
  contents: read
  pull-requests: read

jobs:
  integration-tests:
    runs-on: "ubuntu-24.04"
    steps:
      - name: Checkout current commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          since_last_remote_commit: 'true'
          files_ignore: |
            .spelling
            README.md
            docs/**
            .github/**
            examples/**
            packaging/rpm/**

      - name: Setup all dependencies
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        uses: ./.github/actions/setup-dependencies

      - name: Build db-migrator image
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          set -euo pipefail
          # Get the current commit SHA for tagging
          COMMIT_SHA="${{ github.sha }}"
          echo "Building db-migrator image tagged with commit: ${COMMIT_SHA}"

          # Build the db-setup container with commit tag
          sudo make flightctl-db-setup-container

          # Tag the image with the commit SHA
          sudo podman tag flightctl-db-setup:latest "flightctl-db-setup:${COMMIT_SHA}"

          echo "MIGRATION_IMAGE=flightctl-db-setup:${COMMIT_SHA}" >> "$GITHUB_ENV"

      - name: Running integration tests
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          make integration-test VERBOSE=true
        env:
          DISABLE_FIPS: true
          FLIGHTCTL_TEST_DB_STRATEGY: template

      - name: Detect baseline for compatibility testing
        if: ${{ steps.changed-files.outputs.any_changed == 'true' && github.event_name == 'pull_request' }}
        id: detect_baseline
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          echo "Detecting baseline commit for compatibility testing..."
          echo ""

          # Ensure tags exist locally (required for rev-list against the release tag)
          git fetch --tags --force >/dev/null 2>&1 || true

          # Try to get latest release
          LATEST_RELEASE_TAG="$(gh release view --json tagName --jq .tagName 2>/dev/null || true)"
          if [ -n "${LATEST_RELEASE_TAG}" ]; then
            echo "Latest release: ${LATEST_RELEASE_TAG}"
            BASELINE_REF="${LATEST_RELEASE_TAG}"
            echo "Using latest release as baseline: ${BASELINE_REF}"
          else
            BASELINE_REF="${{ github.event.pull_request.base.sha }}"
            echo "Failed to detect latest release, falling back to PR base: ${BASELINE_REF}"
          fi
          echo ""
          echo "================================================"
          echo "Selected baseline: ${BASELINE_REF}"
          echo "================================================"
          echo ""
          echo "baseline_ref=${BASELINE_REF}" >> "$GITHUB_OUTPUT"

      - name: Checkout baseline branch
        if: ${{ steps.changed-files.outputs.any_changed == 'true' && github.event_name == 'pull_request' }}
        uses: actions/checkout@v4
        with:
          repository: flightctl/flightctl
          ref: ${{ steps.detect_baseline.outputs.baseline_ref }}
          fetch-depth: 0

      - name: Print checkout info (baseline)
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          set -euo pipefail
          echo "### Baseline checkout"
          echo
          echo "- Repository: $(git config --get remote.origin.url)"
          echo "- Branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "- Commit: $(git rev-parse HEAD)"
          echo "- Subject: $(git log -1 --pretty=%s)"
          echo "- Tags: $(git tag --points-at HEAD | tr '\n' ' ' || true)"
          echo
          echo "### Migration image"
          echo
          echo "- MIGRATION_IMAGE: ${MIGRATION_IMAGE}"

      - name: Running backward compatibility tests in template mode
        if: ${{ steps.changed-files.outputs.any_changed == 'true' }}
        run: |
          make integration-test VERBOSE=true
        env:
          DISABLE_FIPS: true
          FLIGHTCTL_TEST_DB_STRATEGY: template

