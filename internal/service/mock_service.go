// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mock_service.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	time "time"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	store "github.com/flightctl/flightctl/internal/store"
	selector "github.com/flightctl/flightctl/internal/store/selector"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ApproveEnrollmentRequest mocks base method.
func (m *MockService) ApproveEnrollmentRequest(ctx context.Context, name string, approval v1alpha1.EnrollmentRequestApproval) (*v1alpha1.EnrollmentRequestApprovalStatus, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveEnrollmentRequest", ctx, name, approval)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequestApprovalStatus)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ApproveEnrollmentRequest indicates an expected call of ApproveEnrollmentRequest.
func (mr *MockServiceMockRecorder) ApproveEnrollmentRequest(ctx, name, approval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveEnrollmentRequest", reflect.TypeOf((*MockService)(nil).ApproveEnrollmentRequest), ctx, name, approval)
}

// CountDevices mocks base method.
func (m *MockService) CountDevices(ctx context.Context, params v1alpha1.ListDevicesParams, annotationSelector *selector.AnnotationSelector) (int64, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDevices", ctx, params, annotationSelector)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CountDevices indicates an expected call of CountDevices.
func (mr *MockServiceMockRecorder) CountDevices(ctx, params, annotationSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDevices", reflect.TypeOf((*MockService)(nil).CountDevices), ctx, params, annotationSelector)
}

// CountDevicesByLabels mocks base method.
func (m *MockService) CountDevicesByLabels(ctx context.Context, params v1alpha1.ListDevicesParams, annotationSelector *selector.AnnotationSelector, groupBy []string) ([]map[string]any, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDevicesByLabels", ctx, params, annotationSelector, groupBy)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CountDevicesByLabels indicates an expected call of CountDevicesByLabels.
func (mr *MockServiceMockRecorder) CountDevicesByLabels(ctx, params, annotationSelector, groupBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDevicesByLabels", reflect.TypeOf((*MockService)(nil).CountDevicesByLabels), ctx, params, annotationSelector, groupBy)
}

// CreateCertificateSigningRequest mocks base method.
func (m *MockService) CreateCertificateSigningRequest(ctx context.Context, csr v1alpha1.CertificateSigningRequest) (*v1alpha1.CertificateSigningRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateSigningRequest", ctx, csr)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateCertificateSigningRequest indicates an expected call of CreateCertificateSigningRequest.
func (mr *MockServiceMockRecorder) CreateCertificateSigningRequest(ctx, csr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateSigningRequest", reflect.TypeOf((*MockService)(nil).CreateCertificateSigningRequest), ctx, csr)
}

// CreateDevice mocks base method.
func (m *MockService) CreateDevice(ctx context.Context, device v1alpha1.Device) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", ctx, device)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockServiceMockRecorder) CreateDevice(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockService)(nil).CreateDevice), ctx, device)
}

// CreateEnrollmentRequest mocks base method.
func (m *MockService) CreateEnrollmentRequest(ctx context.Context, er v1alpha1.EnrollmentRequest) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnrollmentRequest", ctx, er)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateEnrollmentRequest indicates an expected call of CreateEnrollmentRequest.
func (mr *MockServiceMockRecorder) CreateEnrollmentRequest(ctx, er any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnrollmentRequest", reflect.TypeOf((*MockService)(nil).CreateEnrollmentRequest), ctx, er)
}

// CreateEvent mocks base method.
func (m *MockService) CreateEvent(ctx context.Context, event *v1alpha1.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateEvent", ctx, event)
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockServiceMockRecorder) CreateEvent(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockService)(nil).CreateEvent), ctx, event)
}

// CreateFleet mocks base method.
func (m *MockService) CreateFleet(ctx context.Context, fleet v1alpha1.Fleet) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFleet", ctx, fleet)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateFleet indicates an expected call of CreateFleet.
func (mr *MockServiceMockRecorder) CreateFleet(ctx, fleet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFleet", reflect.TypeOf((*MockService)(nil).CreateFleet), ctx, fleet)
}

// CreateRepository mocks base method.
func (m *MockService) CreateRepository(ctx context.Context, repo v1alpha1.Repository) (*v1alpha1.Repository, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, repo)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockServiceMockRecorder) CreateRepository(ctx, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockService)(nil).CreateRepository), ctx, repo)
}

// CreateResourceSync mocks base method.
func (m *MockService) CreateResourceSync(ctx context.Context, rs v1alpha1.ResourceSync) (*v1alpha1.ResourceSync, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResourceSync", ctx, rs)
	ret0, _ := ret[0].(*v1alpha1.ResourceSync)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateResourceSync indicates an expected call of CreateResourceSync.
func (mr *MockServiceMockRecorder) CreateResourceSync(ctx, rs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResourceSync", reflect.TypeOf((*MockService)(nil).CreateResourceSync), ctx, rs)
}

// CreateTemplateVersion mocks base method.
func (m *MockService) CreateTemplateVersion(ctx context.Context, tv v1alpha1.TemplateVersion, immediateRollout bool) (*v1alpha1.TemplateVersion, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemplateVersion", ctx, tv, immediateRollout)
	ret0, _ := ret[0].(*v1alpha1.TemplateVersion)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// CreateTemplateVersion indicates an expected call of CreateTemplateVersion.
func (mr *MockServiceMockRecorder) CreateTemplateVersion(ctx, tv, immediateRollout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemplateVersion", reflect.TypeOf((*MockService)(nil).CreateTemplateVersion), ctx, tv, immediateRollout)
}

// DecommissionDevice mocks base method.
func (m *MockService) DecommissionDevice(ctx context.Context, name string, decom v1alpha1.DeviceDecommission) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecommissionDevice", ctx, name, decom)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// DecommissionDevice indicates an expected call of DecommissionDevice.
func (mr *MockServiceMockRecorder) DecommissionDevice(ctx, name, decom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecommissionDevice", reflect.TypeOf((*MockService)(nil).DecommissionDevice), ctx, name, decom)
}

// DeleteCertificateSigningRequest mocks base method.
func (m *MockService) DeleteCertificateSigningRequest(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificateSigningRequest", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteCertificateSigningRequest indicates an expected call of DeleteCertificateSigningRequest.
func (mr *MockServiceMockRecorder) DeleteCertificateSigningRequest(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificateSigningRequest", reflect.TypeOf((*MockService)(nil).DeleteCertificateSigningRequest), ctx, name)
}

// DeleteDevice mocks base method.
func (m *MockService) DeleteDevice(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockServiceMockRecorder) DeleteDevice(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockService)(nil).DeleteDevice), ctx, name)
}

// DeleteEnrollmentRequest mocks base method.
func (m *MockService) DeleteEnrollmentRequest(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnrollmentRequest", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteEnrollmentRequest indicates an expected call of DeleteEnrollmentRequest.
func (mr *MockServiceMockRecorder) DeleteEnrollmentRequest(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnrollmentRequest", reflect.TypeOf((*MockService)(nil).DeleteEnrollmentRequest), ctx, name)
}

// DeleteEventsOlderThan mocks base method.
func (m *MockService) DeleteEventsOlderThan(ctx context.Context, cutoffTime time.Time) (int64, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEventsOlderThan", ctx, cutoffTime)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// DeleteEventsOlderThan indicates an expected call of DeleteEventsOlderThan.
func (mr *MockServiceMockRecorder) DeleteEventsOlderThan(ctx, cutoffTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEventsOlderThan", reflect.TypeOf((*MockService)(nil).DeleteEventsOlderThan), ctx, cutoffTime)
}

// DeleteFleet mocks base method.
func (m *MockService) DeleteFleet(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFleet", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteFleet indicates an expected call of DeleteFleet.
func (mr *MockServiceMockRecorder) DeleteFleet(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFleet", reflect.TypeOf((*MockService)(nil).DeleteFleet), ctx, name)
}

// DeleteRepository mocks base method.
func (m *MockService) DeleteRepository(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockServiceMockRecorder) DeleteRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockService)(nil).DeleteRepository), ctx, name)
}

// DeleteResourceSync mocks base method.
func (m *MockService) DeleteResourceSync(ctx context.Context, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResourceSync", ctx, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteResourceSync indicates an expected call of DeleteResourceSync.
func (mr *MockServiceMockRecorder) DeleteResourceSync(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResourceSync", reflect.TypeOf((*MockService)(nil).DeleteResourceSync), ctx, name)
}

// DeleteTemplateVersion mocks base method.
func (m *MockService) DeleteTemplateVersion(ctx context.Context, fleet, name string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTemplateVersion", ctx, fleet, name)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// DeleteTemplateVersion indicates an expected call of DeleteTemplateVersion.
func (mr *MockServiceMockRecorder) DeleteTemplateVersion(ctx, fleet, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTemplateVersion", reflect.TypeOf((*MockService)(nil).DeleteTemplateVersion), ctx, fleet, name)
}

// GetCertificateSigningRequest mocks base method.
func (m *MockService) GetCertificateSigningRequest(ctx context.Context, name string) (*v1alpha1.CertificateSigningRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateSigningRequest", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetCertificateSigningRequest indicates an expected call of GetCertificateSigningRequest.
func (mr *MockServiceMockRecorder) GetCertificateSigningRequest(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateSigningRequest", reflect.TypeOf((*MockService)(nil).GetCertificateSigningRequest), ctx, name)
}

// GetCheckpoint mocks base method.
func (m *MockService) GetCheckpoint(ctx context.Context, consumer, key string) ([]byte, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpoint", ctx, consumer, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetCheckpoint indicates an expected call of GetCheckpoint.
func (mr *MockServiceMockRecorder) GetCheckpoint(ctx, consumer, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpoint", reflect.TypeOf((*MockService)(nil).GetCheckpoint), ctx, consumer, key)
}

// GetDatabaseTime mocks base method.
func (m *MockService) GetDatabaseTime(ctx context.Context) (time.Time, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseTime", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDatabaseTime indicates an expected call of GetDatabaseTime.
func (mr *MockServiceMockRecorder) GetDatabaseTime(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseTime", reflect.TypeOf((*MockService)(nil).GetDatabaseTime), ctx)
}

// GetDevice mocks base method.
func (m *MockService) GetDevice(ctx context.Context, name string) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockServiceMockRecorder) GetDevice(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockService)(nil).GetDevice), ctx, name)
}

// GetDeviceCompletionCounts mocks base method.
func (m *MockService) GetDeviceCompletionCounts(ctx context.Context, owner, templateVersion string, updateTimeout *time.Duration) ([]v1alpha1.DeviceCompletionCount, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceCompletionCounts", ctx, owner, templateVersion, updateTimeout)
	ret0, _ := ret[0].([]v1alpha1.DeviceCompletionCount)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDeviceCompletionCounts indicates an expected call of GetDeviceCompletionCounts.
func (mr *MockServiceMockRecorder) GetDeviceCompletionCounts(ctx, owner, templateVersion, updateTimeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceCompletionCounts", reflect.TypeOf((*MockService)(nil).GetDeviceCompletionCounts), ctx, owner, templateVersion, updateTimeout)
}

// GetDeviceRepositoryRefs mocks base method.
func (m *MockService) GetDeviceRepositoryRefs(ctx context.Context, name string) (*v1alpha1.RepositoryList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceRepositoryRefs", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDeviceRepositoryRefs indicates an expected call of GetDeviceRepositoryRefs.
func (mr *MockServiceMockRecorder) GetDeviceRepositoryRefs(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceRepositoryRefs", reflect.TypeOf((*MockService)(nil).GetDeviceRepositoryRefs), ctx, name)
}

// GetDeviceStatus mocks base method.
func (m *MockService) GetDeviceStatus(ctx context.Context, name string) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceStatus", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDeviceStatus indicates an expected call of GetDeviceStatus.
func (mr *MockServiceMockRecorder) GetDeviceStatus(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceStatus", reflect.TypeOf((*MockService)(nil).GetDeviceStatus), ctx, name)
}

// GetDevicesSummary mocks base method.
func (m *MockService) GetDevicesSummary(ctx context.Context, params v1alpha1.ListDevicesParams, annotationSelector *selector.AnnotationSelector) (*v1alpha1.DevicesSummary, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevicesSummary", ctx, params, annotationSelector)
	ret0, _ := ret[0].(*v1alpha1.DevicesSummary)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetDevicesSummary indicates an expected call of GetDevicesSummary.
func (mr *MockServiceMockRecorder) GetDevicesSummary(ctx, params, annotationSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevicesSummary", reflect.TypeOf((*MockService)(nil).GetDevicesSummary), ctx, params, annotationSelector)
}

// GetEnrollmentConfig mocks base method.
func (m *MockService) GetEnrollmentConfig(ctx context.Context, params v1alpha1.GetEnrollmentConfigParams) (*v1alpha1.EnrollmentConfig, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentConfig", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentConfig)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetEnrollmentConfig indicates an expected call of GetEnrollmentConfig.
func (mr *MockServiceMockRecorder) GetEnrollmentConfig(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentConfig", reflect.TypeOf((*MockService)(nil).GetEnrollmentConfig), ctx, params)
}

// GetEnrollmentRequest mocks base method.
func (m *MockService) GetEnrollmentRequest(ctx context.Context, name string) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentRequest", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetEnrollmentRequest indicates an expected call of GetEnrollmentRequest.
func (mr *MockServiceMockRecorder) GetEnrollmentRequest(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentRequest", reflect.TypeOf((*MockService)(nil).GetEnrollmentRequest), ctx, name)
}

// GetEnrollmentRequestStatus mocks base method.
func (m *MockService) GetEnrollmentRequestStatus(ctx context.Context, name string) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrollmentRequestStatus", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetEnrollmentRequestStatus indicates an expected call of GetEnrollmentRequestStatus.
func (mr *MockServiceMockRecorder) GetEnrollmentRequestStatus(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentRequestStatus", reflect.TypeOf((*MockService)(nil).GetEnrollmentRequestStatus), ctx, name)
}

// GetFleet mocks base method.
func (m *MockService) GetFleet(ctx context.Context, name string, params v1alpha1.GetFleetParams) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleet", ctx, name, params)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetFleet indicates an expected call of GetFleet.
func (mr *MockServiceMockRecorder) GetFleet(ctx, name, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleet", reflect.TypeOf((*MockService)(nil).GetFleet), ctx, name, params)
}

// GetFleetRepositoryRefs mocks base method.
func (m *MockService) GetFleetRepositoryRefs(ctx context.Context, name string) (*v1alpha1.RepositoryList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleetRepositoryRefs", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetFleetRepositoryRefs indicates an expected call of GetFleetRepositoryRefs.
func (mr *MockServiceMockRecorder) GetFleetRepositoryRefs(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetRepositoryRefs", reflect.TypeOf((*MockService)(nil).GetFleetRepositoryRefs), ctx, name)
}

// GetFleetStatus mocks base method.
func (m *MockService) GetFleetStatus(ctx context.Context, name string) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFleetStatus", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetFleetStatus indicates an expected call of GetFleetStatus.
func (mr *MockServiceMockRecorder) GetFleetStatus(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFleetStatus", reflect.TypeOf((*MockService)(nil).GetFleetStatus), ctx, name)
}

// GetLatestTemplateVersion mocks base method.
func (m *MockService) GetLatestTemplateVersion(ctx context.Context, fleet string) (*v1alpha1.TemplateVersion, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestTemplateVersion", ctx, fleet)
	ret0, _ := ret[0].(*v1alpha1.TemplateVersion)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetLatestTemplateVersion indicates an expected call of GetLatestTemplateVersion.
func (mr *MockServiceMockRecorder) GetLatestTemplateVersion(ctx, fleet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestTemplateVersion", reflect.TypeOf((*MockService)(nil).GetLatestTemplateVersion), ctx, fleet)
}

// GetRenderedDevice mocks base method.
func (m *MockService) GetRenderedDevice(ctx context.Context, name string, params v1alpha1.GetRenderedDeviceParams) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRenderedDevice", ctx, name, params)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetRenderedDevice indicates an expected call of GetRenderedDevice.
func (mr *MockServiceMockRecorder) GetRenderedDevice(ctx, name, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderedDevice", reflect.TypeOf((*MockService)(nil).GetRenderedDevice), ctx, name, params)
}

// GetRepository mocks base method.
func (m *MockService) GetRepository(ctx context.Context, name string) (*v1alpha1.Repository, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockServiceMockRecorder) GetRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockService)(nil).GetRepository), ctx, name)
}

// GetRepositoryDeviceReferences mocks base method.
func (m *MockService) GetRepositoryDeviceReferences(ctx context.Context, name string) (*v1alpha1.DeviceList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryDeviceReferences", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.DeviceList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetRepositoryDeviceReferences indicates an expected call of GetRepositoryDeviceReferences.
func (mr *MockServiceMockRecorder) GetRepositoryDeviceReferences(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryDeviceReferences", reflect.TypeOf((*MockService)(nil).GetRepositoryDeviceReferences), ctx, name)
}

// GetRepositoryFleetReferences mocks base method.
func (m *MockService) GetRepositoryFleetReferences(ctx context.Context, name string) (*v1alpha1.FleetList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositoryFleetReferences", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.FleetList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetRepositoryFleetReferences indicates an expected call of GetRepositoryFleetReferences.
func (mr *MockServiceMockRecorder) GetRepositoryFleetReferences(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositoryFleetReferences", reflect.TypeOf((*MockService)(nil).GetRepositoryFleetReferences), ctx, name)
}

// GetResourceSync mocks base method.
func (m *MockService) GetResourceSync(ctx context.Context, name string) (*v1alpha1.ResourceSync, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceSync", ctx, name)
	ret0, _ := ret[0].(*v1alpha1.ResourceSync)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetResourceSync indicates an expected call of GetResourceSync.
func (mr *MockServiceMockRecorder) GetResourceSync(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceSync", reflect.TypeOf((*MockService)(nil).GetResourceSync), ctx, name)
}

// GetTemplateVersion mocks base method.
func (m *MockService) GetTemplateVersion(ctx context.Context, fleet, name string) (*v1alpha1.TemplateVersion, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplateVersion", ctx, fleet, name)
	ret0, _ := ret[0].(*v1alpha1.TemplateVersion)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// GetTemplateVersion indicates an expected call of GetTemplateVersion.
func (mr *MockServiceMockRecorder) GetTemplateVersion(ctx, fleet, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplateVersion", reflect.TypeOf((*MockService)(nil).GetTemplateVersion), ctx, fleet, name)
}

// ListCertificateSigningRequests mocks base method.
func (m *MockService) ListCertificateSigningRequests(ctx context.Context, params v1alpha1.ListCertificateSigningRequestsParams) (*v1alpha1.CertificateSigningRequestList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificateSigningRequests", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequestList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListCertificateSigningRequests indicates an expected call of ListCertificateSigningRequests.
func (mr *MockServiceMockRecorder) ListCertificateSigningRequests(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificateSigningRequests", reflect.TypeOf((*MockService)(nil).ListCertificateSigningRequests), ctx, params)
}

// ListDevices mocks base method.
func (m *MockService) ListDevices(ctx context.Context, params v1alpha1.ListDevicesParams, annotationSelector *selector.AnnotationSelector) (*v1alpha1.DeviceList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevices", ctx, params, annotationSelector)
	ret0, _ := ret[0].(*v1alpha1.DeviceList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListDevices indicates an expected call of ListDevices.
func (mr *MockServiceMockRecorder) ListDevices(ctx, params, annotationSelector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevices", reflect.TypeOf((*MockService)(nil).ListDevices), ctx, params, annotationSelector)
}

// ListDevicesByServiceCondition mocks base method.
func (m *MockService) ListDevicesByServiceCondition(ctx context.Context, conditionType, conditionStatus string, listParams store.ListParams) (*v1alpha1.DeviceList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDevicesByServiceCondition", ctx, conditionType, conditionStatus, listParams)
	ret0, _ := ret[0].(*v1alpha1.DeviceList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListDevicesByServiceCondition indicates an expected call of ListDevicesByServiceCondition.
func (mr *MockServiceMockRecorder) ListDevicesByServiceCondition(ctx, conditionType, conditionStatus, listParams any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDevicesByServiceCondition", reflect.TypeOf((*MockService)(nil).ListDevicesByServiceCondition), ctx, conditionType, conditionStatus, listParams)
}

// ListDisruptionBudgetFleets mocks base method.
func (m *MockService) ListDisruptionBudgetFleets(ctx context.Context) (*v1alpha1.FleetList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisruptionBudgetFleets", ctx)
	ret0, _ := ret[0].(*v1alpha1.FleetList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListDisruptionBudgetFleets indicates an expected call of ListDisruptionBudgetFleets.
func (mr *MockServiceMockRecorder) ListDisruptionBudgetFleets(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisruptionBudgetFleets", reflect.TypeOf((*MockService)(nil).ListDisruptionBudgetFleets), ctx)
}

// ListEnrollmentRequests mocks base method.
func (m *MockService) ListEnrollmentRequests(ctx context.Context, params v1alpha1.ListEnrollmentRequestsParams) (*v1alpha1.EnrollmentRequestList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnrollmentRequests", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequestList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListEnrollmentRequests indicates an expected call of ListEnrollmentRequests.
func (mr *MockServiceMockRecorder) ListEnrollmentRequests(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnrollmentRequests", reflect.TypeOf((*MockService)(nil).ListEnrollmentRequests), ctx, params)
}

// ListEvents mocks base method.
func (m *MockService) ListEvents(ctx context.Context, params v1alpha1.ListEventsParams) (*v1alpha1.EventList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.EventList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockServiceMockRecorder) ListEvents(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockService)(nil).ListEvents), ctx, params)
}

// ListFleetRolloutDeviceSelection mocks base method.
func (m *MockService) ListFleetRolloutDeviceSelection(ctx context.Context) (*v1alpha1.FleetList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleetRolloutDeviceSelection", ctx)
	ret0, _ := ret[0].(*v1alpha1.FleetList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListFleetRolloutDeviceSelection indicates an expected call of ListFleetRolloutDeviceSelection.
func (mr *MockServiceMockRecorder) ListFleetRolloutDeviceSelection(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleetRolloutDeviceSelection", reflect.TypeOf((*MockService)(nil).ListFleetRolloutDeviceSelection), ctx)
}

// ListFleets mocks base method.
func (m *MockService) ListFleets(ctx context.Context, params v1alpha1.ListFleetsParams) (*v1alpha1.FleetList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFleets", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.FleetList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListFleets indicates an expected call of ListFleets.
func (mr *MockServiceMockRecorder) ListFleets(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFleets", reflect.TypeOf((*MockService)(nil).ListFleets), ctx, params)
}

// ListLabels mocks base method.
func (m *MockService) ListLabels(ctx context.Context, params v1alpha1.ListLabelsParams) (*v1alpha1.LabelList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLabels", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.LabelList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListLabels indicates an expected call of ListLabels.
func (mr *MockServiceMockRecorder) ListLabels(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLabels", reflect.TypeOf((*MockService)(nil).ListLabels), ctx, params)
}

// ListOrganizations mocks base method.
func (m *MockService) ListOrganizations(ctx context.Context) (*v1alpha1.OrganizationList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrganizations", ctx)
	ret0, _ := ret[0].(*v1alpha1.OrganizationList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListOrganizations indicates an expected call of ListOrganizations.
func (mr *MockServiceMockRecorder) ListOrganizations(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrganizations", reflect.TypeOf((*MockService)(nil).ListOrganizations), ctx)
}

// ListRepositories mocks base method.
func (m *MockService) ListRepositories(ctx context.Context, params v1alpha1.ListRepositoriesParams) (*v1alpha1.RepositoryList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.RepositoryList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockServiceMockRecorder) ListRepositories(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockService)(nil).ListRepositories), ctx, params)
}

// ListResourceSyncs mocks base method.
func (m *MockService) ListResourceSyncs(ctx context.Context, params v1alpha1.ListResourceSyncsParams) (*v1alpha1.ResourceSyncList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceSyncs", ctx, params)
	ret0, _ := ret[0].(*v1alpha1.ResourceSyncList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListResourceSyncs indicates an expected call of ListResourceSyncs.
func (mr *MockServiceMockRecorder) ListResourceSyncs(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceSyncs", reflect.TypeOf((*MockService)(nil).ListResourceSyncs), ctx, params)
}

// ListTemplateVersions mocks base method.
func (m *MockService) ListTemplateVersions(ctx context.Context, fleet string, params v1alpha1.ListTemplateVersionsParams) (*v1alpha1.TemplateVersionList, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTemplateVersions", ctx, fleet, params)
	ret0, _ := ret[0].(*v1alpha1.TemplateVersionList)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ListTemplateVersions indicates an expected call of ListTemplateVersions.
func (mr *MockServiceMockRecorder) ListTemplateVersions(ctx, fleet, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTemplateVersions", reflect.TypeOf((*MockService)(nil).ListTemplateVersions), ctx, fleet, params)
}

// MarkDevicesRolloutSelection mocks base method.
func (m *MockService) MarkDevicesRolloutSelection(ctx context.Context, params v1alpha1.ListDevicesParams, annotationSelector *selector.AnnotationSelector, limit *int) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDevicesRolloutSelection", ctx, params, annotationSelector, limit)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// MarkDevicesRolloutSelection indicates an expected call of MarkDevicesRolloutSelection.
func (mr *MockServiceMockRecorder) MarkDevicesRolloutSelection(ctx, params, annotationSelector, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDevicesRolloutSelection", reflect.TypeOf((*MockService)(nil).MarkDevicesRolloutSelection), ctx, params, annotationSelector, limit)
}

// OverwriteDeviceRepositoryRefs mocks base method.
func (m *MockService) OverwriteDeviceRepositoryRefs(ctx context.Context, name string, repositoryNames ...string) v1alpha1.Status {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range repositoryNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverwriteDeviceRepositoryRefs", varargs...)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// OverwriteDeviceRepositoryRefs indicates an expected call of OverwriteDeviceRepositoryRefs.
func (mr *MockServiceMockRecorder) OverwriteDeviceRepositoryRefs(ctx, name any, repositoryNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, repositoryNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverwriteDeviceRepositoryRefs", reflect.TypeOf((*MockService)(nil).OverwriteDeviceRepositoryRefs), varargs...)
}

// OverwriteFleetRepositoryRefs mocks base method.
func (m *MockService) OverwriteFleetRepositoryRefs(ctx context.Context, name string, repositoryNames ...string) v1alpha1.Status {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name}
	for _, a := range repositoryNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OverwriteFleetRepositoryRefs", varargs...)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// OverwriteFleetRepositoryRefs indicates an expected call of OverwriteFleetRepositoryRefs.
func (mr *MockServiceMockRecorder) OverwriteFleetRepositoryRefs(ctx, name any, repositoryNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name}, repositoryNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverwriteFleetRepositoryRefs", reflect.TypeOf((*MockService)(nil).OverwriteFleetRepositoryRefs), varargs...)
}

// PatchCertificateSigningRequest mocks base method.
func (m *MockService) PatchCertificateSigningRequest(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.CertificateSigningRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchCertificateSigningRequest", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchCertificateSigningRequest indicates an expected call of PatchCertificateSigningRequest.
func (mr *MockServiceMockRecorder) PatchCertificateSigningRequest(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchCertificateSigningRequest", reflect.TypeOf((*MockService)(nil).PatchCertificateSigningRequest), ctx, name, patch)
}

// PatchDevice mocks base method.
func (m *MockService) PatchDevice(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDevice", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchDevice indicates an expected call of PatchDevice.
func (mr *MockServiceMockRecorder) PatchDevice(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDevice", reflect.TypeOf((*MockService)(nil).PatchDevice), ctx, name, patch)
}

// PatchDeviceStatus mocks base method.
func (m *MockService) PatchDeviceStatus(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchDeviceStatus", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchDeviceStatus indicates an expected call of PatchDeviceStatus.
func (mr *MockServiceMockRecorder) PatchDeviceStatus(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchDeviceStatus", reflect.TypeOf((*MockService)(nil).PatchDeviceStatus), ctx, name, patch)
}

// PatchEnrollmentRequest mocks base method.
func (m *MockService) PatchEnrollmentRequest(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchEnrollmentRequest", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchEnrollmentRequest indicates an expected call of PatchEnrollmentRequest.
func (mr *MockServiceMockRecorder) PatchEnrollmentRequest(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchEnrollmentRequest", reflect.TypeOf((*MockService)(nil).PatchEnrollmentRequest), ctx, name, patch)
}

// PatchFleet mocks base method.
func (m *MockService) PatchFleet(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchFleet", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchFleet indicates an expected call of PatchFleet.
func (mr *MockServiceMockRecorder) PatchFleet(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchFleet", reflect.TypeOf((*MockService)(nil).PatchFleet), ctx, name, patch)
}

// PatchRepository mocks base method.
func (m *MockService) PatchRepository(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.Repository, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchRepository", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchRepository indicates an expected call of PatchRepository.
func (mr *MockServiceMockRecorder) PatchRepository(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchRepository", reflect.TypeOf((*MockService)(nil).PatchRepository), ctx, name, patch)
}

// PatchResourceSync mocks base method.
func (m *MockService) PatchResourceSync(ctx context.Context, name string, patch v1alpha1.PatchRequest) (*v1alpha1.ResourceSync, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResourceSync", ctx, name, patch)
	ret0, _ := ret[0].(*v1alpha1.ResourceSync)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// PatchResourceSync indicates an expected call of PatchResourceSync.
func (mr *MockServiceMockRecorder) PatchResourceSync(ctx, name, patch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResourceSync", reflect.TypeOf((*MockService)(nil).PatchResourceSync), ctx, name, patch)
}

// ReplaceCertificateSigningRequest mocks base method.
func (m *MockService) ReplaceCertificateSigningRequest(ctx context.Context, name string, csr v1alpha1.CertificateSigningRequest) (*v1alpha1.CertificateSigningRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceCertificateSigningRequest", ctx, name, csr)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceCertificateSigningRequest indicates an expected call of ReplaceCertificateSigningRequest.
func (mr *MockServiceMockRecorder) ReplaceCertificateSigningRequest(ctx, name, csr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceCertificateSigningRequest", reflect.TypeOf((*MockService)(nil).ReplaceCertificateSigningRequest), ctx, name, csr)
}

// ReplaceDevice mocks base method.
func (m *MockService) ReplaceDevice(ctx context.Context, name string, device v1alpha1.Device, fieldsToUnset []string) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceDevice", ctx, name, device, fieldsToUnset)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceDevice indicates an expected call of ReplaceDevice.
func (mr *MockServiceMockRecorder) ReplaceDevice(ctx, name, device, fieldsToUnset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDevice", reflect.TypeOf((*MockService)(nil).ReplaceDevice), ctx, name, device, fieldsToUnset)
}

// ReplaceDeviceStatus mocks base method.
func (m *MockService) ReplaceDeviceStatus(ctx context.Context, name string, device v1alpha1.Device) (*v1alpha1.Device, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceDeviceStatus", ctx, name, device)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceDeviceStatus indicates an expected call of ReplaceDeviceStatus.
func (mr *MockServiceMockRecorder) ReplaceDeviceStatus(ctx, name, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceDeviceStatus", reflect.TypeOf((*MockService)(nil).ReplaceDeviceStatus), ctx, name, device)
}

// ReplaceEnrollmentRequest mocks base method.
func (m *MockService) ReplaceEnrollmentRequest(ctx context.Context, name string, er v1alpha1.EnrollmentRequest) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceEnrollmentRequest", ctx, name, er)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceEnrollmentRequest indicates an expected call of ReplaceEnrollmentRequest.
func (mr *MockServiceMockRecorder) ReplaceEnrollmentRequest(ctx, name, er any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceEnrollmentRequest", reflect.TypeOf((*MockService)(nil).ReplaceEnrollmentRequest), ctx, name, er)
}

// ReplaceEnrollmentRequestStatus mocks base method.
func (m *MockService) ReplaceEnrollmentRequestStatus(ctx context.Context, name string, er v1alpha1.EnrollmentRequest) (*v1alpha1.EnrollmentRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceEnrollmentRequestStatus", ctx, name, er)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceEnrollmentRequestStatus indicates an expected call of ReplaceEnrollmentRequestStatus.
func (mr *MockServiceMockRecorder) ReplaceEnrollmentRequestStatus(ctx, name, er any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceEnrollmentRequestStatus", reflect.TypeOf((*MockService)(nil).ReplaceEnrollmentRequestStatus), ctx, name, er)
}

// ReplaceFleet mocks base method.
func (m *MockService) ReplaceFleet(ctx context.Context, name string, fleet v1alpha1.Fleet) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceFleet", ctx, name, fleet)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceFleet indicates an expected call of ReplaceFleet.
func (mr *MockServiceMockRecorder) ReplaceFleet(ctx, name, fleet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceFleet", reflect.TypeOf((*MockService)(nil).ReplaceFleet), ctx, name, fleet)
}

// ReplaceFleetStatus mocks base method.
func (m *MockService) ReplaceFleetStatus(ctx context.Context, name string, fleet v1alpha1.Fleet) (*v1alpha1.Fleet, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceFleetStatus", ctx, name, fleet)
	ret0, _ := ret[0].(*v1alpha1.Fleet)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceFleetStatus indicates an expected call of ReplaceFleetStatus.
func (mr *MockServiceMockRecorder) ReplaceFleetStatus(ctx, name, fleet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceFleetStatus", reflect.TypeOf((*MockService)(nil).ReplaceFleetStatus), ctx, name, fleet)
}

// ReplaceRepository mocks base method.
func (m *MockService) ReplaceRepository(ctx context.Context, name string, repo v1alpha1.Repository) (*v1alpha1.Repository, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceRepository", ctx, name, repo)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceRepository indicates an expected call of ReplaceRepository.
func (mr *MockServiceMockRecorder) ReplaceRepository(ctx, name, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceRepository", reflect.TypeOf((*MockService)(nil).ReplaceRepository), ctx, name, repo)
}

// ReplaceRepositoryStatusByError mocks base method.
func (m *MockService) ReplaceRepositoryStatusByError(ctx context.Context, name string, repository v1alpha1.Repository, err error) (*v1alpha1.Repository, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceRepositoryStatusByError", ctx, name, repository, err)
	ret0, _ := ret[0].(*v1alpha1.Repository)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceRepositoryStatusByError indicates an expected call of ReplaceRepositoryStatusByError.
func (mr *MockServiceMockRecorder) ReplaceRepositoryStatusByError(ctx, name, repository, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceRepositoryStatusByError", reflect.TypeOf((*MockService)(nil).ReplaceRepositoryStatusByError), ctx, name, repository, err)
}

// ReplaceResourceSync mocks base method.
func (m *MockService) ReplaceResourceSync(ctx context.Context, name string, rs v1alpha1.ResourceSync) (*v1alpha1.ResourceSync, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceResourceSync", ctx, name, rs)
	ret0, _ := ret[0].(*v1alpha1.ResourceSync)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceResourceSync indicates an expected call of ReplaceResourceSync.
func (mr *MockServiceMockRecorder) ReplaceResourceSync(ctx, name, rs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceResourceSync", reflect.TypeOf((*MockService)(nil).ReplaceResourceSync), ctx, name, rs)
}

// ReplaceResourceSyncStatus mocks base method.
func (m *MockService) ReplaceResourceSyncStatus(ctx context.Context, name string, resourceSync v1alpha1.ResourceSync) (*v1alpha1.ResourceSync, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceResourceSyncStatus", ctx, name, resourceSync)
	ret0, _ := ret[0].(*v1alpha1.ResourceSync)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ReplaceResourceSyncStatus indicates an expected call of ReplaceResourceSyncStatus.
func (mr *MockServiceMockRecorder) ReplaceResourceSyncStatus(ctx, name, resourceSync any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceResourceSyncStatus", reflect.TypeOf((*MockService)(nil).ReplaceResourceSyncStatus), ctx, name, resourceSync)
}

// ResumeDevices mocks base method.
func (m *MockService) ResumeDevices(ctx context.Context, request v1alpha1.DeviceResumeRequest) (v1alpha1.DeviceResumeResponse, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResumeDevices", ctx, request)
	ret0, _ := ret[0].(v1alpha1.DeviceResumeResponse)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// ResumeDevices indicates an expected call of ResumeDevices.
func (mr *MockServiceMockRecorder) ResumeDevices(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeDevices", reflect.TypeOf((*MockService)(nil).ResumeDevices), ctx, request)
}

// SetCheckpoint mocks base method.
func (m *MockService) SetCheckpoint(ctx context.Context, consumer, key string, value []byte) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckpoint", ctx, consumer, key, value)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// SetCheckpoint indicates an expected call of SetCheckpoint.
func (mr *MockServiceMockRecorder) SetCheckpoint(ctx, consumer, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckpoint", reflect.TypeOf((*MockService)(nil).SetCheckpoint), ctx, consumer, key, value)
}

// SetDeviceServiceConditions mocks base method.
func (m *MockService) SetDeviceServiceConditions(ctx context.Context, name string, conditions []v1alpha1.Condition) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeviceServiceConditions", ctx, name, conditions)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// SetDeviceServiceConditions indicates an expected call of SetDeviceServiceConditions.
func (mr *MockServiceMockRecorder) SetDeviceServiceConditions(ctx, name, conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceServiceConditions", reflect.TypeOf((*MockService)(nil).SetDeviceServiceConditions), ctx, name, conditions)
}

// UnmarkDevicesRolloutSelection mocks base method.
func (m *MockService) UnmarkDevicesRolloutSelection(ctx context.Context, fleetName string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarkDevicesRolloutSelection", ctx, fleetName)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// UnmarkDevicesRolloutSelection indicates an expected call of UnmarkDevicesRolloutSelection.
func (mr *MockServiceMockRecorder) UnmarkDevicesRolloutSelection(ctx, fleetName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarkDevicesRolloutSelection", reflect.TypeOf((*MockService)(nil).UnmarkDevicesRolloutSelection), ctx, fleetName)
}

// UpdateCertificateSigningRequestApproval mocks base method.
func (m *MockService) UpdateCertificateSigningRequestApproval(ctx context.Context, name string, csr v1alpha1.CertificateSigningRequest) (*v1alpha1.CertificateSigningRequest, v1alpha1.Status) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificateSigningRequestApproval", ctx, name, csr)
	ret0, _ := ret[0].(*v1alpha1.CertificateSigningRequest)
	ret1, _ := ret[1].(v1alpha1.Status)
	return ret0, ret1
}

// UpdateCertificateSigningRequestApproval indicates an expected call of UpdateCertificateSigningRequestApproval.
func (mr *MockServiceMockRecorder) UpdateCertificateSigningRequestApproval(ctx, name, csr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificateSigningRequestApproval", reflect.TypeOf((*MockService)(nil).UpdateCertificateSigningRequestApproval), ctx, name, csr)
}

// UpdateDevice mocks base method.
func (m *MockService) UpdateDevice(ctx context.Context, name string, device v1alpha1.Device, fieldsToUnset []string) (*v1alpha1.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", ctx, name, device, fieldsToUnset)
	ret0, _ := ret[0].(*v1alpha1.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockServiceMockRecorder) UpdateDevice(ctx, name, device, fieldsToUnset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockService)(nil).UpdateDevice), ctx, name, device, fieldsToUnset)
}

// UpdateDeviceAnnotations mocks base method.
func (m *MockService) UpdateDeviceAnnotations(ctx context.Context, name string, annotations map[string]string, deleteKeys []string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceAnnotations", ctx, name, annotations, deleteKeys)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// UpdateDeviceAnnotations indicates an expected call of UpdateDeviceAnnotations.
func (mr *MockServiceMockRecorder) UpdateDeviceAnnotations(ctx, name, annotations, deleteKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceAnnotations", reflect.TypeOf((*MockService)(nil).UpdateDeviceAnnotations), ctx, name, annotations, deleteKeys)
}

// UpdateFleetAnnotations mocks base method.
func (m *MockService) UpdateFleetAnnotations(ctx context.Context, name string, annotations map[string]string, deleteKeys []string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleetAnnotations", ctx, name, annotations, deleteKeys)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// UpdateFleetAnnotations indicates an expected call of UpdateFleetAnnotations.
func (mr *MockServiceMockRecorder) UpdateFleetAnnotations(ctx, name, annotations, deleteKeys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetAnnotations", reflect.TypeOf((*MockService)(nil).UpdateFleetAnnotations), ctx, name, annotations, deleteKeys)
}

// UpdateFleetConditions mocks base method.
func (m *MockService) UpdateFleetConditions(ctx context.Context, name string, conditions []v1alpha1.Condition) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFleetConditions", ctx, name, conditions)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// UpdateFleetConditions indicates an expected call of UpdateFleetConditions.
func (mr *MockServiceMockRecorder) UpdateFleetConditions(ctx, name, conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFleetConditions", reflect.TypeOf((*MockService)(nil).UpdateFleetConditions), ctx, name, conditions)
}

// UpdateRenderedDevice mocks base method.
func (m *MockService) UpdateRenderedDevice(ctx context.Context, name, renderedConfig, renderedApplications string) v1alpha1.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRenderedDevice", ctx, name, renderedConfig, renderedApplications)
	ret0, _ := ret[0].(v1alpha1.Status)
	return ret0
}

// UpdateRenderedDevice indicates an expected call of UpdateRenderedDevice.
func (mr *MockServiceMockRecorder) UpdateRenderedDevice(ctx, name, renderedConfig, renderedApplications any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRenderedDevice", reflect.TypeOf((*MockService)(nil).UpdateRenderedDevice), ctx, name, renderedConfig, renderedApplications)
}

// UpdateServiceSideDeviceStatus mocks base method.
func (m *MockService) UpdateServiceSideDeviceStatus(ctx context.Context, device v1alpha1.Device) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServiceSideDeviceStatus", ctx, device)
	ret0, _ := ret[0].(bool)
	return ret0
}

// UpdateServiceSideDeviceStatus indicates an expected call of UpdateServiceSideDeviceStatus.
func (mr *MockServiceMockRecorder) UpdateServiceSideDeviceStatus(ctx, device any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServiceSideDeviceStatus", reflect.TypeOf((*MockService)(nil).UpdateServiceSideDeviceStatus), ctx, device)
}
