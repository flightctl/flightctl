// Code generated by MockGen. DO NOT EDIT.
// Source: dependency.go
//
// Generated by this command:
//
//	mockgen -source=dependency.go -destination=mock_dependency.go -package=dependency
//

// Package dependency is a generated GoMock package.
package dependency

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockPrefetchManager is a mock of PrefetchManager interface.
type MockPrefetchManager struct {
	ctrl     *gomock.Controller
	recorder *MockPrefetchManagerMockRecorder
}

// MockPrefetchManagerMockRecorder is the mock recorder for MockPrefetchManager.
type MockPrefetchManagerMockRecorder struct {
	mock *MockPrefetchManager
}

// NewMockPrefetchManager creates a new mock instance.
func NewMockPrefetchManager(ctrl *gomock.Controller) *MockPrefetchManager {
	mock := &MockPrefetchManager{ctrl: ctrl}
	mock.recorder = &MockPrefetchManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrefetchManager) EXPECT() *MockPrefetchManagerMockRecorder {
	return m.recorder
}

// BeforeUpdate mocks base method.
func (m *MockPrefetchManager) BeforeUpdate(ctx context.Context, current, desired *v1alpha1.DeviceSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeforeUpdate", ctx, current, desired)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeUpdate indicates an expected call of BeforeUpdate.
func (mr *MockPrefetchManagerMockRecorder) BeforeUpdate(ctx, current, desired any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeUpdate", reflect.TypeOf((*MockPrefetchManager)(nil).BeforeUpdate), ctx, current, desired)
}

// Cleanup mocks base method.
func (m *MockPrefetchManager) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockPrefetchManagerMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockPrefetchManager)(nil).Cleanup))
}

// RegisterOCICollector mocks base method.
func (m *MockPrefetchManager) RegisterOCICollector(collector OCICollector) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOCICollector", collector)
}

// RegisterOCICollector indicates an expected call of RegisterOCICollector.
func (mr *MockPrefetchManagerMockRecorder) RegisterOCICollector(collector any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOCICollector", reflect.TypeOf((*MockPrefetchManager)(nil).RegisterOCICollector), collector)
}

// StatusMessage mocks base method.
func (m *MockPrefetchManager) StatusMessage(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusMessage", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// StatusMessage indicates an expected call of StatusMessage.
func (mr *MockPrefetchManagerMockRecorder) StatusMessage(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusMessage", reflect.TypeOf((*MockPrefetchManager)(nil).StatusMessage), ctx)
}

// MockOCICollector is a mock of OCICollector interface.
type MockOCICollector struct {
	ctrl     *gomock.Controller
	recorder *MockOCICollectorMockRecorder
}

// MockOCICollectorMockRecorder is the mock recorder for MockOCICollector.
type MockOCICollectorMockRecorder struct {
	mock *MockOCICollector
}

// NewMockOCICollector creates a new mock instance.
func NewMockOCICollector(ctrl *gomock.Controller) *MockOCICollector {
	mock := &MockOCICollector{ctrl: ctrl}
	mock.recorder = &MockOCICollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCICollector) EXPECT() *MockOCICollectorMockRecorder {
	return m.recorder
}

// CollectOCITargets mocks base method.
func (m *MockOCICollector) CollectOCITargets(ctx context.Context, current, desired *v1alpha1.DeviceSpec) ([]OCIPullTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectOCITargets", ctx, current, desired)
	ret0, _ := ret[0].([]OCIPullTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CollectOCITargets indicates an expected call of CollectOCITargets.
func (mr *MockOCICollectorMockRecorder) CollectOCITargets(ctx, current, desired any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectOCITargets", reflect.TypeOf((*MockOCICollector)(nil).CollectOCITargets), ctx, current, desired)
}
