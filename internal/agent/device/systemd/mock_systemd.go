// Code generated by MockGen. DO NOT EDIT.
// Source: systemd.go
//
// Generated by this command:
//
//	mockgen -source=systemd.go -destination=mock_systemd.go -package=systemd
//

// Package systemd is a generated GoMock package.
package systemd

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	status "github.com/flightctl/flightctl/internal/agent/device/status"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// EnsurePatterns mocks base method.
func (m *MockManager) EnsurePatterns(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePatterns", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePatterns indicates an expected call of EnsurePatterns.
func (mr *MockManagerMockRecorder) EnsurePatterns(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePatterns", reflect.TypeOf((*MockManager)(nil).EnsurePatterns), arg0)
}

// Status mocks base method.
func (m *MockManager) Status(arg0 context.Context, arg1 *v1alpha1.DeviceStatus, arg2 ...status.CollectorOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockManagerMockRecorder) Status(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockManager)(nil).Status), varargs...)
}
