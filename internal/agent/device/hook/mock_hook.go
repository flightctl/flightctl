// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/hook/hook.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/hook/hook.go -destination=internal/agent/device/hook/mock_hook.go -package=hook
//

// Package hook is a generated GoMock package.
package hook

import (
	context "context"
	reflect "reflect"

	types "github.com/coreos/ignition/v2/config/v3_4/types"
	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockManager) Config() *ConfigHook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*ConfigHook)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockManagerMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockManager)(nil).Config))
}

// Run mocks base method.
func (m *MockManager) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockManagerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockManager)(nil).Run), ctx)
}

// MockHook is a mock of Hook interface.
type MockHook struct {
	ctrl     *gomock.Controller
	recorder *MockHookMockRecorder
}

// MockHookMockRecorder is the mock recorder for MockHook.
type MockHookMockRecorder struct {
	mock *MockHook
}

// NewMockHook creates a new mock instance.
func NewMockHook(ctrl *gomock.Controller) *MockHook {
	mock := &MockHook{ctrl: ctrl}
	mock.recorder = &MockHookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHook) EXPECT() *MockHookMockRecorder {
	return m.recorder
}

// Post mocks base method.
func (m *MockHook) Post() Monitor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post")
	ret0, _ := ret[0].(Monitor)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockHookMockRecorder) Post() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHook)(nil).Post))
}

// Pre mocks base method.
func (m *MockHook) Pre() Monitor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pre")
	ret0, _ := ret[0].(Monitor)
	return ret0
}

// Pre indicates an expected call of Pre.
func (mr *MockHookMockRecorder) Pre() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pre", reflect.TypeOf((*MockHook)(nil).Pre))
}

// MockMonitor is a mock of Monitor interface.
type MockMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder struct {
	mock *MockMonitor
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor(ctrl *gomock.Controller) *MockMonitor {
	mock := &MockMonitor{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor) EXPECT() *MockMonitorMockRecorder {
	return m.recorder
}

// AddWatch mocks base method.
func (m *MockMonitor) AddWatch(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatch", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWatch indicates an expected call of AddWatch.
func (mr *MockMonitorMockRecorder) AddWatch(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatch", reflect.TypeOf((*MockMonitor)(nil).AddWatch), name)
}

// Close mocks base method.
func (m *MockMonitor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockMonitorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockMonitor)(nil).Close))
}

// Errors mocks base method.
func (m *MockMonitor) Errors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockMonitorMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockMonitor)(nil).Errors))
}

// ListWatches mocks base method.
func (m *MockMonitor) ListWatches() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatches")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListWatches indicates an expected call of ListWatches.
func (mr *MockMonitorMockRecorder) ListWatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatches", reflect.TypeOf((*MockMonitor)(nil).ListWatches))
}

// RemoveWatch mocks base method.
func (m *MockMonitor) RemoveWatch(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatch", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWatch indicates an expected call of RemoveWatch.
func (mr *MockMonitorMockRecorder) RemoveWatch(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatch", reflect.TypeOf((*MockMonitor)(nil).RemoveWatch), name)
}

// Reset mocks base method.
func (m *MockMonitor) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockMonitorMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockMonitor)(nil).Reset))
}

// Run mocks base method.
func (m *MockMonitor) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockMonitorMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMonitor)(nil).Run), ctx)
}

// Update mocks base method.
func (m *MockMonitor) Update(hook *v1alpha1.DeviceHookSpec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", hook)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMonitorMockRecorder) Update(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMonitor)(nil).Update), hook)
}

// MockObserveMonitor is a mock of ObserveMonitor interface.
type MockObserveMonitor struct {
	ctrl     *gomock.Controller
	recorder *MockObserveMonitorMockRecorder
}

// MockObserveMonitorMockRecorder is the mock recorder for MockObserveMonitor.
type MockObserveMonitorMockRecorder struct {
	mock *MockObserveMonitor
}

// NewMockObserveMonitor creates a new mock instance.
func NewMockObserveMonitor(ctrl *gomock.Controller) *MockObserveMonitor {
	mock := &MockObserveMonitor{ctrl: ctrl}
	mock.recorder = &MockObserveMonitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObserveMonitor) EXPECT() *MockObserveMonitorMockRecorder {
	return m.recorder
}

// AddWatch mocks base method.
func (m *MockObserveMonitor) AddWatch(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWatch", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWatch indicates an expected call of AddWatch.
func (mr *MockObserveMonitorMockRecorder) AddWatch(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWatch", reflect.TypeOf((*MockObserveMonitor)(nil).AddWatch), name)
}

// Close mocks base method.
func (m *MockObserveMonitor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockObserveMonitorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockObserveMonitor)(nil).Close))
}

// ComputeRemoval mocks base method.
func (m *MockObserveMonitor) ComputeRemoval(files []types.File) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeRemoval", files)
	ret0, _ := ret[0].([]string)
	return ret0
}

// ComputeRemoval indicates an expected call of ComputeRemoval.
func (mr *MockObserveMonitorMockRecorder) ComputeRemoval(files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeRemoval", reflect.TypeOf((*MockObserveMonitor)(nil).ComputeRemoval), files)
}

// CreateOrUpdate mocks base method.
func (m *MockObserveMonitor) CreateOrUpdate(path string, contents []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", path, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockObserveMonitorMockRecorder) CreateOrUpdate(path, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockObserveMonitor)(nil).CreateOrUpdate), path, contents)
}

// Errors mocks base method.
func (m *MockObserveMonitor) Errors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockObserveMonitorMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockObserveMonitor)(nil).Errors))
}

// ListWatches mocks base method.
func (m *MockObserveMonitor) ListWatches() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWatches")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListWatches indicates an expected call of ListWatches.
func (mr *MockObserveMonitorMockRecorder) ListWatches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWatches", reflect.TypeOf((*MockObserveMonitor)(nil).ListWatches))
}

// Remove mocks base method.
func (m *MockObserveMonitor) Remove(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockObserveMonitorMockRecorder) Remove(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockObserveMonitor)(nil).Remove), path)
}

// RemoveWatch mocks base method.
func (m *MockObserveMonitor) RemoveWatch(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWatch", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWatch indicates an expected call of RemoveWatch.
func (mr *MockObserveMonitorMockRecorder) RemoveWatch(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWatch", reflect.TypeOf((*MockObserveMonitor)(nil).RemoveWatch), name)
}

// Reset mocks base method.
func (m *MockObserveMonitor) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockObserveMonitorMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockObserveMonitor)(nil).Reset))
}

// Run mocks base method.
func (m *MockObserveMonitor) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockObserveMonitorMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockObserveMonitor)(nil).Run), ctx)
}

// Update mocks base method.
func (m *MockObserveMonitor) Update(hook *v1alpha1.DeviceHookSpec) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", hook)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockObserveMonitorMockRecorder) Update(hook any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockObserveMonitor)(nil).Update), hook)
}
