// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/config/controller.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/config/controller.go -destination=internal/agent/device/config/mock_controller.go -package=config
//

// Package config is a generated GoMock package.
package config

import (
	context "context"
	reflect "reflect"

	types "github.com/coreos/ignition/v2/config/v3_4/types"
	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockController) Initialize(ctx context.Context, current *v1alpha1.RenderedDeviceSpec) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize", ctx, current)
}

// Initialize indicates an expected call of Initialize.
func (mr *MockControllerMockRecorder) Initialize(ctx, current any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockController)(nil).Initialize), ctx, current)
}

// Sync mocks base method.
func (m *MockController) Sync(ctx context.Context, current, desired *v1alpha1.RenderedDeviceSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, current, desired)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockControllerMockRecorder) Sync(ctx, current, desired any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockController)(nil).Sync), ctx, current, desired)
}

// WriteIgnitionFiles mocks base method.
func (m *MockController) WriteIgnitionFiles(ctx context.Context, files []types.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteIgnitionFiles", ctx, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteIgnitionFiles indicates an expected call of WriteIgnitionFiles.
func (mr *MockControllerMockRecorder) WriteIgnitionFiles(ctx, files any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteIgnitionFiles", reflect.TypeOf((*MockController)(nil).WriteIgnitionFiles), ctx, files)
}
