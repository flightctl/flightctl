// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/fileio/fileio.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/fileio/fileio.go -destination=internal/agent/device/fileio/mock_fileio.go -package=fileio
//

// Package fileio is a generated GoMock package.
package fileio

import (
	fs "io/fs"
	os "os"
	reflect "reflect"

	types "github.com/coreos/ignition/v2/config/v3_4/types"
	gomock "go.uber.org/mock/gomock"
)

// MockManagedFile is a mock of ManagedFile interface.
type MockManagedFile struct {
	ctrl     *gomock.Controller
	recorder *MockManagedFileMockRecorder
}

// MockManagedFileMockRecorder is the mock recorder for MockManagedFile.
type MockManagedFileMockRecorder struct {
	mock *MockManagedFile
}

// NewMockManagedFile creates a new mock instance.
func NewMockManagedFile(ctrl *gomock.Controller) *MockManagedFile {
	mock := &MockManagedFile{ctrl: ctrl}
	mock.recorder = &MockManagedFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagedFile) EXPECT() *MockManagedFileMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockManagedFile) Exists() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockManagedFileMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockManagedFile)(nil).Exists))
}

// IsUpToDate mocks base method.
func (m *MockManagedFile) IsUpToDate() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpToDate")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpToDate indicates an expected call of IsUpToDate.
func (mr *MockManagedFileMockRecorder) IsUpToDate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpToDate", reflect.TypeOf((*MockManagedFile)(nil).IsUpToDate))
}

// Path mocks base method.
func (m *MockManagedFile) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockManagedFileMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockManagedFile)(nil).Path))
}

// Write mocks base method.
func (m *MockManagedFile) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockManagedFileMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockManagedFile)(nil).Write))
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// CreateManagedFile mocks base method.
func (m *MockWriter) CreateManagedFile(file types.File) ManagedFile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagedFile", file)
	ret0, _ := ret[0].(ManagedFile)
	return ret0
}

// CreateManagedFile indicates an expected call of CreateManagedFile.
func (mr *MockWriterMockRecorder) CreateManagedFile(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagedFile", reflect.TypeOf((*MockWriter)(nil).CreateManagedFile), file)
}

// RemoveFile mocks base method.
func (m *MockWriter) RemoveFile(file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", file)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockWriterMockRecorder) RemoveFile(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockWriter)(nil).RemoveFile), file)
}

// SetRootdir mocks base method.
func (m *MockWriter) SetRootdir(path string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRootdir", path)
}

// SetRootdir indicates an expected call of SetRootdir.
func (mr *MockWriterMockRecorder) SetRootdir(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRootdir", reflect.TypeOf((*MockWriter)(nil).SetRootdir), path)
}

// WriteFile mocks base method.
func (m *MockWriter) WriteFile(name string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", name, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockWriterMockRecorder) WriteFile(name, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockWriter)(nil).WriteFile), name, data, perm)
}

// WriteFileBytes mocks base method.
func (m *MockWriter) WriteFileBytes(name string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileBytes", name, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileBytes indicates an expected call of WriteFileBytes.
func (mr *MockWriterMockRecorder) WriteFileBytes(name, data, perm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileBytes", reflect.TypeOf((*MockWriter)(nil).WriteFileBytes), name, data, perm)
}
