// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/spec/spec.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/spec/spec.go -destination=internal/agent/device/spec/mock_spec.go -package=spec
//

// Package spec is a generated GoMock package.
package spec

import (
	reflect "reflect"

	client "github.com/flightctl/flightctl/internal/agent/client"
	container "github.com/flightctl/flightctl/internal/container"
	gomock "go.uber.org/mock/gomock"
	context "golang.org/x/net/context"
)

// MockManagerNoClient is a mock of ManagerNoClient interface.
type MockManagerNoClient struct {
	ctrl     *gomock.Controller
	recorder *MockManagerNoClientMockRecorder
}

// MockManagerNoClientMockRecorder is the mock recorder for MockManagerNoClient.
type MockManagerNoClientMockRecorder struct {
	mock *MockManagerNoClient
}

// NewMockManagerNoClient creates a new mock instance.
func NewMockManagerNoClient(ctrl *gomock.Controller) *MockManagerNoClient {
	mock := &MockManagerNoClient{ctrl: ctrl}
	mock.recorder = &MockManagerNoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerNoClient) EXPECT() *MockManagerNoClientMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockManagerNoClient) Exists(specType SpecType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", specType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockManagerNoClientMockRecorder) Exists(specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockManagerNoClient)(nil).Exists), specType)
}

// Initialize mocks base method.
func (m *MockManagerNoClient) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockManagerNoClientMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockManagerNoClient)(nil).Initialize))
}

// IsOSUpdateInProgress mocks base method.
func (m *MockManagerNoClient) IsOSUpdateInProgress() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOSUpdateInProgress")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOSUpdateInProgress indicates an expected call of IsOSUpdateInProgress.
func (mr *MockManagerNoClientMockRecorder) IsOSUpdateInProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOSUpdateInProgress", reflect.TypeOf((*MockManagerNoClient)(nil).IsOSUpdateInProgress))
}

// IsOsImageReconciled mocks base method.
func (m *MockManagerNoClient) IsOsImageReconciled(bootcHost *container.BootcHost) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOsImageReconciled", bootcHost)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOsImageReconciled indicates an expected call of IsOsImageReconciled.
func (mr *MockManagerNoClientMockRecorder) IsOsImageReconciled(bootcHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOsImageReconciled", reflect.TypeOf((*MockManagerNoClient)(nil).IsOsImageReconciled), bootcHost)
}

// Read mocks base method.
func (m *MockManagerNoClient) Read(specType SpecType) (*Rendered, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", specType)
	ret0, _ := ret[0].(*Rendered)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockManagerNoClientMockRecorder) Read(specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockManagerNoClient)(nil).Read), specType)
}

// Rollback mocks base method.
func (m *MockManagerNoClient) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockManagerNoClientMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockManagerNoClient)(nil).Rollback))
}

// Write mocks base method.
func (m *MockManagerNoClient) Write(specType SpecType, rendered *Rendered) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", specType, rendered)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockManagerNoClientMockRecorder) Write(specType, rendered any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockManagerNoClient)(nil).Write), specType, rendered)
}

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockManager) Exists(specType SpecType) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", specType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockManagerMockRecorder) Exists(specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockManager)(nil).Exists), specType)
}

// GetDesired mocks base method.
func (m *MockManager) GetDesired(ctx context.Context, renderedVersion string, rollback bool) (*Rendered, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDesired", ctx, renderedVersion, rollback)
	ret0, _ := ret[0].(*Rendered)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDesired indicates an expected call of GetDesired.
func (mr *MockManagerMockRecorder) GetDesired(ctx, renderedVersion, rollback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDesired", reflect.TypeOf((*MockManager)(nil).GetDesired), ctx, renderedVersion, rollback)
}

// Initialize mocks base method.
func (m *MockManager) Initialize() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockManagerMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockManager)(nil).Initialize))
}

// IsOSUpdateInProgress mocks base method.
func (m *MockManager) IsOSUpdateInProgress() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOSUpdateInProgress")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOSUpdateInProgress indicates an expected call of IsOSUpdateInProgress.
func (mr *MockManagerMockRecorder) IsOSUpdateInProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOSUpdateInProgress", reflect.TypeOf((*MockManager)(nil).IsOSUpdateInProgress))
}

// IsOsImageReconciled mocks base method.
func (m *MockManager) IsOsImageReconciled(bootcHost *container.BootcHost) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOsImageReconciled", bootcHost)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOsImageReconciled indicates an expected call of IsOsImageReconciled.
func (mr *MockManagerMockRecorder) IsOsImageReconciled(bootcHost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOsImageReconciled", reflect.TypeOf((*MockManager)(nil).IsOsImageReconciled), bootcHost)
}

// Read mocks base method.
func (m *MockManager) Read(specType SpecType) (*Rendered, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", specType)
	ret0, _ := ret[0].(*Rendered)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockManagerMockRecorder) Read(specType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockManager)(nil).Read), specType)
}

// Rollback mocks base method.
func (m *MockManager) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockManagerMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockManager)(nil).Rollback))
}

// SetClient mocks base method.
func (m *MockManager) SetClient(arg0 client.Management) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockManagerMockRecorder) SetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockManager)(nil).SetClient), arg0)
}

// Write mocks base method.
func (m *MockManager) Write(specType SpecType, rendered *Rendered) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", specType, rendered)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockManagerMockRecorder) Write(specType, rendered any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockManager)(nil).Write), specType, rendered)
}
