// Code generated by MockGen. DO NOT EDIT.
// Source: device_publisher.go
//
// Generated by this command:
//
//	mockgen -source=device_publisher.go -destination=mock_device_publisher.go -package=device_publisher
//

// Package device_publisher is a generated GoMock package.
package device_publisher

import (
	context "context"
	reflect "reflect"
	sync "sync"

	client "github.com/flightctl/flightctl/internal/agent/client"
	gomock "go.uber.org/mock/gomock"
)

// MockDevicePublisher is a mock of DevicePublisher interface.
type MockDevicePublisher struct {
	ctrl     *gomock.Controller
	recorder *MockDevicePublisherMockRecorder
}

// MockDevicePublisherMockRecorder is the mock recorder for MockDevicePublisher.
type MockDevicePublisherMockRecorder struct {
	mock *MockDevicePublisher
}

// NewMockDevicePublisher creates a new mock instance.
func NewMockDevicePublisher(ctrl *gomock.Controller) *MockDevicePublisher {
	mock := &MockDevicePublisher{ctrl: ctrl}
	mock.recorder = &MockDevicePublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDevicePublisher) EXPECT() *MockDevicePublisherMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockDevicePublisher) Run(ctx context.Context, wg *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx, wg)
}

// Run indicates an expected call of Run.
func (mr *MockDevicePublisherMockRecorder) Run(ctx, wg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDevicePublisher)(nil).Run), ctx, wg)
}

// SetClient mocks base method.
func (m *MockDevicePublisher) SetClient(arg0 client.Management) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockDevicePublisherMockRecorder) SetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockDevicePublisher)(nil).SetClient), arg0)
}

// Subscribe mocks base method.
func (m *MockDevicePublisher) Subscribe() Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(Subscription)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockDevicePublisherMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockDevicePublisher)(nil).Subscribe))
}
