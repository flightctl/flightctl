package applications

import (
	"context"
	"fmt"

	"github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/flightctl/flightctl/internal/agent/client"
	"github.com/flightctl/flightctl/internal/agent/device/errors"
	"github.com/flightctl/flightctl/pkg/executer"
	"github.com/flightctl/flightctl/pkg/log"
)

var _ Manager = (*manager)(nil)

type manager struct {
	podmanMonitor *PodmanMonitor
	log           *log.PrefixLogger
}

func NewManager(
	log *log.PrefixLogger,
	exec executer.Executer,
	podmanClient *client.Podman,
	systemClient client.System,
) Manager {
	bootTime := systemClient.BootTime()
	return &manager{
		podmanMonitor: NewPodmanMonitor(log, exec, podmanClient, bootTime),
		log:           log,
	}
}

// Add an application to be managed
func (m *manager) Ensure(app Application) error {
	appType := app.Type()
	switch appType {
	case AppCompose:
		return m.podmanMonitor.ensure(app)
	default:
		return fmt.Errorf("%w: %s", errors.ErrUnsupportedAppType, appType)
	}
}

// Remove by name
func (m *manager) Remove(app Application) error {
	appType := app.Type()
	switch appType {
	case AppCompose:
		return m.podmanMonitor.remove(app)
	default:
		return fmt.Errorf("%w: %s", errors.ErrUnsupportedAppType, appType)
	}
}

// Update an application
func (m *manager) Update(app Application) error {
	appType := app.Type()
	switch appType {
	case AppCompose:
		return m.podmanMonitor.update(app)
	default:
		return fmt.Errorf("%w: %s", errors.ErrUnsupportedAppType, appType)
	}
}

// AfterUpdate executes actions generated by the manager during reconciliation.
func (m *manager) AfterUpdate(ctx context.Context) error {
	// execute actions for applications using the podman runtime this includes
	// compose and quadlets.
	if err := m.podmanMonitor.ExecuteActions(ctx); err != nil {
		return fmt.Errorf("error executing actions: %w", err)
	}
	return nil
}

func (m *manager) Status(ctx context.Context, status *v1alpha1.DeviceStatus) error {
	applicationsStatus, applicationSummary, err := m.podmanMonitor.Status()
	if err != nil {
		return err
	}

	status.ApplicationsSummary.Status = applicationSummary.Status
	status.ApplicationsSummary.Info = applicationSummary.Info
	status.Applications = applicationsStatus
	return nil
}

func (m *manager) Stop(ctx context.Context) error {
	return m.podmanMonitor.Stop(ctx)
}
