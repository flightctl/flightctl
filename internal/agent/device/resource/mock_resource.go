// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/device/resource/resource.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/device/resource/resource.go -destination=internal/agent/device/resource/mock_resource.go -package=resource
//

// Package resource is a generated GoMock package.
package resource

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockManager) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockManagerMockRecorder) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockManager)(nil).Run), ctx)
}

// Usage mocks base method.
func (m *MockManager) Usage() *Usage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage")
	ret0, _ := ret[0].(*Usage)
	return ret0
}

// Usage indicates an expected call of Usage.
func (mr *MockManagerMockRecorder) Usage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockManager)(nil).Usage))
}

// MockMonitor is a mock of Monitor interface.
type MockMonitor[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockMonitorMockRecorder[T]
}

// MockMonitorMockRecorder is the mock recorder for MockMonitor.
type MockMonitorMockRecorder[T any] struct {
	mock *MockMonitor[T]
}

// NewMockMonitor creates a new mock instance.
func NewMockMonitor[T any](ctrl *gomock.Controller) *MockMonitor[T] {
	mock := &MockMonitor[T]{ctrl: ctrl}
	mock.recorder = &MockMonitorMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMonitor[T]) EXPECT() *MockMonitorMockRecorder[T] {
	return m.recorder
}

// Run mocks base method.
func (m *MockMonitor[T]) Run(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", ctx)
}

// Run indicates an expected call of Run.
func (mr *MockMonitorMockRecorder[T]) Run(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockMonitor[T])(nil).Run), ctx)
}

// Usage mocks base method.
func (m *MockMonitor[T]) Usage() *T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage")
	ret0, _ := ret[0].(*T)
	return ret0
}

// Usage indicates an expected call of Usage.
func (mr *MockMonitorMockRecorder[T]) Usage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockMonitor[T])(nil).Usage))
}
