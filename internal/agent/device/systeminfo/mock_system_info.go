// Code generated by MockGen. DO NOT EDIT.
// Source: system_info.go
//
// Generated by this command:
//
//	mockgen -source=system_info.go -destination=mock_system_info.go -package=systeminfo
//

// Package systeminfo is a generated GoMock package.
package systeminfo

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	status "github.com/flightctl/flightctl/internal/agent/device/status"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// BootID mocks base method.
func (m *MockManager) BootID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootID")
	ret0, _ := ret[0].(string)
	return ret0
}

// BootID indicates an expected call of BootID.
func (mr *MockManagerMockRecorder) BootID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootID", reflect.TypeOf((*MockManager)(nil).BootID))
}

// BootTime mocks base method.
func (m *MockManager) BootTime() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootTime")
	ret0, _ := ret[0].(string)
	return ret0
}

// BootTime indicates an expected call of BootTime.
func (mr *MockManagerMockRecorder) BootTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootTime", reflect.TypeOf((*MockManager)(nil).BootTime))
}

// IsRebooted mocks base method.
func (m *MockManager) IsRebooted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRebooted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRebooted indicates an expected call of IsRebooted.
func (mr *MockManagerMockRecorder) IsRebooted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRebooted", reflect.TypeOf((*MockManager)(nil).IsRebooted))
}

// RegisterCollector mocks base method.
func (m *MockManager) RegisterCollector(ctx context.Context, name string, fn CollectorFn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCollector", ctx, name, fn)
}

// RegisterCollector indicates an expected call of RegisterCollector.
func (mr *MockManagerMockRecorder) RegisterCollector(ctx, name, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCollector", reflect.TypeOf((*MockManager)(nil).RegisterCollector), ctx, name, fn)
}

// Status mocks base method.
func (m *MockManager) Status(arg0 context.Context, arg1 *v1alpha1.DeviceStatus, arg2 ...status.CollectorOpt) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockManagerMockRecorder) Status(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockManager)(nil).Status), varargs...)
}
