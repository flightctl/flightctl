// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination=mock_manager.go -package=sosreport
//

// Package sosreport is a generated GoMock package.
package sosreport

import (
	context "context"
	reflect "reflect"

	client "github.com/flightctl/flightctl/internal/api/client/agent"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GenerateAndUpdate mocks base method.
func (m *MockManager) GenerateAndUpdate(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndUpdate", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateAndUpdate indicates an expected call of GenerateAndUpdate.
func (mr *MockManagerMockRecorder) GenerateAndUpdate(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndUpdate", reflect.TypeOf((*MockManager)(nil).GenerateAndUpdate), ctx, id)
}

// SetClient mocks base method.
func (m *MockManager) SetClient(arg0 client.ClientWithResponsesInterface) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetClient", arg0)
}

// SetClient indicates an expected call of SetClient.
func (mr *MockManagerMockRecorder) SetClient(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockManager)(nil).SetClient), arg0)
}
