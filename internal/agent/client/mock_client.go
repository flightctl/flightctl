// Code generated by MockGen. DO NOT EDIT.
// Source: internal/agent/client/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/agent/client/client.go -destination=internal/agent/client/mock_client.go -package=client
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	client "github.com/flightctl/flightctl/internal/api/client/agent"
	gomock "go.uber.org/mock/gomock"
)

// MockManagement is a mock of Management interface.
type MockManagement struct {
	ctrl     *gomock.Controller
	recorder *MockManagementMockRecorder
}

// MockManagementMockRecorder is the mock recorder for MockManagement.
type MockManagementMockRecorder struct {
	mock *MockManagement
}

// NewMockManagement creates a new mock instance.
func NewMockManagement(ctrl *gomock.Controller) *MockManagement {
	mock := &MockManagement{ctrl: ctrl}
	mock.recorder = &MockManagementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagement) EXPECT() *MockManagementMockRecorder {
	return m.recorder
}

// GetRenderedDeviceSpec mocks base method.
func (m *MockManagement) GetRenderedDeviceSpec(ctx context.Context, name string, params *v1alpha1.GetRenderedDeviceSpecParams, rcb ...client.RequestEditorFn) (*v1alpha1.RenderedDeviceSpec, int, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, params}
	for _, a := range rcb {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRenderedDeviceSpec", varargs...)
	ret0, _ := ret[0].(*v1alpha1.RenderedDeviceSpec)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRenderedDeviceSpec indicates an expected call of GetRenderedDeviceSpec.
func (mr *MockManagementMockRecorder) GetRenderedDeviceSpec(ctx, name, params any, rcb ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, params}, rcb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRenderedDeviceSpec", reflect.TypeOf((*MockManagement)(nil).GetRenderedDeviceSpec), varargs...)
}

// UpdateDeviceStatus mocks base method.
func (m *MockManagement) UpdateDeviceStatus(ctx context.Context, name string, device v1alpha1.Device, rcb ...client.RequestEditorFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, name, device}
	for _, a := range rcb {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateDeviceStatus", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceStatus indicates an expected call of UpdateDeviceStatus.
func (mr *MockManagementMockRecorder) UpdateDeviceStatus(ctx, name, device any, rcb ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, name, device}, rcb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceStatus", reflect.TypeOf((*MockManagement)(nil).UpdateDeviceStatus), varargs...)
}

// MockEnrollment is a mock of Enrollment interface.
type MockEnrollment struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentMockRecorder
}

// MockEnrollmentMockRecorder is the mock recorder for MockEnrollment.
type MockEnrollmentMockRecorder struct {
	mock *MockEnrollment
}

// NewMockEnrollment creates a new mock instance.
func NewMockEnrollment(ctrl *gomock.Controller) *MockEnrollment {
	mock := &MockEnrollment{ctrl: ctrl}
	mock.recorder = &MockEnrollmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollment) EXPECT() *MockEnrollmentMockRecorder {
	return m.recorder
}

// CreateEnrollmentRequest mocks base method.
func (m *MockEnrollment) CreateEnrollmentRequest(ctx context.Context, req v1alpha1.EnrollmentRequest, cb ...client.RequestEditorFn) (*v1alpha1.EnrollmentRequest, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range cb {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateEnrollmentRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnrollmentRequest indicates an expected call of CreateEnrollmentRequest.
func (mr *MockEnrollmentMockRecorder) CreateEnrollmentRequest(ctx, req any, cb ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, cb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnrollmentRequest", reflect.TypeOf((*MockEnrollment)(nil).CreateEnrollmentRequest), varargs...)
}

// GetEnrollmentRequest mocks base method.
func (m *MockEnrollment) GetEnrollmentRequest(ctx context.Context, id string, cb ...client.RequestEditorFn) (*v1alpha1.EnrollmentRequest, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, id}
	for _, a := range cb {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEnrollmentRequest", varargs...)
	ret0, _ := ret[0].(*v1alpha1.EnrollmentRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrollmentRequest indicates an expected call of GetEnrollmentRequest.
func (mr *MockEnrollmentMockRecorder) GetEnrollmentRequest(ctx, id any, cb ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, id}, cb...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrollmentRequest", reflect.TypeOf((*MockEnrollment)(nil).GetEnrollmentRequest), varargs...)
}

// SetRPCMetricsCallback mocks base method.
func (m *MockEnrollment) SetRPCMetricsCallback(cb func(string, float64, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRPCMetricsCallback", cb)
}

// SetRPCMetricsCallback indicates an expected call of SetRPCMetricsCallback.
func (mr *MockEnrollmentMockRecorder) SetRPCMetricsCallback(cb any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRPCMetricsCallback", reflect.TypeOf((*MockEnrollment)(nil).SetRPCMetricsCallback), cb)
}
