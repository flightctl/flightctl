// Code generated by MockGen. DO NOT EDIT.
// Source: identity.go
//
// Generated by this command:
//
//	mockgen -source=identity.go -destination=mock_identity.go -package=identity
//

// Package identity is a generated GoMock package.
package identity

import (
	context "context"
	reflect "reflect"

	grpc_v1 "github.com/flightctl/flightctl/api/grpc/v1"
	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	client "github.com/flightctl/flightctl/internal/agent/client"
	client0 "github.com/flightctl/flightctl/internal/client"
	gomock "go.uber.org/mock/gomock"
)

// MockExportableProvider is a mock of ExportableProvider interface.
type MockExportableProvider struct {
	ctrl     *gomock.Controller
	recorder *MockExportableProviderMockRecorder
}

// MockExportableProviderMockRecorder is the mock recorder for MockExportableProvider.
type MockExportableProviderMockRecorder struct {
	mock *MockExportableProvider
}

// NewMockExportableProvider creates a new mock instance.
func NewMockExportableProvider(ctrl *gomock.Controller) *MockExportableProvider {
	mock := &MockExportableProvider{ctrl: ctrl}
	mock.recorder = &MockExportableProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportableProvider) EXPECT() *MockExportableProviderMockRecorder {
	return m.recorder
}

// NewExportable mocks base method.
func (m *MockExportableProvider) NewExportable(name string) (*Exportable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewExportable", name)
	ret0, _ := ret[0].(*Exportable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewExportable indicates an expected call of NewExportable.
func (mr *MockExportableProviderMockRecorder) NewExportable(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewExportable", reflect.TypeOf((*MockExportableProvider)(nil).NewExportable), name)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// CreateGRPCClient mocks base method.
func (m *MockProvider) CreateGRPCClient(config *client0.Config) (grpc_v1.RouterServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGRPCClient", config)
	ret0, _ := ret[0].(grpc_v1.RouterServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGRPCClient indicates an expected call of CreateGRPCClient.
func (mr *MockProviderMockRecorder) CreateGRPCClient(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCClient", reflect.TypeOf((*MockProvider)(nil).CreateGRPCClient), config)
}

// CreateManagementClient mocks base method.
func (m *MockProvider) CreateManagementClient(config *client0.Config, metricsCallback client.RPCMetricsCallback) (client.Management, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagementClient", config, metricsCallback)
	ret0, _ := ret[0].(client.Management)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManagementClient indicates an expected call of CreateManagementClient.
func (mr *MockProviderMockRecorder) CreateManagementClient(config, metricsCallback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagementClient", reflect.TypeOf((*MockProvider)(nil).CreateManagementClient), config, metricsCallback)
}

// GenerateCSR mocks base method.
func (m *MockProvider) GenerateCSR(deviceName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSR", deviceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSR indicates an expected call of GenerateCSR.
func (mr *MockProviderMockRecorder) GenerateCSR(deviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSR", reflect.TypeOf((*MockProvider)(nil).GenerateCSR), deviceName)
}

// GetDeviceName mocks base method.
func (m *MockProvider) GetDeviceName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceName indicates an expected call of GetDeviceName.
func (mr *MockProviderMockRecorder) GetDeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceName", reflect.TypeOf((*MockProvider)(nil).GetDeviceName))
}

// HasCertificate mocks base method.
func (m *MockProvider) HasCertificate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCertificate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCertificate indicates an expected call of HasCertificate.
func (mr *MockProviderMockRecorder) HasCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCertificate", reflect.TypeOf((*MockProvider)(nil).HasCertificate))
}

// Initialize mocks base method.
func (m *MockProvider) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockProviderMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProvider)(nil).Initialize), ctx)
}

// ProveIdentity mocks base method.
func (m *MockProvider) ProveIdentity(ctx context.Context, enrollmentRequest *v1alpha1.EnrollmentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProveIdentity", ctx, enrollmentRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProveIdentity indicates an expected call of ProveIdentity.
func (mr *MockProviderMockRecorder) ProveIdentity(ctx, enrollmentRequest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProveIdentity", reflect.TypeOf((*MockProvider)(nil).ProveIdentity), ctx, enrollmentRequest)
}

// StoreCertificate mocks base method.
func (m *MockProvider) StoreCertificate(certPEM []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCertificate", certPEM)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCertificate indicates an expected call of StoreCertificate.
func (mr *MockProviderMockRecorder) StoreCertificate(certPEM any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCertificate", reflect.TypeOf((*MockProvider)(nil).StoreCertificate), certPEM)
}

// WipeCertificateOnly mocks base method.
func (m *MockProvider) WipeCertificateOnly() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WipeCertificateOnly")
	ret0, _ := ret[0].(error)
	return ret0
}

// WipeCertificateOnly indicates an expected call of WipeCertificateOnly.
func (mr *MockProviderMockRecorder) WipeCertificateOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WipeCertificateOnly", reflect.TypeOf((*MockProvider)(nil).WipeCertificateOnly))
}

// WipeCredentials mocks base method.
func (m *MockProvider) WipeCredentials() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WipeCredentials")
	ret0, _ := ret[0].(error)
	return ret0
}

// WipeCredentials indicates an expected call of WipeCredentials.
func (mr *MockProviderMockRecorder) WipeCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WipeCredentials", reflect.TypeOf((*MockProvider)(nil).WipeCredentials))
}
