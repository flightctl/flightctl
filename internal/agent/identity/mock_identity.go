// Code generated by MockGen. DO NOT EDIT.
// Source: identity.go
//
// Generated by this command:
//
//	mockgen -source=identity.go -destination=mock_identity.go -package=identity
//

// Package identity is a generated GoMock package.
package identity

import (
	context "context"
	reflect "reflect"

	grpc_v1 "github.com/flightctl/flightctl/api/grpc/v1"
	client "github.com/flightctl/flightctl/internal/agent/client"
	client0 "github.com/flightctl/flightctl/internal/client"
	tpm "github.com/flightctl/flightctl/internal/tpm"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProvider) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProviderMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProvider)(nil).Close), ctx)
}

// CreateGRPCClient mocks base method.
func (m *MockProvider) CreateGRPCClient(config *client0.Config) (grpc_v1.RouterServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGRPCClient", config)
	ret0, _ := ret[0].(grpc_v1.RouterServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGRPCClient indicates an expected call of CreateGRPCClient.
func (mr *MockProviderMockRecorder) CreateGRPCClient(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGRPCClient", reflect.TypeOf((*MockProvider)(nil).CreateGRPCClient), config)
}

// CreateManagementClient mocks base method.
func (m *MockProvider) CreateManagementClient(config *client0.Config, metricsCallback client.RPCMetricsCallback) (client.Management, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManagementClient", config, metricsCallback)
	ret0, _ := ret[0].(client.Management)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManagementClient indicates an expected call of CreateManagementClient.
func (mr *MockProviderMockRecorder) CreateManagementClient(config, metricsCallback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManagementClient", reflect.TypeOf((*MockProvider)(nil).CreateManagementClient), config, metricsCallback)
}

// GenerateCSR mocks base method.
func (m *MockProvider) GenerateCSR(deviceName string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCSR", deviceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCSR indicates an expected call of GenerateCSR.
func (mr *MockProviderMockRecorder) GenerateCSR(deviceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCSR", reflect.TypeOf((*MockProvider)(nil).GenerateCSR), deviceName)
}

// GetDeviceName mocks base method.
func (m *MockProvider) GetDeviceName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceName indicates an expected call of GetDeviceName.
func (mr *MockProviderMockRecorder) GetDeviceName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceName", reflect.TypeOf((*MockProvider)(nil).GetDeviceName))
}

// HasCertificate mocks base method.
func (m *MockProvider) HasCertificate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCertificate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCertificate indicates an expected call of HasCertificate.
func (mr *MockProviderMockRecorder) HasCertificate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCertificate", reflect.TypeOf((*MockProvider)(nil).HasCertificate))
}

// Initialize mocks base method.
func (m *MockProvider) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockProviderMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockProvider)(nil).Initialize), ctx)
}

// StoreCertificate mocks base method.
func (m *MockProvider) StoreCertificate(certPEM []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCertificate", certPEM)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCertificate indicates an expected call of StoreCertificate.
func (mr *MockProviderMockRecorder) StoreCertificate(certPEM any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCertificate", reflect.TypeOf((*MockProvider)(nil).StoreCertificate), certPEM)
}

// WipeCredentials mocks base method.
func (m *MockProvider) WipeCredentials() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WipeCredentials")
	ret0, _ := ret[0].(error)
	return ret0
}

// WipeCredentials indicates an expected call of WipeCredentials.
func (mr *MockProviderMockRecorder) WipeCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WipeCredentials", reflect.TypeOf((*MockProvider)(nil).WipeCredentials))
}

// MockTPMProvider is a mock of TPMProvider interface.
type MockTPMProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTPMProviderMockRecorder
}

// MockTPMProviderMockRecorder is the mock recorder for MockTPMProvider.
type MockTPMProviderMockRecorder struct {
	mock *MockTPMProvider
}

// NewMockTPMProvider creates a new mock instance.
func NewMockTPMProvider(ctrl *gomock.Controller) *MockTPMProvider {
	mock := &MockTPMProvider{ctrl: ctrl}
	mock.recorder = &MockTPMProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTPMProvider) EXPECT() *MockTPMProviderMockRecorder {
	return m.recorder
}

// GetEKCert mocks base method.
func (m *MockTPMProvider) GetEKCert() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEKCert")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEKCert indicates an expected call of GetEKCert.
func (mr *MockTPMProviderMockRecorder) GetEKCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEKCert", reflect.TypeOf((*MockTPMProvider)(nil).GetEKCert))
}

// GetTCGAttestation mocks base method.
func (m *MockTPMProvider) GetTCGAttestation() (*tpm.AttestationBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTCGAttestation")
	ret0, _ := ret[0].(*tpm.AttestationBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTCGAttestation indicates an expected call of GetTCGAttestation.
func (mr *MockTPMProviderMockRecorder) GetTCGAttestation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTCGAttestation", reflect.TypeOf((*MockTPMProvider)(nil).GetTCGAttestation))
}

// GetTPMCertifyCert mocks base method.
func (m *MockTPMProvider) GetTPMCertifyCert() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTPMCertifyCert")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTPMCertifyCert indicates an expected call of GetTPMCertifyCert.
func (mr *MockTPMProviderMockRecorder) GetTPMCertifyCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTPMCertifyCert", reflect.TypeOf((*MockTPMProvider)(nil).GetTPMCertifyCert))
}

// MockTPMCapable is a mock of TPMCapable interface.
type MockTPMCapable struct {
	ctrl     *gomock.Controller
	recorder *MockTPMCapableMockRecorder
}

// MockTPMCapableMockRecorder is the mock recorder for MockTPMCapable.
type MockTPMCapableMockRecorder struct {
	mock *MockTPMCapable
}

// NewMockTPMCapable creates a new mock instance.
func NewMockTPMCapable(ctrl *gomock.Controller) *MockTPMCapable {
	mock := &MockTPMCapable{ctrl: ctrl}
	mock.recorder = &MockTPMCapableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTPMCapable) EXPECT() *MockTPMCapableMockRecorder {
	return m.recorder
}

// GetTPM mocks base method.
func (m *MockTPMCapable) GetTPM() (TPMProvider, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTPM")
	ret0, _ := ret[0].(TPMProvider)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetTPM indicates an expected call of GetTPM.
func (mr *MockTPMCapableMockRecorder) GetTPM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTPM", reflect.TypeOf((*MockTPMCapable)(nil).GetTPM))
}
