// Code generated by MockGen. DO NOT EDIT.
// Source: worker_client.go
//
// Generated by this command:
//
//	mockgen -source=worker_client.go -destination=mock_worker_client.go -package=worker_client
//

// Package worker_client is a generated GoMock package.
package worker_client

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkerClient is a mock of WorkerClient interface.
type MockWorkerClient struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerClientMockRecorder
}

// MockWorkerClientMockRecorder is the mock recorder for MockWorkerClient.
type MockWorkerClientMockRecorder struct {
	mock *MockWorkerClient
}

// NewMockWorkerClient creates a new mock instance.
func NewMockWorkerClient(ctrl *gomock.Controller) *MockWorkerClient {
	mock := &MockWorkerClient{ctrl: ctrl}
	mock.recorder = &MockWorkerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerClient) EXPECT() *MockWorkerClientMockRecorder {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockWorkerClient) EmitEvent(ctx context.Context, orgId uuid.UUID, event *v1alpha1.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", ctx, orgId, event)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockWorkerClientMockRecorder) EmitEvent(ctx, orgId, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockWorkerClient)(nil).EmitEvent), ctx, orgId, event)
}
