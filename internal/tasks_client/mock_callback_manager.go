// Code generated by MockGen. DO NOT EDIT.
// Source: callback_manager.go
//
// Generated by this command:
//
//	mockgen -source=callback_manager.go -destination=mock_callback_manager.go -package=tasks_client
//

// Package tasks_client is a generated GoMock package.
package tasks_client

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/flightctl/flightctl/api/v1alpha1"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCallbackManager is a mock of CallbackManager interface.
type MockCallbackManager struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackManagerMockRecorder
}

// MockCallbackManagerMockRecorder is the mock recorder for MockCallbackManager.
type MockCallbackManagerMockRecorder struct {
	mock *MockCallbackManager
}

// NewMockCallbackManager creates a new mock instance.
func NewMockCallbackManager(ctrl *gomock.Controller) *MockCallbackManager {
	mock := &MockCallbackManager{ctrl: ctrl}
	mock.recorder = &MockCallbackManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbackManager) EXPECT() *MockCallbackManagerMockRecorder {
	return m.recorder
}

// AllDevicesDeletedCallback mocks base method.
func (m *MockCallbackManager) AllDevicesDeletedCallback(ctx context.Context, orgId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllDevicesDeletedCallback", ctx, orgId)
}

// AllDevicesDeletedCallback indicates an expected call of AllDevicesDeletedCallback.
func (mr *MockCallbackManagerMockRecorder) AllDevicesDeletedCallback(ctx, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDevicesDeletedCallback", reflect.TypeOf((*MockCallbackManager)(nil).AllDevicesDeletedCallback), ctx, orgId)
}

// AllFleetsDeletedCallback mocks base method.
func (m *MockCallbackManager) AllFleetsDeletedCallback(ctx context.Context, orgId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllFleetsDeletedCallback", ctx, orgId)
}

// AllFleetsDeletedCallback indicates an expected call of AllFleetsDeletedCallback.
func (mr *MockCallbackManagerMockRecorder) AllFleetsDeletedCallback(ctx, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllFleetsDeletedCallback", reflect.TypeOf((*MockCallbackManager)(nil).AllFleetsDeletedCallback), ctx, orgId)
}

// AllRepositoriesDeletedCallback mocks base method.
func (m *MockCallbackManager) AllRepositoriesDeletedCallback(ctx context.Context, orgId uuid.UUID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AllRepositoriesDeletedCallback", ctx, orgId)
}

// AllRepositoriesDeletedCallback indicates an expected call of AllRepositoriesDeletedCallback.
func (mr *MockCallbackManagerMockRecorder) AllRepositoriesDeletedCallback(ctx, orgId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllRepositoriesDeletedCallback", reflect.TypeOf((*MockCallbackManager)(nil).AllRepositoriesDeletedCallback), ctx, orgId)
}

// DeviceSourceUpdated mocks base method.
func (m *MockCallbackManager) DeviceSourceUpdated(ctx context.Context, orgId uuid.UUID, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeviceSourceUpdated", ctx, orgId, name)
}

// DeviceSourceUpdated indicates an expected call of DeviceSourceUpdated.
func (mr *MockCallbackManagerMockRecorder) DeviceSourceUpdated(ctx, orgId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceSourceUpdated", reflect.TypeOf((*MockCallbackManager)(nil).DeviceSourceUpdated), ctx, orgId, name)
}

// DeviceUpdatedCallback mocks base method.
func (m *MockCallbackManager) DeviceUpdatedCallback(ctx context.Context, orgId uuid.UUID, before, after *v1alpha1.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeviceUpdatedCallback", ctx, orgId, before, after)
}

// DeviceUpdatedCallback indicates an expected call of DeviceUpdatedCallback.
func (mr *MockCallbackManagerMockRecorder) DeviceUpdatedCallback(ctx, orgId, before, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceUpdatedCallback", reflect.TypeOf((*MockCallbackManager)(nil).DeviceUpdatedCallback), ctx, orgId, before, after)
}

// DeviceUpdatedNoRenderCallback mocks base method.
func (m *MockCallbackManager) DeviceUpdatedNoRenderCallback(ctx context.Context, orgId uuid.UUID, before, after *v1alpha1.Device) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeviceUpdatedNoRenderCallback", ctx, orgId, before, after)
}

// DeviceUpdatedNoRenderCallback indicates an expected call of DeviceUpdatedNoRenderCallback.
func (mr *MockCallbackManagerMockRecorder) DeviceUpdatedNoRenderCallback(ctx, orgId, before, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeviceUpdatedNoRenderCallback", reflect.TypeOf((*MockCallbackManager)(nil).DeviceUpdatedNoRenderCallback), ctx, orgId, before, after)
}

// FleetRolloutSelectionUpdated mocks base method.
func (m *MockCallbackManager) FleetRolloutSelectionUpdated(ctx context.Context, orgId uuid.UUID, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FleetRolloutSelectionUpdated", ctx, orgId, name)
}

// FleetRolloutSelectionUpdated indicates an expected call of FleetRolloutSelectionUpdated.
func (mr *MockCallbackManagerMockRecorder) FleetRolloutSelectionUpdated(ctx, orgId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FleetRolloutSelectionUpdated", reflect.TypeOf((*MockCallbackManager)(nil).FleetRolloutSelectionUpdated), ctx, orgId, name)
}

// FleetSourceUpdated mocks base method.
func (m *MockCallbackManager) FleetSourceUpdated(ctx context.Context, orgId uuid.UUID, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FleetSourceUpdated", ctx, orgId, name)
}

// FleetSourceUpdated indicates an expected call of FleetSourceUpdated.
func (mr *MockCallbackManagerMockRecorder) FleetSourceUpdated(ctx, orgId, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FleetSourceUpdated", reflect.TypeOf((*MockCallbackManager)(nil).FleetSourceUpdated), ctx, orgId, name)
}

// FleetUpdatedCallback mocks base method.
func (m *MockCallbackManager) FleetUpdatedCallback(ctx context.Context, orgId uuid.UUID, before, after *v1alpha1.Fleet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FleetUpdatedCallback", ctx, orgId, before, after)
}

// FleetUpdatedCallback indicates an expected call of FleetUpdatedCallback.
func (mr *MockCallbackManagerMockRecorder) FleetUpdatedCallback(ctx, orgId, before, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FleetUpdatedCallback", reflect.TypeOf((*MockCallbackManager)(nil).FleetUpdatedCallback), ctx, orgId, before, after)
}

// RepositoryUpdatedCallback mocks base method.
func (m *MockCallbackManager) RepositoryUpdatedCallback(ctx context.Context, orgId uuid.UUID, before, after *v1alpha1.Repository) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RepositoryUpdatedCallback", ctx, orgId, before, after)
}

// RepositoryUpdatedCallback indicates an expected call of RepositoryUpdatedCallback.
func (mr *MockCallbackManagerMockRecorder) RepositoryUpdatedCallback(ctx, orgId, before, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryUpdatedCallback", reflect.TypeOf((*MockCallbackManager)(nil).RepositoryUpdatedCallback), ctx, orgId, before, after)
}

// TemplateVersionCreatedCallback mocks base method.
func (m *MockCallbackManager) TemplateVersionCreatedCallback(ctx context.Context, orgId uuid.UUID, before, after *v1alpha1.TemplateVersion) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TemplateVersionCreatedCallback", ctx, orgId, before, after)
}

// TemplateVersionCreatedCallback indicates an expected call of TemplateVersionCreatedCallback.
func (mr *MockCallbackManagerMockRecorder) TemplateVersionCreatedCallback(ctx, orgId, before, after any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateVersionCreatedCallback", reflect.TypeOf((*MockCallbackManager)(nil).TemplateVersionCreatedCallback), ctx, orgId, before, after)
}
