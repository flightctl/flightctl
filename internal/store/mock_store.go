// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/store.go
//
// Generated by this command:
//
//	mockgen -source=internal/store/store.go -destination=internal/store/mock_store.go -package=store
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CertificateSigningRequest mocks base method.
func (m *MockStore) CertificateSigningRequest() CertificateSigningRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateSigningRequest")
	ret0, _ := ret[0].(CertificateSigningRequest)
	return ret0
}

// CertificateSigningRequest indicates an expected call of CertificateSigningRequest.
func (mr *MockStoreMockRecorder) CertificateSigningRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateSigningRequest", reflect.TypeOf((*MockStore)(nil).CertificateSigningRequest))
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// Device mocks base method.
func (m *MockStore) Device() Device {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Device")
	ret0, _ := ret[0].(Device)
	return ret0
}

// Device indicates an expected call of Device.
func (mr *MockStoreMockRecorder) Device() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Device", reflect.TypeOf((*MockStore)(nil).Device))
}

// EnrollmentRequest mocks base method.
func (m *MockStore) EnrollmentRequest() EnrollmentRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnrollmentRequest")
	ret0, _ := ret[0].(EnrollmentRequest)
	return ret0
}

// EnrollmentRequest indicates an expected call of EnrollmentRequest.
func (mr *MockStoreMockRecorder) EnrollmentRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnrollmentRequest", reflect.TypeOf((*MockStore)(nil).EnrollmentRequest))
}

// Fleet mocks base method.
func (m *MockStore) Fleet() Fleet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fleet")
	ret0, _ := ret[0].(Fleet)
	return ret0
}

// Fleet indicates an expected call of Fleet.
func (mr *MockStoreMockRecorder) Fleet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fleet", reflect.TypeOf((*MockStore)(nil).Fleet))
}

// InitialMigration mocks base method.
func (m *MockStore) InitialMigration() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialMigration")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitialMigration indicates an expected call of InitialMigration.
func (mr *MockStoreMockRecorder) InitialMigration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialMigration", reflect.TypeOf((*MockStore)(nil).InitialMigration))
}

// Repository mocks base method.
func (m *MockStore) Repository() Repository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Repository")
	ret0, _ := ret[0].(Repository)
	return ret0
}

// Repository indicates an expected call of Repository.
func (mr *MockStoreMockRecorder) Repository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Repository", reflect.TypeOf((*MockStore)(nil).Repository))
}

// ResourceSync mocks base method.
func (m *MockStore) ResourceSync() ResourceSync {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSync")
	ret0, _ := ret[0].(ResourceSync)
	return ret0
}

// ResourceSync indicates an expected call of ResourceSync.
func (mr *MockStoreMockRecorder) ResourceSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSync", reflect.TypeOf((*MockStore)(nil).ResourceSync))
}

// TemplateVersion mocks base method.
func (m *MockStore) TemplateVersion() TemplateVersion {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplateVersion")
	ret0, _ := ret[0].(TemplateVersion)
	return ret0
}

// TemplateVersion indicates an expected call of TemplateVersion.
func (mr *MockStoreMockRecorder) TemplateVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplateVersion", reflect.TypeOf((*MockStore)(nil).TemplateVersion))
}
