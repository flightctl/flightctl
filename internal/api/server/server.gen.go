// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	. "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /api/v1/devices)
	DeleteDevices(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/devices)
	ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams)

	// (POST /api/v1/devices)
	CreateDevice(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/devices/{name})
	DeleteDevice(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/devices/{name})
	ReadDevice(w http.ResponseWriter, r *http.Request, name string)

	// (PATCH /api/v1/devices/{name})
	PatchDevice(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/devices/{name})
	ReplaceDevice(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/devices/{name}/console)
	RequestConsole(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/devices/{name}/rendered)
	GetRenderedDeviceSpec(w http.ResponseWriter, r *http.Request, name string, params GetRenderedDeviceSpecParams)

	// (GET /api/v1/devices/{name}/status)
	ReadDeviceStatus(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/devices/{name}/status)
	ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, name string)

	// (DELETE /api/v1/enrollmentrequests)
	DeleteEnrollmentRequests(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/enrollmentrequests)
	ListEnrollmentRequests(w http.ResponseWriter, r *http.Request, params ListEnrollmentRequestsParams)

	// (POST /api/v1/enrollmentrequests)
	CreateEnrollmentRequest(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/enrollmentrequests/{name})
	DeleteEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/enrollmentrequests/{name})
	ReadEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/enrollmentrequests/{name})
	ReplaceEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string)

	// (POST /api/v1/enrollmentrequests/{name}/approval)
	CreateEnrollmentRequestApproval(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/enrollmentrequests/{name}/status)
	ReadEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/enrollmentrequests/{name}/status)
	ReplaceEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string)

	// (DELETE /api/v1/fleets)
	DeleteFleets(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/fleets)
	ListFleets(w http.ResponseWriter, r *http.Request, params ListFleetsParams)

	// (POST /api/v1/fleets)
	CreateFleet(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/fleets/{fleet}/templateversions)
	DeleteTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string)

	// (GET /api/v1/fleets/{fleet}/templateversions)
	ListTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string, params ListTemplateVersionsParams)

	// (DELETE /api/v1/fleets/{fleet}/templateversions/{name})
	DeleteTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string)

	// (GET /api/v1/fleets/{fleet}/templateversions/{name})
	ReadTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string)

	// (DELETE /api/v1/fleets/{name})
	DeleteFleet(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/fleets/{name})
	ReadFleet(w http.ResponseWriter, r *http.Request, name string)

	// (PATCH /api/v1/fleets/{name})
	PatchFleet(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/fleets/{name})
	ReplaceFleet(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/fleets/{name}/status)
	ReadFleetStatus(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/fleets/{name}/status)
	ReplaceFleetStatus(w http.ResponseWriter, r *http.Request, name string)

	// (DELETE /api/v1/repositories)
	DeleteRepositories(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/repositories)
	ListRepositories(w http.ResponseWriter, r *http.Request, params ListRepositoriesParams)

	// (POST /api/v1/repositories)
	CreateRepository(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/repositories/{name})
	DeleteRepository(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/repositories/{name})
	ReadRepository(w http.ResponseWriter, r *http.Request, name string)

	// (PATCH /api/v1/repositories/{name})
	PatchRepository(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/repositories/{name})
	ReplaceRepository(w http.ResponseWriter, r *http.Request, name string)

	// (DELETE /api/v1/resourcesyncs)
	DeleteResourceSyncs(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/resourcesyncs)
	ListResourceSync(w http.ResponseWriter, r *http.Request, params ListResourceSyncParams)

	// (POST /api/v1/resourcesyncs)
	CreateResourceSync(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/resourcesyncs/{name})
	DeleteResourceSync(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/resourcesyncs/{name})
	ReadResourceSync(w http.ResponseWriter, r *http.Request, name string)

	// (PATCH /api/v1/resourcesyncs/{name})
	PatchResourceSync(w http.ResponseWriter, r *http.Request, name string)

	// (PUT /api/v1/resourcesyncs/{name})
	ReplaceResourceSync(w http.ResponseWriter, r *http.Request, name string)

	// (GET /api/v1/token/request)
	TokenRequest(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/token/validate)
	TokenValidate(w http.ResponseWriter, r *http.Request, params TokenValidateParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (DELETE /api/v1/devices)
func (_ Unimplemented) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices)
func (_ Unimplemented) ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/devices)
func (_ Unimplemented) CreateDevice(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/devices/{name})
func (_ Unimplemented) DeleteDevice(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{name})
func (_ Unimplemented) ReadDevice(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /api/v1/devices/{name})
func (_ Unimplemented) PatchDevice(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/devices/{name})
func (_ Unimplemented) ReplaceDevice(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{name}/console)
func (_ Unimplemented) RequestConsole(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{name}/rendered)
func (_ Unimplemented) GetRenderedDeviceSpec(w http.ResponseWriter, r *http.Request, name string, params GetRenderedDeviceSpecParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/devices/{name}/status)
func (_ Unimplemented) ReadDeviceStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/devices/{name}/status)
func (_ Unimplemented) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/enrollmentrequests)
func (_ Unimplemented) DeleteEnrollmentRequests(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/enrollmentrequests)
func (_ Unimplemented) ListEnrollmentRequests(w http.ResponseWriter, r *http.Request, params ListEnrollmentRequestsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/enrollmentrequests)
func (_ Unimplemented) CreateEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/enrollmentrequests/{name})
func (_ Unimplemented) DeleteEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/enrollmentrequests/{name})
func (_ Unimplemented) ReadEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/enrollmentrequests/{name})
func (_ Unimplemented) ReplaceEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/enrollmentrequests/{name}/approval)
func (_ Unimplemented) CreateEnrollmentRequestApproval(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/enrollmentrequests/{name}/status)
func (_ Unimplemented) ReadEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/enrollmentrequests/{name}/status)
func (_ Unimplemented) ReplaceEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/fleets)
func (_ Unimplemented) DeleteFleets(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/fleets)
func (_ Unimplemented) ListFleets(w http.ResponseWriter, r *http.Request, params ListFleetsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/fleets)
func (_ Unimplemented) CreateFleet(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/fleets/{fleet}/templateversions)
func (_ Unimplemented) DeleteTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/fleets/{fleet}/templateversions)
func (_ Unimplemented) ListTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string, params ListTemplateVersionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/fleets/{fleet}/templateversions/{name})
func (_ Unimplemented) DeleteTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/fleets/{fleet}/templateversions/{name})
func (_ Unimplemented) ReadTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/fleets/{name})
func (_ Unimplemented) DeleteFleet(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/fleets/{name})
func (_ Unimplemented) ReadFleet(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /api/v1/fleets/{name})
func (_ Unimplemented) PatchFleet(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/fleets/{name})
func (_ Unimplemented) ReplaceFleet(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/fleets/{name}/status)
func (_ Unimplemented) ReadFleetStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/fleets/{name}/status)
func (_ Unimplemented) ReplaceFleetStatus(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/repositories)
func (_ Unimplemented) DeleteRepositories(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/repositories)
func (_ Unimplemented) ListRepositories(w http.ResponseWriter, r *http.Request, params ListRepositoriesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/repositories)
func (_ Unimplemented) CreateRepository(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/repositories/{name})
func (_ Unimplemented) DeleteRepository(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/repositories/{name})
func (_ Unimplemented) ReadRepository(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /api/v1/repositories/{name})
func (_ Unimplemented) PatchRepository(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/repositories/{name})
func (_ Unimplemented) ReplaceRepository(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/resourcesyncs)
func (_ Unimplemented) DeleteResourceSyncs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/resourcesyncs)
func (_ Unimplemented) ListResourceSync(w http.ResponseWriter, r *http.Request, params ListResourceSyncParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /api/v1/resourcesyncs)
func (_ Unimplemented) CreateResourceSync(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (DELETE /api/v1/resourcesyncs/{name})
func (_ Unimplemented) DeleteResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/resourcesyncs/{name})
func (_ Unimplemented) ReadResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PATCH /api/v1/resourcesyncs/{name})
func (_ Unimplemented) PatchResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (PUT /api/v1/resourcesyncs/{name})
func (_ Unimplemented) ReplaceResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/token/request)
func (_ Unimplemented) TokenRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /api/v1/token/validate)
func (_ Unimplemented) TokenValidate(w http.ResponseWriter, r *http.Request, params TokenValidateParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteDevices operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevices(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListDevices operation middleware
func (siw *ServerInterfaceWrapper) ListDevices(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDevicesParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "statusFilter" -------------

	err = runtime.BindQueryParameter("form", true, false, "statusFilter", r.URL.Query(), &params.StatusFilter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "statusFilter", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", r.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListDevices(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateDevice operation middleware
func (siw *ServerInterfaceWrapper) CreateDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateDevice(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteDevice operation middleware
func (siw *ServerInterfaceWrapper) DeleteDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteDevice(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadDevice operation middleware
func (siw *ServerInterfaceWrapper) ReadDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadDevice(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchDevice operation middleware
func (siw *ServerInterfaceWrapper) PatchDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchDevice(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceDevice operation middleware
func (siw *ServerInterfaceWrapper) ReplaceDevice(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceDevice(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RequestConsole operation middleware
func (siw *ServerInterfaceWrapper) RequestConsole(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestConsole(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRenderedDeviceSpec operation middleware
func (siw *ServerInterfaceWrapper) GetRenderedDeviceSpec(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRenderedDeviceSpecParams

	// ------------- Optional query parameter "knownRenderedVersion" -------------

	err = runtime.BindQueryParameter("form", true, false, "knownRenderedVersion", r.URL.Query(), &params.KnownRenderedVersion)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "knownRenderedVersion", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRenderedDeviceSpec(w, r, name, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadDeviceStatus operation middleware
func (siw *ServerInterfaceWrapper) ReadDeviceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadDeviceStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceDeviceStatus operation middleware
func (siw *ServerInterfaceWrapper) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceDeviceStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEnrollmentRequests operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnrollmentRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnrollmentRequests(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEnrollmentRequests operation middleware
func (siw *ServerInterfaceWrapper) ListEnrollmentRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEnrollmentRequestsParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEnrollmentRequests(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEnrollmentRequest operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEnrollmentRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEnrollmentRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEnrollmentRequest(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadEnrollmentRequest operation middleware
func (siw *ServerInterfaceWrapper) ReadEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadEnrollmentRequest(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceEnrollmentRequest operation middleware
func (siw *ServerInterfaceWrapper) ReplaceEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceEnrollmentRequest(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEnrollmentRequestApproval operation middleware
func (siw *ServerInterfaceWrapper) CreateEnrollmentRequestApproval(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEnrollmentRequestApproval(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadEnrollmentRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) ReadEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadEnrollmentRequestStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceEnrollmentRequestStatus operation middleware
func (siw *ServerInterfaceWrapper) ReplaceEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceEnrollmentRequestStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFleets operation middleware
func (siw *ServerInterfaceWrapper) DeleteFleets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFleets(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListFleets operation middleware
func (siw *ServerInterfaceWrapper) ListFleets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFleetsParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", r.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "owner", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListFleets(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateFleet operation middleware
func (siw *ServerInterfaceWrapper) CreateFleet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateFleet(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTemplateVersions operation middleware
func (siw *ServerInterfaceWrapper) DeleteTemplateVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fleet" -------------
	var fleet string

	err = runtime.BindStyledParameterWithOptions("simple", "fleet", chi.URLParam(r, "fleet"), &fleet, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleet", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTemplateVersions(w, r, fleet)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListTemplateVersions operation middleware
func (siw *ServerInterfaceWrapper) ListTemplateVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fleet" -------------
	var fleet string

	err = runtime.BindStyledParameterWithOptions("simple", "fleet", chi.URLParam(r, "fleet"), &fleet, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleet", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTemplateVersionsParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListTemplateVersions(w, r, fleet, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteTemplateVersion operation middleware
func (siw *ServerInterfaceWrapper) DeleteTemplateVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fleet" -------------
	var fleet string

	err = runtime.BindStyledParameterWithOptions("simple", "fleet", chi.URLParam(r, "fleet"), &fleet, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleet", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTemplateVersion(w, r, fleet, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadTemplateVersion operation middleware
func (siw *ServerInterfaceWrapper) ReadTemplateVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "fleet" -------------
	var fleet string

	err = runtime.BindStyledParameterWithOptions("simple", "fleet", chi.URLParam(r, "fleet"), &fleet, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fleet", Err: err})
		return
	}

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadTemplateVersion(w, r, fleet, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteFleet operation middleware
func (siw *ServerInterfaceWrapper) DeleteFleet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteFleet(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadFleet operation middleware
func (siw *ServerInterfaceWrapper) ReadFleet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadFleet(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchFleet operation middleware
func (siw *ServerInterfaceWrapper) PatchFleet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchFleet(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceFleet operation middleware
func (siw *ServerInterfaceWrapper) ReplaceFleet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceFleet(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadFleetStatus operation middleware
func (siw *ServerInterfaceWrapper) ReadFleetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadFleetStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceFleetStatus operation middleware
func (siw *ServerInterfaceWrapper) ReplaceFleetStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceFleetStatus(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRepositories operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepositories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRepositories(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListRepositories operation middleware
func (siw *ServerInterfaceWrapper) ListRepositories(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRepositoriesParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListRepositories(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateRepository(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRepository(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadRepository operation middleware
func (siw *ServerInterfaceWrapper) ReadRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadRepository(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchRepository operation middleware
func (siw *ServerInterfaceWrapper) PatchRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchRepository(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceRepository operation middleware
func (siw *ServerInterfaceWrapper) ReplaceRepository(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceRepository(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteResourceSyncs operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourceSyncs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteResourceSyncs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListResourceSync operation middleware
func (siw *ServerInterfaceWrapper) ListResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListResourceSyncParams

	// ------------- Optional query parameter "continue" -------------

	err = runtime.BindQueryParameter("form", true, false, "continue", r.URL.Query(), &params.Continue)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "continue", Err: err})
		return
	}

	// ------------- Optional query parameter "labelSelector" -------------

	err = runtime.BindQueryParameter("form", true, false, "labelSelector", r.URL.Query(), &params.LabelSelector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "labelSelector", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListResourceSync(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateResourceSync operation middleware
func (siw *ServerInterfaceWrapper) CreateResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateResourceSync(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteResourceSync operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteResourceSync(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReadResourceSync operation middleware
func (siw *ServerInterfaceWrapper) ReadResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadResourceSync(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PatchResourceSync operation middleware
func (siw *ServerInterfaceWrapper) PatchResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchResourceSync(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceResourceSync operation middleware
func (siw *ServerInterfaceWrapper) ReplaceResourceSync(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithOptions("simple", "name", chi.URLParam(r, "name"), &name, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceResourceSync(w, r, name)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TokenRequest operation middleware
func (siw *ServerInterfaceWrapper) TokenRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// TokenValidate operation middleware
func (siw *ServerInterfaceWrapper) TokenValidate(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TokenValidateParams

	headers := r.Header

	// ------------- Optional header parameter "Authentication" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authentication")]; found {
		var Authentication string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Authentication", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "Authentication", valueList[0], &Authentication, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Authentication", Err: err})
			return
		}

		params.Authentication = &Authentication

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TokenValidate(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/devices", wrapper.DeleteDevices)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices", wrapper.ListDevices)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/devices", wrapper.CreateDevice)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/devices/{name}", wrapper.DeleteDevice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{name}", wrapper.ReadDevice)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/devices/{name}", wrapper.PatchDevice)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/devices/{name}", wrapper.ReplaceDevice)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{name}/console", wrapper.RequestConsole)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{name}/rendered", wrapper.GetRenderedDeviceSpec)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/devices/{name}/status", wrapper.ReadDeviceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/devices/{name}/status", wrapper.ReplaceDeviceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/enrollmentrequests", wrapper.DeleteEnrollmentRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/enrollmentrequests", wrapper.ListEnrollmentRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/enrollmentrequests", wrapper.CreateEnrollmentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/enrollmentrequests/{name}", wrapper.DeleteEnrollmentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/enrollmentrequests/{name}", wrapper.ReadEnrollmentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/enrollmentrequests/{name}", wrapper.ReplaceEnrollmentRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/enrollmentrequests/{name}/approval", wrapper.CreateEnrollmentRequestApproval)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/enrollmentrequests/{name}/status", wrapper.ReadEnrollmentRequestStatus)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/enrollmentrequests/{name}/status", wrapper.ReplaceEnrollmentRequestStatus)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/fleets", wrapper.DeleteFleets)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/fleets", wrapper.ListFleets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/fleets", wrapper.CreateFleet)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/fleets/{fleet}/templateversions", wrapper.DeleteTemplateVersions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/fleets/{fleet}/templateversions", wrapper.ListTemplateVersions)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/fleets/{fleet}/templateversions/{name}", wrapper.DeleteTemplateVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/fleets/{fleet}/templateversions/{name}", wrapper.ReadTemplateVersion)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/fleets/{name}", wrapper.DeleteFleet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/fleets/{name}", wrapper.ReadFleet)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/fleets/{name}", wrapper.PatchFleet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/fleets/{name}", wrapper.ReplaceFleet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/fleets/{name}/status", wrapper.ReadFleetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/fleets/{name}/status", wrapper.ReplaceFleetStatus)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/repositories", wrapper.DeleteRepositories)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/repositories", wrapper.ListRepositories)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/repositories", wrapper.CreateRepository)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/repositories/{name}", wrapper.DeleteRepository)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/repositories/{name}", wrapper.ReadRepository)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/repositories/{name}", wrapper.PatchRepository)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/repositories/{name}", wrapper.ReplaceRepository)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/resourcesyncs", wrapper.DeleteResourceSyncs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/resourcesyncs", wrapper.ListResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/resourcesyncs", wrapper.CreateResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/resourcesyncs/{name}", wrapper.DeleteResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/resourcesyncs/{name}", wrapper.ReadResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/api/v1/resourcesyncs/{name}", wrapper.PatchResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/resourcesyncs/{name}", wrapper.ReplaceResourceSync)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/token/request", wrapper.TokenRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/token/validate", wrapper.TokenValidate)
	})

	return r
}

type DeleteDevicesRequestObject struct {
}

type DeleteDevicesResponseObject interface {
	VisitDeleteDevicesResponse(w http.ResponseWriter) error
}

type DeleteDevices200JSONResponse Status

func (response DeleteDevices200JSONResponse) VisitDeleteDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevices401JSONResponse Error

func (response DeleteDevices401JSONResponse) VisitDeleteDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListDevicesRequestObject struct {
	Params ListDevicesParams
}

type ListDevicesResponseObject interface {
	VisitListDevicesResponse(w http.ResponseWriter) error
}

type ListDevices200JSONResponse DeviceList

func (response ListDevices200JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListDevices400JSONResponse Error

func (response ListDevices400JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListDevices401JSONResponse Error

func (response ListDevices401JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListDevices403JSONResponse Error

func (response ListDevices403JSONResponse) VisitListDevicesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateDeviceRequestObject struct {
	Body *CreateDeviceJSONRequestBody
}

type CreateDeviceResponseObject interface {
	VisitCreateDeviceResponse(w http.ResponseWriter) error
}

type CreateDevice201JSONResponse Device

func (response CreateDevice201JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateDevice400JSONResponse Error

func (response CreateDevice400JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateDevice401JSONResponse Error

func (response CreateDevice401JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateDevice409JSONResponse Error

func (response CreateDevice409JSONResponse) VisitCreateDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDeviceRequestObject struct {
	Name string `json:"name"`
}

type DeleteDeviceResponseObject interface {
	VisitDeleteDeviceResponse(w http.ResponseWriter) error
}

type DeleteDevice200JSONResponse Device

func (response DeleteDevice200JSONResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevice401JSONResponse Error

func (response DeleteDevice401JSONResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteDevice404JSONResponse Error

func (response DeleteDevice404JSONResponse) VisitDeleteDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadDeviceRequestObject struct {
	Name string `json:"name"`
}

type ReadDeviceResponseObject interface {
	VisitReadDeviceResponse(w http.ResponseWriter) error
}

type ReadDevice200JSONResponse Device

func (response ReadDevice200JSONResponse) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadDevice401JSONResponse Error

func (response ReadDevice401JSONResponse) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadDevice404JSONResponse Error

func (response ReadDevice404JSONResponse) VisitReadDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchDeviceRequestObject struct {
	Name string `json:"name"`
	Body *PatchDeviceApplicationJSONPatchPlusJSONRequestBody
}

type PatchDeviceResponseObject interface {
	VisitPatchDeviceResponse(w http.ResponseWriter) error
}

type PatchDevice200JSONResponse Device

func (response PatchDevice200JSONResponse) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevice400JSONResponse Error

func (response PatchDevice400JSONResponse) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevice401JSONResponse Error

func (response PatchDevice401JSONResponse) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchDevice404JSONResponse Error

func (response PatchDevice404JSONResponse) VisitPatchDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceDeviceJSONRequestBody
}

type ReplaceDeviceResponseObject interface {
	VisitReplaceDeviceResponse(w http.ResponseWriter) error
}

type ReplaceDevice200JSONResponse Device

func (response ReplaceDevice200JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice201JSONResponse Device

func (response ReplaceDevice201JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice400JSONResponse Error

func (response ReplaceDevice400JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice401JSONResponse Error

func (response ReplaceDevice401JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice404JSONResponse Error

func (response ReplaceDevice404JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDevice409JSONResponse Error

func (response ReplaceDevice409JSONResponse) VisitReplaceDeviceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RequestConsoleRequestObject struct {
	Name string `json:"name"`
}

type RequestConsoleResponseObject interface {
	VisitRequestConsoleResponse(w http.ResponseWriter) error
}

type RequestConsole200JSONResponse DeviceConsole

func (response RequestConsole200JSONResponse) VisitRequestConsoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type RequestConsole401JSONResponse Error

func (response RequestConsole401JSONResponse) VisitRequestConsoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RequestConsole404JSONResponse Error

func (response RequestConsole404JSONResponse) VisitRequestConsoleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRenderedDeviceSpecRequestObject struct {
	Name   string `json:"name"`
	Params GetRenderedDeviceSpecParams
}

type GetRenderedDeviceSpecResponseObject interface {
	VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error
}

type GetRenderedDeviceSpec200JSONResponse RenderedDeviceSpec

func (response GetRenderedDeviceSpec200JSONResponse) VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRenderedDeviceSpec204Response struct {
}

func (response GetRenderedDeviceSpec204Response) VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type GetRenderedDeviceSpec401JSONResponse Error

func (response GetRenderedDeviceSpec401JSONResponse) VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRenderedDeviceSpec404JSONResponse Error

func (response GetRenderedDeviceSpec404JSONResponse) VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRenderedDeviceSpec409JSONResponse Error

func (response GetRenderedDeviceSpec409JSONResponse) VisitGetRenderedDeviceSpecResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadDeviceStatusRequestObject struct {
	Name string `json:"name"`
}

type ReadDeviceStatusResponseObject interface {
	VisitReadDeviceStatusResponse(w http.ResponseWriter) error
}

type ReadDeviceStatus200JSONResponse Device

func (response ReadDeviceStatus200JSONResponse) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadDeviceStatus401JSONResponse Error

func (response ReadDeviceStatus401JSONResponse) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadDeviceStatus404JSONResponse Error

func (response ReadDeviceStatus404JSONResponse) VisitReadDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatusRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceDeviceStatusJSONRequestBody
}

type ReplaceDeviceStatusResponseObject interface {
	VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error
}

type ReplaceDeviceStatus200JSONResponse Device

func (response ReplaceDeviceStatus200JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatus400JSONResponse Error

func (response ReplaceDeviceStatus400JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatus401JSONResponse Error

func (response ReplaceDeviceStatus401JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceDeviceStatus404JSONResponse Error

func (response ReplaceDeviceStatus404JSONResponse) VisitReplaceDeviceStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnrollmentRequestsRequestObject struct {
}

type DeleteEnrollmentRequestsResponseObject interface {
	VisitDeleteEnrollmentRequestsResponse(w http.ResponseWriter) error
}

type DeleteEnrollmentRequests200JSONResponse Status

func (response DeleteEnrollmentRequests200JSONResponse) VisitDeleteEnrollmentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnrollmentRequests401JSONResponse Error

func (response DeleteEnrollmentRequests401JSONResponse) VisitDeleteEnrollmentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListEnrollmentRequestsRequestObject struct {
	Params ListEnrollmentRequestsParams
}

type ListEnrollmentRequestsResponseObject interface {
	VisitListEnrollmentRequestsResponse(w http.ResponseWriter) error
}

type ListEnrollmentRequests200JSONResponse EnrollmentRequestList

func (response ListEnrollmentRequests200JSONResponse) VisitListEnrollmentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListEnrollmentRequests400JSONResponse Error

func (response ListEnrollmentRequests400JSONResponse) VisitListEnrollmentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListEnrollmentRequests401JSONResponse Error

func (response ListEnrollmentRequests401JSONResponse) VisitListEnrollmentRequestsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestRequestObject struct {
	Body *CreateEnrollmentRequestJSONRequestBody
}

type CreateEnrollmentRequestResponseObject interface {
	VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error
}

type CreateEnrollmentRequest201JSONResponse EnrollmentRequest

func (response CreateEnrollmentRequest201JSONResponse) VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequest208JSONResponse EnrollmentRequest

func (response CreateEnrollmentRequest208JSONResponse) VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(208)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequest400JSONResponse Error

func (response CreateEnrollmentRequest400JSONResponse) VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequest401JSONResponse Error

func (response CreateEnrollmentRequest401JSONResponse) VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequest409JSONResponse Error

func (response CreateEnrollmentRequest409JSONResponse) VisitCreateEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnrollmentRequestRequestObject struct {
	Name string `json:"name"`
}

type DeleteEnrollmentRequestResponseObject interface {
	VisitDeleteEnrollmentRequestResponse(w http.ResponseWriter) error
}

type DeleteEnrollmentRequest200JSONResponse EnrollmentRequest

func (response DeleteEnrollmentRequest200JSONResponse) VisitDeleteEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnrollmentRequest401JSONResponse Error

func (response DeleteEnrollmentRequest401JSONResponse) VisitDeleteEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEnrollmentRequest404JSONResponse Error

func (response DeleteEnrollmentRequest404JSONResponse) VisitDeleteEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequestRequestObject struct {
	Name string `json:"name"`
}

type ReadEnrollmentRequestResponseObject interface {
	VisitReadEnrollmentRequestResponse(w http.ResponseWriter) error
}

type ReadEnrollmentRequest200JSONResponse EnrollmentRequest

func (response ReadEnrollmentRequest200JSONResponse) VisitReadEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequest401JSONResponse Error

func (response ReadEnrollmentRequest401JSONResponse) VisitReadEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequest404JSONResponse Error

func (response ReadEnrollmentRequest404JSONResponse) VisitReadEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequestRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceEnrollmentRequestJSONRequestBody
}

type ReplaceEnrollmentRequestResponseObject interface {
	VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error
}

type ReplaceEnrollmentRequest200JSONResponse EnrollmentRequest

func (response ReplaceEnrollmentRequest200JSONResponse) VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequest201JSONResponse EnrollmentRequest

func (response ReplaceEnrollmentRequest201JSONResponse) VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequest400JSONResponse Error

func (response ReplaceEnrollmentRequest400JSONResponse) VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequest401JSONResponse Error

func (response ReplaceEnrollmentRequest401JSONResponse) VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequest404JSONResponse Error

func (response ReplaceEnrollmentRequest404JSONResponse) VisitReplaceEnrollmentRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestApprovalRequestObject struct {
	Name string `json:"name"`
	Body *CreateEnrollmentRequestApprovalJSONRequestBody
}

type CreateEnrollmentRequestApprovalResponseObject interface {
	VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error
}

type CreateEnrollmentRequestApproval200JSONResponse EnrollmentRequestApproval

func (response CreateEnrollmentRequestApproval200JSONResponse) VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestApproval400JSONResponse Error

func (response CreateEnrollmentRequestApproval400JSONResponse) VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestApproval401JSONResponse Error

func (response CreateEnrollmentRequestApproval401JSONResponse) VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestApproval404JSONResponse Error

func (response CreateEnrollmentRequestApproval404JSONResponse) VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateEnrollmentRequestApproval422JSONResponse Error

func (response CreateEnrollmentRequestApproval422JSONResponse) VisitCreateEnrollmentRequestApprovalResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequestStatusRequestObject struct {
	Name string `json:"name"`
}

type ReadEnrollmentRequestStatusResponseObject interface {
	VisitReadEnrollmentRequestStatusResponse(w http.ResponseWriter) error
}

type ReadEnrollmentRequestStatus200JSONResponse EnrollmentRequest

func (response ReadEnrollmentRequestStatus200JSONResponse) VisitReadEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequestStatus401JSONResponse Error

func (response ReadEnrollmentRequestStatus401JSONResponse) VisitReadEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadEnrollmentRequestStatus404JSONResponse Error

func (response ReadEnrollmentRequestStatus404JSONResponse) VisitReadEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequestStatusRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceEnrollmentRequestStatusJSONRequestBody
}

type ReplaceEnrollmentRequestStatusResponseObject interface {
	VisitReplaceEnrollmentRequestStatusResponse(w http.ResponseWriter) error
}

type ReplaceEnrollmentRequestStatus200JSONResponse EnrollmentRequest

func (response ReplaceEnrollmentRequestStatus200JSONResponse) VisitReplaceEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequestStatus401JSONResponse Error

func (response ReplaceEnrollmentRequestStatus401JSONResponse) VisitReplaceEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceEnrollmentRequestStatus404JSONResponse Error

func (response ReplaceEnrollmentRequestStatus404JSONResponse) VisitReplaceEnrollmentRequestStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleetsRequestObject struct {
}

type DeleteFleetsResponseObject interface {
	VisitDeleteFleetsResponse(w http.ResponseWriter) error
}

type DeleteFleets200JSONResponse Status

func (response DeleteFleets200JSONResponse) VisitDeleteFleetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleets401JSONResponse Error

func (response DeleteFleets401JSONResponse) VisitDeleteFleetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListFleetsRequestObject struct {
	Params ListFleetsParams
}

type ListFleetsResponseObject interface {
	VisitListFleetsResponse(w http.ResponseWriter) error
}

type ListFleets200JSONResponse FleetList

func (response ListFleets200JSONResponse) VisitListFleetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListFleets400JSONResponse Error

func (response ListFleets400JSONResponse) VisitListFleetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListFleets401JSONResponse Error

func (response ListFleets401JSONResponse) VisitListFleetsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFleetRequestObject struct {
	Body *CreateFleetJSONRequestBody
}

type CreateFleetResponseObject interface {
	VisitCreateFleetResponse(w http.ResponseWriter) error
}

type CreateFleet201JSONResponse Fleet

func (response CreateFleet201JSONResponse) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateFleet400JSONResponse Error

func (response CreateFleet400JSONResponse) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateFleet401JSONResponse Error

func (response CreateFleet401JSONResponse) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateFleet409JSONResponse Error

func (response CreateFleet409JSONResponse) VisitCreateFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTemplateVersionsRequestObject struct {
	Fleet string `json:"fleet"`
}

type DeleteTemplateVersionsResponseObject interface {
	VisitDeleteTemplateVersionsResponse(w http.ResponseWriter) error
}

type DeleteTemplateVersions200JSONResponse Status

func (response DeleteTemplateVersions200JSONResponse) VisitDeleteTemplateVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTemplateVersions401JSONResponse Error

func (response DeleteTemplateVersions401JSONResponse) VisitDeleteTemplateVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListTemplateVersionsRequestObject struct {
	Fleet  string `json:"fleet"`
	Params ListTemplateVersionsParams
}

type ListTemplateVersionsResponseObject interface {
	VisitListTemplateVersionsResponse(w http.ResponseWriter) error
}

type ListTemplateVersions200JSONResponse TemplateVersionList

func (response ListTemplateVersions200JSONResponse) VisitListTemplateVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTemplateVersions400JSONResponse Error

func (response ListTemplateVersions400JSONResponse) VisitListTemplateVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListTemplateVersions401JSONResponse Error

func (response ListTemplateVersions401JSONResponse) VisitListTemplateVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTemplateVersionRequestObject struct {
	Fleet string `json:"fleet"`
	Name  string `json:"name"`
}

type DeleteTemplateVersionResponseObject interface {
	VisitDeleteTemplateVersionResponse(w http.ResponseWriter) error
}

type DeleteTemplateVersion200JSONResponse TemplateVersion

func (response DeleteTemplateVersion200JSONResponse) VisitDeleteTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTemplateVersion401JSONResponse Error

func (response DeleteTemplateVersion401JSONResponse) VisitDeleteTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTemplateVersion404JSONResponse Error

func (response DeleteTemplateVersion404JSONResponse) VisitDeleteTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadTemplateVersionRequestObject struct {
	Fleet string `json:"fleet"`
	Name  string `json:"name"`
}

type ReadTemplateVersionResponseObject interface {
	VisitReadTemplateVersionResponse(w http.ResponseWriter) error
}

type ReadTemplateVersion200JSONResponse TemplateVersion

func (response ReadTemplateVersion200JSONResponse) VisitReadTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadTemplateVersion401JSONResponse Error

func (response ReadTemplateVersion401JSONResponse) VisitReadTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadTemplateVersion404JSONResponse Error

func (response ReadTemplateVersion404JSONResponse) VisitReadTemplateVersionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleetRequestObject struct {
	Name string `json:"name"`
}

type DeleteFleetResponseObject interface {
	VisitDeleteFleetResponse(w http.ResponseWriter) error
}

type DeleteFleet200JSONResponse Fleet

func (response DeleteFleet200JSONResponse) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleet401JSONResponse Error

func (response DeleteFleet401JSONResponse) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleet404JSONResponse Error

func (response DeleteFleet404JSONResponse) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteFleet409JSONResponse Error

func (response DeleteFleet409JSONResponse) VisitDeleteFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleetRequestObject struct {
	Name string `json:"name"`
}

type ReadFleetResponseObject interface {
	VisitReadFleetResponse(w http.ResponseWriter) error
}

type ReadFleet200JSONResponse Fleet

func (response ReadFleet200JSONResponse) VisitReadFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleet401JSONResponse Error

func (response ReadFleet401JSONResponse) VisitReadFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleet404JSONResponse Error

func (response ReadFleet404JSONResponse) VisitReadFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchFleetRequestObject struct {
	Name string `json:"name"`
	Body *PatchFleetApplicationJSONPatchPlusJSONRequestBody
}

type PatchFleetResponseObject interface {
	VisitPatchFleetResponse(w http.ResponseWriter) error
}

type PatchFleet200JSONResponse Fleet

func (response PatchFleet200JSONResponse) VisitPatchFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchFleet400JSONResponse Error

func (response PatchFleet400JSONResponse) VisitPatchFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchFleet401JSONResponse Error

func (response PatchFleet401JSONResponse) VisitPatchFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchFleet404JSONResponse Error

func (response PatchFleet404JSONResponse) VisitPatchFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleetRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceFleetJSONRequestBody
}

type ReplaceFleetResponseObject interface {
	VisitReplaceFleetResponse(w http.ResponseWriter) error
}

type ReplaceFleet200JSONResponse Fleet

func (response ReplaceFleet200JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleet201JSONResponse Fleet

func (response ReplaceFleet201JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleet400JSONResponse Error

func (response ReplaceFleet400JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleet401JSONResponse Error

func (response ReplaceFleet401JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleet404JSONResponse Error

func (response ReplaceFleet404JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleet409JSONResponse Error

func (response ReplaceFleet409JSONResponse) VisitReplaceFleetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleetStatusRequestObject struct {
	Name string `json:"name"`
}

type ReadFleetStatusResponseObject interface {
	VisitReadFleetStatusResponse(w http.ResponseWriter) error
}

type ReadFleetStatus200JSONResponse Fleet

func (response ReadFleetStatus200JSONResponse) VisitReadFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleetStatus401JSONResponse Error

func (response ReadFleetStatus401JSONResponse) VisitReadFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadFleetStatus404JSONResponse Error

func (response ReadFleetStatus404JSONResponse) VisitReadFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleetStatusRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceFleetStatusJSONRequestBody
}

type ReplaceFleetStatusResponseObject interface {
	VisitReplaceFleetStatusResponse(w http.ResponseWriter) error
}

type ReplaceFleetStatus200JSONResponse Fleet

func (response ReplaceFleetStatus200JSONResponse) VisitReplaceFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleetStatus401JSONResponse Error

func (response ReplaceFleetStatus401JSONResponse) VisitReplaceFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceFleetStatus404JSONResponse Error

func (response ReplaceFleetStatus404JSONResponse) VisitReplaceFleetStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRepositoriesRequestObject struct {
}

type DeleteRepositoriesResponseObject interface {
	VisitDeleteRepositoriesResponse(w http.ResponseWriter) error
}

type DeleteRepositories200JSONResponse Status

func (response DeleteRepositories200JSONResponse) VisitDeleteRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRepositories401JSONResponse Error

func (response DeleteRepositories401JSONResponse) VisitDeleteRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListRepositoriesRequestObject struct {
	Params ListRepositoriesParams
}

type ListRepositoriesResponseObject interface {
	VisitListRepositoriesResponse(w http.ResponseWriter) error
}

type ListRepositories200JSONResponse RepositoryList

func (response ListRepositories200JSONResponse) VisitListRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRepositories400JSONResponse Error

func (response ListRepositories400JSONResponse) VisitListRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRepositories401JSONResponse Error

func (response ListRepositories401JSONResponse) VisitListRepositoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRepositoryRequestObject struct {
	Body *CreateRepositoryJSONRequestBody
}

type CreateRepositoryResponseObject interface {
	VisitCreateRepositoryResponse(w http.ResponseWriter) error
}

type CreateRepository201JSONResponse Repository

func (response CreateRepository201JSONResponse) VisitCreateRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRepository400JSONResponse Error

func (response CreateRepository400JSONResponse) VisitCreateRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRepository401JSONResponse Error

func (response CreateRepository401JSONResponse) VisitCreateRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRepository409JSONResponse Error

func (response CreateRepository409JSONResponse) VisitCreateRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRepositoryRequestObject struct {
	Name string `json:"name"`
}

type DeleteRepositoryResponseObject interface {
	VisitDeleteRepositoryResponse(w http.ResponseWriter) error
}

type DeleteRepository200JSONResponse Repository

func (response DeleteRepository200JSONResponse) VisitDeleteRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRepository401JSONResponse Error

func (response DeleteRepository401JSONResponse) VisitDeleteRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRepository404JSONResponse Error

func (response DeleteRepository404JSONResponse) VisitDeleteRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadRepositoryRequestObject struct {
	Name string `json:"name"`
}

type ReadRepositoryResponseObject interface {
	VisitReadRepositoryResponse(w http.ResponseWriter) error
}

type ReadRepository200JSONResponse Repository

func (response ReadRepository200JSONResponse) VisitReadRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadRepository401JSONResponse Error

func (response ReadRepository401JSONResponse) VisitReadRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadRepository404JSONResponse Error

func (response ReadRepository404JSONResponse) VisitReadRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchRepositoryRequestObject struct {
	Name string `json:"name"`
	Body *PatchRepositoryApplicationJSONPatchPlusJSONRequestBody
}

type PatchRepositoryResponseObject interface {
	VisitPatchRepositoryResponse(w http.ResponseWriter) error
}

type PatchRepository200JSONResponse Repository

func (response PatchRepository200JSONResponse) VisitPatchRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchRepository400JSONResponse Error

func (response PatchRepository400JSONResponse) VisitPatchRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchRepository401JSONResponse Error

func (response PatchRepository401JSONResponse) VisitPatchRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchRepository404JSONResponse Error

func (response PatchRepository404JSONResponse) VisitPatchRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceRepositoryRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceRepositoryJSONRequestBody
}

type ReplaceRepositoryResponseObject interface {
	VisitReplaceRepositoryResponse(w http.ResponseWriter) error
}

type ReplaceRepository200JSONResponse Repository

func (response ReplaceRepository200JSONResponse) VisitReplaceRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceRepository201JSONResponse Repository

func (response ReplaceRepository201JSONResponse) VisitReplaceRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceRepository400JSONResponse Error

func (response ReplaceRepository400JSONResponse) VisitReplaceRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceRepository401JSONResponse Error

func (response ReplaceRepository401JSONResponse) VisitReplaceRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceRepository404JSONResponse Error

func (response ReplaceRepository404JSONResponse) VisitReplaceRepositoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteResourceSyncsRequestObject struct {
}

type DeleteResourceSyncsResponseObject interface {
	VisitDeleteResourceSyncsResponse(w http.ResponseWriter) error
}

type DeleteResourceSyncs200JSONResponse Status

func (response DeleteResourceSyncs200JSONResponse) VisitDeleteResourceSyncsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteResourceSyncs401JSONResponse Error

func (response DeleteResourceSyncs401JSONResponse) VisitDeleteResourceSyncsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListResourceSyncRequestObject struct {
	Params ListResourceSyncParams
}

type ListResourceSyncResponseObject interface {
	VisitListResourceSyncResponse(w http.ResponseWriter) error
}

type ListResourceSync200JSONResponse ResourceSyncList

func (response ListResourceSync200JSONResponse) VisitListResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListResourceSync400JSONResponse Error

func (response ListResourceSync400JSONResponse) VisitListResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListResourceSync401JSONResponse Error

func (response ListResourceSync401JSONResponse) VisitListResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourceSyncRequestObject struct {
	Body *CreateResourceSyncJSONRequestBody
}

type CreateResourceSyncResponseObject interface {
	VisitCreateResourceSyncResponse(w http.ResponseWriter) error
}

type CreateResourceSync201JSONResponse ResourceSync

func (response CreateResourceSync201JSONResponse) VisitCreateResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourceSync400JSONResponse Error

func (response CreateResourceSync400JSONResponse) VisitCreateResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourceSync401JSONResponse Error

func (response CreateResourceSync401JSONResponse) VisitCreateResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateResourceSync409JSONResponse Error

func (response CreateResourceSync409JSONResponse) VisitCreateResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteResourceSyncRequestObject struct {
	Name string `json:"name"`
}

type DeleteResourceSyncResponseObject interface {
	VisitDeleteResourceSyncResponse(w http.ResponseWriter) error
}

type DeleteResourceSync200JSONResponse ResourceSync

func (response DeleteResourceSync200JSONResponse) VisitDeleteResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteResourceSync401JSONResponse Error

func (response DeleteResourceSync401JSONResponse) VisitDeleteResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteResourceSync404JSONResponse Error

func (response DeleteResourceSync404JSONResponse) VisitDeleteResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReadResourceSyncRequestObject struct {
	Name string `json:"name"`
}

type ReadResourceSyncResponseObject interface {
	VisitReadResourceSyncResponse(w http.ResponseWriter) error
}

type ReadResourceSync200JSONResponse ResourceSync

func (response ReadResourceSync200JSONResponse) VisitReadResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadResourceSync401JSONResponse Error

func (response ReadResourceSync401JSONResponse) VisitReadResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReadResourceSync404JSONResponse Error

func (response ReadResourceSync404JSONResponse) VisitReadResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchResourceSyncRequestObject struct {
	Name string `json:"name"`
	Body *PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody
}

type PatchResourceSyncResponseObject interface {
	VisitPatchResourceSyncResponse(w http.ResponseWriter) error
}

type PatchResourceSync200JSONResponse ResourceSync

func (response PatchResourceSync200JSONResponse) VisitPatchResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchResourceSync400JSONResponse Error

func (response PatchResourceSync400JSONResponse) VisitPatchResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchResourceSync401JSONResponse Error

func (response PatchResourceSync401JSONResponse) VisitPatchResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchResourceSync404JSONResponse Error

func (response PatchResourceSync404JSONResponse) VisitPatchResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceResourceSyncRequestObject struct {
	Name string `json:"name"`
	Body *ReplaceResourceSyncJSONRequestBody
}

type ReplaceResourceSyncResponseObject interface {
	VisitReplaceResourceSyncResponse(w http.ResponseWriter) error
}

type ReplaceResourceSync200JSONResponse ResourceSync

func (response ReplaceResourceSync200JSONResponse) VisitReplaceResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceResourceSync201JSONResponse ResourceSync

func (response ReplaceResourceSync201JSONResponse) VisitReplaceResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceResourceSync400JSONResponse Error

func (response ReplaceResourceSync400JSONResponse) VisitReplaceResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceResourceSync401JSONResponse Error

func (response ReplaceResourceSync401JSONResponse) VisitReplaceResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ReplaceResourceSync404JSONResponse Error

func (response ReplaceResourceSync404JSONResponse) VisitReplaceResourceSyncResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type TokenRequestRequestObject struct {
}

type TokenRequestResponseObject interface {
	VisitTokenRequestResponse(w http.ResponseWriter) error
}

type TokenRequest301ResponseHeaders struct {
	Location string
}

type TokenRequest301Response struct {
	Headers TokenRequest301ResponseHeaders
}

func (response TokenRequest301Response) VisitTokenRequestResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type TokenRequest418Response struct {
}

func (response TokenRequest418Response) VisitTokenRequestResponse(w http.ResponseWriter) error {
	w.WriteHeader(418)
	return nil
}

type TokenValidateRequestObject struct {
	Params TokenValidateParams
}

type TokenValidateResponseObject interface {
	VisitTokenValidateResponse(w http.ResponseWriter) error
}

type TokenValidate200Response struct {
}

func (response TokenValidate200Response) VisitTokenValidateResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type TokenValidate401Response struct {
}

func (response TokenValidate401Response) VisitTokenValidateResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type TokenValidate418Response struct {
}

func (response TokenValidate418Response) VisitTokenValidateResponse(w http.ResponseWriter) error {
	w.WriteHeader(418)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (DELETE /api/v1/devices)
	DeleteDevices(ctx context.Context, request DeleteDevicesRequestObject) (DeleteDevicesResponseObject, error)

	// (GET /api/v1/devices)
	ListDevices(ctx context.Context, request ListDevicesRequestObject) (ListDevicesResponseObject, error)

	// (POST /api/v1/devices)
	CreateDevice(ctx context.Context, request CreateDeviceRequestObject) (CreateDeviceResponseObject, error)

	// (DELETE /api/v1/devices/{name})
	DeleteDevice(ctx context.Context, request DeleteDeviceRequestObject) (DeleteDeviceResponseObject, error)

	// (GET /api/v1/devices/{name})
	ReadDevice(ctx context.Context, request ReadDeviceRequestObject) (ReadDeviceResponseObject, error)

	// (PATCH /api/v1/devices/{name})
	PatchDevice(ctx context.Context, request PatchDeviceRequestObject) (PatchDeviceResponseObject, error)

	// (PUT /api/v1/devices/{name})
	ReplaceDevice(ctx context.Context, request ReplaceDeviceRequestObject) (ReplaceDeviceResponseObject, error)

	// (GET /api/v1/devices/{name}/console)
	RequestConsole(ctx context.Context, request RequestConsoleRequestObject) (RequestConsoleResponseObject, error)

	// (GET /api/v1/devices/{name}/rendered)
	GetRenderedDeviceSpec(ctx context.Context, request GetRenderedDeviceSpecRequestObject) (GetRenderedDeviceSpecResponseObject, error)

	// (GET /api/v1/devices/{name}/status)
	ReadDeviceStatus(ctx context.Context, request ReadDeviceStatusRequestObject) (ReadDeviceStatusResponseObject, error)

	// (PUT /api/v1/devices/{name}/status)
	ReplaceDeviceStatus(ctx context.Context, request ReplaceDeviceStatusRequestObject) (ReplaceDeviceStatusResponseObject, error)

	// (DELETE /api/v1/enrollmentrequests)
	DeleteEnrollmentRequests(ctx context.Context, request DeleteEnrollmentRequestsRequestObject) (DeleteEnrollmentRequestsResponseObject, error)

	// (GET /api/v1/enrollmentrequests)
	ListEnrollmentRequests(ctx context.Context, request ListEnrollmentRequestsRequestObject) (ListEnrollmentRequestsResponseObject, error)

	// (POST /api/v1/enrollmentrequests)
	CreateEnrollmentRequest(ctx context.Context, request CreateEnrollmentRequestRequestObject) (CreateEnrollmentRequestResponseObject, error)

	// (DELETE /api/v1/enrollmentrequests/{name})
	DeleteEnrollmentRequest(ctx context.Context, request DeleteEnrollmentRequestRequestObject) (DeleteEnrollmentRequestResponseObject, error)

	// (GET /api/v1/enrollmentrequests/{name})
	ReadEnrollmentRequest(ctx context.Context, request ReadEnrollmentRequestRequestObject) (ReadEnrollmentRequestResponseObject, error)

	// (PUT /api/v1/enrollmentrequests/{name})
	ReplaceEnrollmentRequest(ctx context.Context, request ReplaceEnrollmentRequestRequestObject) (ReplaceEnrollmentRequestResponseObject, error)

	// (POST /api/v1/enrollmentrequests/{name}/approval)
	CreateEnrollmentRequestApproval(ctx context.Context, request CreateEnrollmentRequestApprovalRequestObject) (CreateEnrollmentRequestApprovalResponseObject, error)

	// (GET /api/v1/enrollmentrequests/{name}/status)
	ReadEnrollmentRequestStatus(ctx context.Context, request ReadEnrollmentRequestStatusRequestObject) (ReadEnrollmentRequestStatusResponseObject, error)

	// (PUT /api/v1/enrollmentrequests/{name}/status)
	ReplaceEnrollmentRequestStatus(ctx context.Context, request ReplaceEnrollmentRequestStatusRequestObject) (ReplaceEnrollmentRequestStatusResponseObject, error)

	// (DELETE /api/v1/fleets)
	DeleteFleets(ctx context.Context, request DeleteFleetsRequestObject) (DeleteFleetsResponseObject, error)

	// (GET /api/v1/fleets)
	ListFleets(ctx context.Context, request ListFleetsRequestObject) (ListFleetsResponseObject, error)

	// (POST /api/v1/fleets)
	CreateFleet(ctx context.Context, request CreateFleetRequestObject) (CreateFleetResponseObject, error)

	// (DELETE /api/v1/fleets/{fleet}/templateversions)
	DeleteTemplateVersions(ctx context.Context, request DeleteTemplateVersionsRequestObject) (DeleteTemplateVersionsResponseObject, error)

	// (GET /api/v1/fleets/{fleet}/templateversions)
	ListTemplateVersions(ctx context.Context, request ListTemplateVersionsRequestObject) (ListTemplateVersionsResponseObject, error)

	// (DELETE /api/v1/fleets/{fleet}/templateversions/{name})
	DeleteTemplateVersion(ctx context.Context, request DeleteTemplateVersionRequestObject) (DeleteTemplateVersionResponseObject, error)

	// (GET /api/v1/fleets/{fleet}/templateversions/{name})
	ReadTemplateVersion(ctx context.Context, request ReadTemplateVersionRequestObject) (ReadTemplateVersionResponseObject, error)

	// (DELETE /api/v1/fleets/{name})
	DeleteFleet(ctx context.Context, request DeleteFleetRequestObject) (DeleteFleetResponseObject, error)

	// (GET /api/v1/fleets/{name})
	ReadFleet(ctx context.Context, request ReadFleetRequestObject) (ReadFleetResponseObject, error)

	// (PATCH /api/v1/fleets/{name})
	PatchFleet(ctx context.Context, request PatchFleetRequestObject) (PatchFleetResponseObject, error)

	// (PUT /api/v1/fleets/{name})
	ReplaceFleet(ctx context.Context, request ReplaceFleetRequestObject) (ReplaceFleetResponseObject, error)

	// (GET /api/v1/fleets/{name}/status)
	ReadFleetStatus(ctx context.Context, request ReadFleetStatusRequestObject) (ReadFleetStatusResponseObject, error)

	// (PUT /api/v1/fleets/{name}/status)
	ReplaceFleetStatus(ctx context.Context, request ReplaceFleetStatusRequestObject) (ReplaceFleetStatusResponseObject, error)

	// (DELETE /api/v1/repositories)
	DeleteRepositories(ctx context.Context, request DeleteRepositoriesRequestObject) (DeleteRepositoriesResponseObject, error)

	// (GET /api/v1/repositories)
	ListRepositories(ctx context.Context, request ListRepositoriesRequestObject) (ListRepositoriesResponseObject, error)

	// (POST /api/v1/repositories)
	CreateRepository(ctx context.Context, request CreateRepositoryRequestObject) (CreateRepositoryResponseObject, error)

	// (DELETE /api/v1/repositories/{name})
	DeleteRepository(ctx context.Context, request DeleteRepositoryRequestObject) (DeleteRepositoryResponseObject, error)

	// (GET /api/v1/repositories/{name})
	ReadRepository(ctx context.Context, request ReadRepositoryRequestObject) (ReadRepositoryResponseObject, error)

	// (PATCH /api/v1/repositories/{name})
	PatchRepository(ctx context.Context, request PatchRepositoryRequestObject) (PatchRepositoryResponseObject, error)

	// (PUT /api/v1/repositories/{name})
	ReplaceRepository(ctx context.Context, request ReplaceRepositoryRequestObject) (ReplaceRepositoryResponseObject, error)

	// (DELETE /api/v1/resourcesyncs)
	DeleteResourceSyncs(ctx context.Context, request DeleteResourceSyncsRequestObject) (DeleteResourceSyncsResponseObject, error)

	// (GET /api/v1/resourcesyncs)
	ListResourceSync(ctx context.Context, request ListResourceSyncRequestObject) (ListResourceSyncResponseObject, error)

	// (POST /api/v1/resourcesyncs)
	CreateResourceSync(ctx context.Context, request CreateResourceSyncRequestObject) (CreateResourceSyncResponseObject, error)

	// (DELETE /api/v1/resourcesyncs/{name})
	DeleteResourceSync(ctx context.Context, request DeleteResourceSyncRequestObject) (DeleteResourceSyncResponseObject, error)

	// (GET /api/v1/resourcesyncs/{name})
	ReadResourceSync(ctx context.Context, request ReadResourceSyncRequestObject) (ReadResourceSyncResponseObject, error)

	// (PATCH /api/v1/resourcesyncs/{name})
	PatchResourceSync(ctx context.Context, request PatchResourceSyncRequestObject) (PatchResourceSyncResponseObject, error)

	// (PUT /api/v1/resourcesyncs/{name})
	ReplaceResourceSync(ctx context.Context, request ReplaceResourceSyncRequestObject) (ReplaceResourceSyncResponseObject, error)

	// (GET /api/v1/token/request)
	TokenRequest(ctx context.Context, request TokenRequestRequestObject) (TokenRequestResponseObject, error)

	// (GET /api/v1/token/validate)
	TokenValidate(ctx context.Context, request TokenValidateRequestObject) (TokenValidateResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DeleteDevices operation middleware
func (sh *strictHandler) DeleteDevices(w http.ResponseWriter, r *http.Request) {
	var request DeleteDevicesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevices(ctx, request.(DeleteDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDevicesResponseObject); ok {
		if err := validResponse.VisitDeleteDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListDevices operation middleware
func (sh *strictHandler) ListDevices(w http.ResponseWriter, r *http.Request, params ListDevicesParams) {
	var request ListDevicesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListDevices(ctx, request.(ListDevicesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListDevices")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListDevicesResponseObject); ok {
		if err := validResponse.VisitListDevicesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateDevice operation middleware
func (sh *strictHandler) CreateDevice(w http.ResponseWriter, r *http.Request) {
	var request CreateDeviceRequestObject

	var body CreateDeviceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateDevice(ctx, request.(CreateDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateDeviceResponseObject); ok {
		if err := validResponse.VisitCreateDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteDevice operation middleware
func (sh *strictHandler) DeleteDevice(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteDeviceRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteDevice(ctx, request.(DeleteDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteDeviceResponseObject); ok {
		if err := validResponse.VisitDeleteDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadDevice operation middleware
func (sh *strictHandler) ReadDevice(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadDeviceRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadDevice(ctx, request.(ReadDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadDeviceResponseObject); ok {
		if err := validResponse.VisitReadDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchDevice operation middleware
func (sh *strictHandler) PatchDevice(w http.ResponseWriter, r *http.Request, name string) {
	var request PatchDeviceRequestObject

	request.Name = name

	var body PatchDeviceApplicationJSONPatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchDevice(ctx, request.(PatchDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchDeviceResponseObject); ok {
		if err := validResponse.VisitPatchDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceDevice operation middleware
func (sh *strictHandler) ReplaceDevice(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceDeviceRequestObject

	request.Name = name

	var body ReplaceDeviceJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceDevice(ctx, request.(ReplaceDeviceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceDevice")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceDeviceResponseObject); ok {
		if err := validResponse.VisitReplaceDeviceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RequestConsole operation middleware
func (sh *strictHandler) RequestConsole(w http.ResponseWriter, r *http.Request, name string) {
	var request RequestConsoleRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RequestConsole(ctx, request.(RequestConsoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestConsole")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RequestConsoleResponseObject); ok {
		if err := validResponse.VisitRequestConsoleResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetRenderedDeviceSpec operation middleware
func (sh *strictHandler) GetRenderedDeviceSpec(w http.ResponseWriter, r *http.Request, name string, params GetRenderedDeviceSpecParams) {
	var request GetRenderedDeviceSpecRequestObject

	request.Name = name
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetRenderedDeviceSpec(ctx, request.(GetRenderedDeviceSpecRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRenderedDeviceSpec")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetRenderedDeviceSpecResponseObject); ok {
		if err := validResponse.VisitGetRenderedDeviceSpecResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadDeviceStatus operation middleware
func (sh *strictHandler) ReadDeviceStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadDeviceStatusRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadDeviceStatus(ctx, request.(ReadDeviceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadDeviceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadDeviceStatusResponseObject); ok {
		if err := validResponse.VisitReadDeviceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceDeviceStatus operation middleware
func (sh *strictHandler) ReplaceDeviceStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceDeviceStatusRequestObject

	request.Name = name

	var body ReplaceDeviceStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceDeviceStatus(ctx, request.(ReplaceDeviceStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceDeviceStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceDeviceStatusResponseObject); ok {
		if err := validResponse.VisitReplaceDeviceStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnrollmentRequests operation middleware
func (sh *strictHandler) DeleteEnrollmentRequests(w http.ResponseWriter, r *http.Request) {
	var request DeleteEnrollmentRequestsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnrollmentRequests(ctx, request.(DeleteEnrollmentRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnrollmentRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnrollmentRequestsResponseObject); ok {
		if err := validResponse.VisitDeleteEnrollmentRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListEnrollmentRequests operation middleware
func (sh *strictHandler) ListEnrollmentRequests(w http.ResponseWriter, r *http.Request, params ListEnrollmentRequestsParams) {
	var request ListEnrollmentRequestsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListEnrollmentRequests(ctx, request.(ListEnrollmentRequestsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListEnrollmentRequests")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListEnrollmentRequestsResponseObject); ok {
		if err := validResponse.VisitListEnrollmentRequestsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEnrollmentRequest operation middleware
func (sh *strictHandler) CreateEnrollmentRequest(w http.ResponseWriter, r *http.Request) {
	var request CreateEnrollmentRequestRequestObject

	var body CreateEnrollmentRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnrollmentRequest(ctx, request.(CreateEnrollmentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnrollmentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEnrollmentRequestResponseObject); ok {
		if err := validResponse.VisitCreateEnrollmentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEnrollmentRequest operation middleware
func (sh *strictHandler) DeleteEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteEnrollmentRequestRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEnrollmentRequest(ctx, request.(DeleteEnrollmentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEnrollmentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEnrollmentRequestResponseObject); ok {
		if err := validResponse.VisitDeleteEnrollmentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadEnrollmentRequest operation middleware
func (sh *strictHandler) ReadEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadEnrollmentRequestRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadEnrollmentRequest(ctx, request.(ReadEnrollmentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadEnrollmentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadEnrollmentRequestResponseObject); ok {
		if err := validResponse.VisitReadEnrollmentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceEnrollmentRequest operation middleware
func (sh *strictHandler) ReplaceEnrollmentRequest(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceEnrollmentRequestRequestObject

	request.Name = name

	var body ReplaceEnrollmentRequestJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceEnrollmentRequest(ctx, request.(ReplaceEnrollmentRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceEnrollmentRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceEnrollmentRequestResponseObject); ok {
		if err := validResponse.VisitReplaceEnrollmentRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateEnrollmentRequestApproval operation middleware
func (sh *strictHandler) CreateEnrollmentRequestApproval(w http.ResponseWriter, r *http.Request, name string) {
	var request CreateEnrollmentRequestApprovalRequestObject

	request.Name = name

	var body CreateEnrollmentRequestApprovalJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateEnrollmentRequestApproval(ctx, request.(CreateEnrollmentRequestApprovalRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateEnrollmentRequestApproval")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateEnrollmentRequestApprovalResponseObject); ok {
		if err := validResponse.VisitCreateEnrollmentRequestApprovalResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadEnrollmentRequestStatus operation middleware
func (sh *strictHandler) ReadEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadEnrollmentRequestStatusRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadEnrollmentRequestStatus(ctx, request.(ReadEnrollmentRequestStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadEnrollmentRequestStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadEnrollmentRequestStatusResponseObject); ok {
		if err := validResponse.VisitReadEnrollmentRequestStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceEnrollmentRequestStatus operation middleware
func (sh *strictHandler) ReplaceEnrollmentRequestStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceEnrollmentRequestStatusRequestObject

	request.Name = name

	var body ReplaceEnrollmentRequestStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceEnrollmentRequestStatus(ctx, request.(ReplaceEnrollmentRequestStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceEnrollmentRequestStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceEnrollmentRequestStatusResponseObject); ok {
		if err := validResponse.VisitReplaceEnrollmentRequestStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFleets operation middleware
func (sh *strictHandler) DeleteFleets(w http.ResponseWriter, r *http.Request) {
	var request DeleteFleetsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFleets(ctx, request.(DeleteFleetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFleets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFleetsResponseObject); ok {
		if err := validResponse.VisitDeleteFleetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListFleets operation middleware
func (sh *strictHandler) ListFleets(w http.ResponseWriter, r *http.Request, params ListFleetsParams) {
	var request ListFleetsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListFleets(ctx, request.(ListFleetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListFleets")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListFleetsResponseObject); ok {
		if err := validResponse.VisitListFleetsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateFleet operation middleware
func (sh *strictHandler) CreateFleet(w http.ResponseWriter, r *http.Request) {
	var request CreateFleetRequestObject

	var body CreateFleetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateFleet(ctx, request.(CreateFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateFleetResponseObject); ok {
		if err := validResponse.VisitCreateFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTemplateVersions operation middleware
func (sh *strictHandler) DeleteTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string) {
	var request DeleteTemplateVersionsRequestObject

	request.Fleet = fleet

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTemplateVersions(ctx, request.(DeleteTemplateVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTemplateVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTemplateVersionsResponseObject); ok {
		if err := validResponse.VisitDeleteTemplateVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListTemplateVersions operation middleware
func (sh *strictHandler) ListTemplateVersions(w http.ResponseWriter, r *http.Request, fleet string, params ListTemplateVersionsParams) {
	var request ListTemplateVersionsRequestObject

	request.Fleet = fleet
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListTemplateVersions(ctx, request.(ListTemplateVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTemplateVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListTemplateVersionsResponseObject); ok {
		if err := validResponse.VisitListTemplateVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTemplateVersion operation middleware
func (sh *strictHandler) DeleteTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string) {
	var request DeleteTemplateVersionRequestObject

	request.Fleet = fleet
	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTemplateVersion(ctx, request.(DeleteTemplateVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTemplateVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTemplateVersionResponseObject); ok {
		if err := validResponse.VisitDeleteTemplateVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadTemplateVersion operation middleware
func (sh *strictHandler) ReadTemplateVersion(w http.ResponseWriter, r *http.Request, fleet string, name string) {
	var request ReadTemplateVersionRequestObject

	request.Fleet = fleet
	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadTemplateVersion(ctx, request.(ReadTemplateVersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadTemplateVersion")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadTemplateVersionResponseObject); ok {
		if err := validResponse.VisitReadTemplateVersionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteFleet operation middleware
func (sh *strictHandler) DeleteFleet(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteFleetRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteFleet(ctx, request.(DeleteFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteFleetResponseObject); ok {
		if err := validResponse.VisitDeleteFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadFleet operation middleware
func (sh *strictHandler) ReadFleet(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadFleetRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadFleet(ctx, request.(ReadFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadFleetResponseObject); ok {
		if err := validResponse.VisitReadFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchFleet operation middleware
func (sh *strictHandler) PatchFleet(w http.ResponseWriter, r *http.Request, name string) {
	var request PatchFleetRequestObject

	request.Name = name

	var body PatchFleetApplicationJSONPatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchFleet(ctx, request.(PatchFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchFleetResponseObject); ok {
		if err := validResponse.VisitPatchFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceFleet operation middleware
func (sh *strictHandler) ReplaceFleet(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceFleetRequestObject

	request.Name = name

	var body ReplaceFleetJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceFleet(ctx, request.(ReplaceFleetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceFleet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceFleetResponseObject); ok {
		if err := validResponse.VisitReplaceFleetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadFleetStatus operation middleware
func (sh *strictHandler) ReadFleetStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadFleetStatusRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadFleetStatus(ctx, request.(ReadFleetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadFleetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadFleetStatusResponseObject); ok {
		if err := validResponse.VisitReadFleetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceFleetStatus operation middleware
func (sh *strictHandler) ReplaceFleetStatus(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceFleetStatusRequestObject

	request.Name = name

	var body ReplaceFleetStatusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceFleetStatus(ctx, request.(ReplaceFleetStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceFleetStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceFleetStatusResponseObject); ok {
		if err := validResponse.VisitReplaceFleetStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRepositories operation middleware
func (sh *strictHandler) DeleteRepositories(w http.ResponseWriter, r *http.Request) {
	var request DeleteRepositoriesRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRepositories(ctx, request.(DeleteRepositoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRepositories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRepositoriesResponseObject); ok {
		if err := validResponse.VisitDeleteRepositoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListRepositories operation middleware
func (sh *strictHandler) ListRepositories(w http.ResponseWriter, r *http.Request, params ListRepositoriesParams) {
	var request ListRepositoriesRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListRepositories(ctx, request.(ListRepositoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRepositories")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListRepositoriesResponseObject); ok {
		if err := validResponse.VisitListRepositoriesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateRepository operation middleware
func (sh *strictHandler) CreateRepository(w http.ResponseWriter, r *http.Request) {
	var request CreateRepositoryRequestObject

	var body CreateRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRepository(ctx, request.(CreateRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateRepositoryResponseObject); ok {
		if err := validResponse.VisitCreateRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteRepository operation middleware
func (sh *strictHandler) DeleteRepository(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteRepositoryRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRepository(ctx, request.(DeleteRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteRepositoryResponseObject); ok {
		if err := validResponse.VisitDeleteRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadRepository operation middleware
func (sh *strictHandler) ReadRepository(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadRepositoryRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadRepository(ctx, request.(ReadRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadRepositoryResponseObject); ok {
		if err := validResponse.VisitReadRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchRepository operation middleware
func (sh *strictHandler) PatchRepository(w http.ResponseWriter, r *http.Request, name string) {
	var request PatchRepositoryRequestObject

	request.Name = name

	var body PatchRepositoryApplicationJSONPatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchRepository(ctx, request.(PatchRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchRepositoryResponseObject); ok {
		if err := validResponse.VisitPatchRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceRepository operation middleware
func (sh *strictHandler) ReplaceRepository(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceRepositoryRequestObject

	request.Name = name

	var body ReplaceRepositoryJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceRepository(ctx, request.(ReplaceRepositoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceRepository")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceRepositoryResponseObject); ok {
		if err := validResponse.VisitReplaceRepositoryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteResourceSyncs operation middleware
func (sh *strictHandler) DeleteResourceSyncs(w http.ResponseWriter, r *http.Request) {
	var request DeleteResourceSyncsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteResourceSyncs(ctx, request.(DeleteResourceSyncsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteResourceSyncs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteResourceSyncsResponseObject); ok {
		if err := validResponse.VisitDeleteResourceSyncsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListResourceSync operation middleware
func (sh *strictHandler) ListResourceSync(w http.ResponseWriter, r *http.Request, params ListResourceSyncParams) {
	var request ListResourceSyncRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ListResourceSync(ctx, request.(ListResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ListResourceSyncResponseObject); ok {
		if err := validResponse.VisitListResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateResourceSync operation middleware
func (sh *strictHandler) CreateResourceSync(w http.ResponseWriter, r *http.Request) {
	var request CreateResourceSyncRequestObject

	var body CreateResourceSyncJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateResourceSync(ctx, request.(CreateResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateResourceSyncResponseObject); ok {
		if err := validResponse.VisitCreateResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteResourceSync operation middleware
func (sh *strictHandler) DeleteResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	var request DeleteResourceSyncRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteResourceSync(ctx, request.(DeleteResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteResourceSyncResponseObject); ok {
		if err := validResponse.VisitDeleteResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadResourceSync operation middleware
func (sh *strictHandler) ReadResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	var request ReadResourceSyncRequestObject

	request.Name = name

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadResourceSync(ctx, request.(ReadResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadResourceSyncResponseObject); ok {
		if err := validResponse.VisitReadResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchResourceSync operation middleware
func (sh *strictHandler) PatchResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	var request PatchResourceSyncRequestObject

	request.Name = name

	var body PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchResourceSync(ctx, request.(PatchResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchResourceSyncResponseObject); ok {
		if err := validResponse.VisitPatchResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReplaceResourceSync operation middleware
func (sh *strictHandler) ReplaceResourceSync(w http.ResponseWriter, r *http.Request, name string) {
	var request ReplaceResourceSyncRequestObject

	request.Name = name

	var body ReplaceResourceSyncJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReplaceResourceSync(ctx, request.(ReplaceResourceSyncRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReplaceResourceSync")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReplaceResourceSyncResponseObject); ok {
		if err := validResponse.VisitReplaceResourceSyncResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TokenRequest operation middleware
func (sh *strictHandler) TokenRequest(w http.ResponseWriter, r *http.Request) {
	var request TokenRequestRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TokenRequest(ctx, request.(TokenRequestRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenRequest")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TokenRequestResponseObject); ok {
		if err := validResponse.VisitTokenRequestResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TokenValidate operation middleware
func (sh *strictHandler) TokenValidate(w http.ResponseWriter, r *http.Request, params TokenValidateParams) {
	var request TokenValidateRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TokenValidate(ctx, request.(TokenValidateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TokenValidate")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TokenValidateResponseObject); ok {
		if err := validResponse.VisitTokenValidateResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
