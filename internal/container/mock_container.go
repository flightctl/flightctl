// Code generated by MockGen. DO NOT EDIT.
// Source: internal/container/container.go
//
// Generated by this command:
//
//	mockgen -source=internal/container/container.go -destination=internal/container/mock_container.go -package=container
//

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBootcClient is a mock of BootcClient interface.
type MockBootcClient struct {
	ctrl     *gomock.Controller
	recorder *MockBootcClientMockRecorder
}

// MockBootcClientMockRecorder is the mock recorder for MockBootcClient.
type MockBootcClientMockRecorder struct {
	mock *MockBootcClient
}

// NewMockBootcClient creates a new mock instance.
func NewMockBootcClient(ctrl *gomock.Controller) *MockBootcClient {
	mock := &MockBootcClient{ctrl: ctrl}
	mock.recorder = &MockBootcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBootcClient) EXPECT() *MockBootcClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockBootcClient) Apply(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockBootcClientMockRecorder) Apply(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockBootcClient)(nil).Apply), ctx)
}

// Status mocks base method.
func (m *MockBootcClient) Status(ctx context.Context) (*BootcHost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(*BootcHost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockBootcClientMockRecorder) Status(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockBootcClient)(nil).Status), ctx)
}

// Switch mocks base method.
func (m *MockBootcClient) Switch(ctx context.Context, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Switch", ctx, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Switch indicates an expected call of Switch.
func (mr *MockBootcClientMockRecorder) Switch(ctx, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Switch", reflect.TypeOf((*MockBootcClient)(nil).Switch), ctx, image)
}

// UsrOverlay mocks base method.
func (m *MockBootcClient) UsrOverlay(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsrOverlay", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// UsrOverlay indicates an expected call of UsrOverlay.
func (mr *MockBootcClientMockRecorder) UsrOverlay(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsrOverlay", reflect.TypeOf((*MockBootcClient)(nil).UsrOverlay), ctx)
}
