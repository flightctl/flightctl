// Code generated by MockGen. DO NOT EDIT.
// Source: tpm.go
//
// Generated by this command:
//
//	mockgen -source=tpm.go -destination=mock_tpm.go -package=tpm
//

// Package tpm is a generated GoMock package.
package tpm

import (
	reflect "reflect"

	tpm2 "github.com/google/go-tpm/tpm2"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClearKey mocks base method.
func (m *MockStorage) ClearKey(keyType KeyType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearKey", keyType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearKey indicates an expected call of ClearKey.
func (mr *MockStorageMockRecorder) ClearKey(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearKey", reflect.TypeOf((*MockStorage)(nil).ClearKey), keyType)
}

// ClearPassword mocks base method.
func (m *MockStorage) ClearPassword() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearPassword")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearPassword indicates an expected call of ClearPassword.
func (mr *MockStorageMockRecorder) ClearPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearPassword", reflect.TypeOf((*MockStorage)(nil).ClearPassword))
}

// Close mocks base method.
func (m *MockStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// GetKey mocks base method.
func (m *MockStorage) GetKey(keyType KeyType) (*tpm2.TPM2BPublic, *tpm2.TPM2BPrivate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey", keyType)
	ret0, _ := ret[0].(*tpm2.TPM2BPublic)
	ret1, _ := ret[1].(*tpm2.TPM2BPrivate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetKey indicates an expected call of GetKey.
func (mr *MockStorageMockRecorder) GetKey(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockStorage)(nil).GetKey), keyType)
}

// GetPassword mocks base method.
func (m *MockStorage) GetPassword() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockStorageMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockStorage)(nil).GetPassword))
}

// StoreKey mocks base method.
func (m *MockStorage) StoreKey(keyType KeyType, public tpm2.TPM2BPublic, private tpm2.TPM2BPrivate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreKey", keyType, public, private)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreKey indicates an expected call of StoreKey.
func (mr *MockStorageMockRecorder) StoreKey(keyType, public, private any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreKey", reflect.TypeOf((*MockStorage)(nil).StoreKey), keyType, public, private)
}

// StorePassword mocks base method.
func (m *MockStorage) StorePassword(password []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePassword", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// StorePassword indicates an expected call of StorePassword.
func (mr *MockStorageMockRecorder) StorePassword(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePassword", reflect.TypeOf((*MockStorage)(nil).StorePassword), password)
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// CertifyKey mocks base method.
func (m *MockSession) CertifyKey(keyType KeyType, qualifyingData []byte) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertifyKey", keyType, qualifyingData)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CertifyKey indicates an expected call of CertifyKey.
func (mr *MockSessionMockRecorder) CertifyKey(keyType, qualifyingData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertifyKey", reflect.TypeOf((*MockSession)(nil).CertifyKey), keyType, qualifyingData)
}

// Clear mocks base method.
func (m *MockSession) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSessionMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockSession)(nil).Clear))
}

// Close mocks base method.
func (m *MockSession) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSessionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSession)(nil).Close))
}

// CreateKey mocks base method.
func (m *MockSession) CreateKey(keyType KeyType) (*tpm2.CreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKey", keyType)
	ret0, _ := ret[0].(*tpm2.CreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKey indicates an expected call of CreateKey.
func (mr *MockSessionMockRecorder) CreateKey(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKey", reflect.TypeOf((*MockSession)(nil).CreateKey), keyType)
}

// FlushAllTransientHandles mocks base method.
func (m *MockSession) FlushAllTransientHandles() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAllTransientHandles")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAllTransientHandles indicates an expected call of FlushAllTransientHandles.
func (mr *MockSessionMockRecorder) FlushAllTransientHandles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAllTransientHandles", reflect.TypeOf((*MockSession)(nil).FlushAllTransientHandles))
}

// GenerateChallenge mocks base method.
func (m *MockSession) GenerateChallenge(secret []byte) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", secret)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockSessionMockRecorder) GenerateChallenge(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockSession)(nil).GenerateChallenge), secret)
}

// GetEndorsementKeyCert mocks base method.
func (m *MockSession) GetEndorsementKeyCert() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndorsementKeyCert")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndorsementKeyCert indicates an expected call of GetEndorsementKeyCert.
func (mr *MockSessionMockRecorder) GetEndorsementKeyCert() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndorsementKeyCert", reflect.TypeOf((*MockSession)(nil).GetEndorsementKeyCert))
}

// GetHandle mocks base method.
func (m *MockSession) GetHandle(keyType KeyType) (*tpm2.NamedHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandle", keyType)
	ret0, _ := ret[0].(*tpm2.NamedHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHandle indicates an expected call of GetHandle.
func (mr *MockSessionMockRecorder) GetHandle(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandle", reflect.TypeOf((*MockSession)(nil).GetHandle), keyType)
}

// GetPublicKey mocks base method.
func (m *MockSession) GetPublicKey(keyType KeyType) (*tpm2.TPM2BPublic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey", keyType)
	ret0, _ := ret[0].(*tpm2.TPM2BPublic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockSessionMockRecorder) GetPublicKey(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockSession)(nil).GetPublicKey), keyType)
}

// LoadKey mocks base method.
func (m *MockSession) LoadKey(keyType KeyType) (*tpm2.NamedHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadKey", keyType)
	ret0, _ := ret[0].(*tpm2.NamedHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadKey indicates an expected call of LoadKey.
func (mr *MockSessionMockRecorder) LoadKey(keyType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKey", reflect.TypeOf((*MockSession)(nil).LoadKey), keyType)
}

// Sign mocks base method.
func (m *MockSession) Sign(keyType KeyType, digest []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", keyType, digest)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSessionMockRecorder) Sign(keyType, digest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSession)(nil).Sign), keyType, digest)
}

// SolveChallenge mocks base method.
func (m *MockSession) SolveChallenge(credentialBlob, encryptedSecret []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolveChallenge", credentialBlob, encryptedSecret)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SolveChallenge indicates an expected call of SolveChallenge.
func (mr *MockSessionMockRecorder) SolveChallenge(credentialBlob, encryptedSecret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolveChallenge", reflect.TypeOf((*MockSession)(nil).SolveChallenge), credentialBlob, encryptedSecret)
}
