# localhost:5000/flightctl-device:v10
#     $(IP):5000/flightctl-device:v10
#
# Image built on top of our E2E base image, which also includes the OTEL Collector and system metrics scraping.

FROM localhost:5000/flightctl-device:base

# Default version (caller can override with --build-arg OTEL_VERSION=...)
ARG OTEL_VERSION=0.130.1
ARG TARGETARCH

# We need go.mod available to try extracting the version
COPY go.mod /tmp/go.mod

# Tools: curl for download, yq (Go), tar/gzip, coreutils, shadow-utils for user/group
RUN dnf -y install --setopt=install_weak_deps=0 --nodocs \
      curl yq tar gzip coreutils shadow-utils ca-certificates \
  && dnf clean all

# Install otelcol (map arch, prefer go.mod version only when still on default)
RUN set -eux; \
  DEFAULT="0.130.1"; \
  CUR="${OTEL_VERSION}"; \
  # Only try go.mod if we're still on the default (i.e., not explicitly overridden)
  if [ "$CUR" = "$DEFAULT" ] && [ -s /tmp/go.mod ]; then \
    EXTRACTED="$(grep -E '^[[:space:]]*go\.opentelemetry\.io/collector/otelcol[[:space:]]+v[0-9][^[:space:]]*' /tmp/go.mod \
                 | awk '{print $2}' | head -n1 || true)"; \
    if [ -n "$EXTRACTED" ]; then CUR="${EXTRACTED#v}"; fi; \
  fi; \
  echo "Resolved otelcol version: v${CUR}"; \
  # Arch mapping (host arch unless buildx sets TARGETARCH)
  ARCH="${TARGETARCH:-$(uname -m)}"; \
  case "$ARCH" in \
    amd64|x86_64)  DL_ARCH=amd64 ;; \
    arm64|aarch64) DL_ARCH=arm64 ;; \
    *) echo "Unsupported arch: $ARCH" >&2; exit 1 ;; \
  esac; \
  base="https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${CUR}"; \
  tgz="otelcol_${CUR}_linux_${DL_ARCH}.tar.gz"; \
  curl -fsSL "${base}/${tgz}" -o /tmp/otelcol.tgz; \
  tar -xzf /tmp/otelcol.tgz -C /tmp otelcol; \
  install -m 0755 /tmp/otelcol /usr/bin/otelcol; \
  rm -f /tmp/otelcol /tmp/otelcol.tgz; \
  /usr/bin/otelcol --version

# Create service user/group
RUN groupadd -r otelcol && \
    useradd  -r -g otelcol -s /sbin/nologin -M -d / otelcol

# Config & cert dirs: root:otelcol, group-readable, no world
RUN install -d -m 0755 /etc/otelcol && \
    chown root:otelcol /etc/otelcol && chmod 0750 /etc/otelcol && \
    install -d -o root -g otelcol -m 0750 /etc/otelcol/certs

# Agent cert-manager mapping -> otelcol cert/key paths
RUN mkdir -p /etc/flightctl && \
    tee /etc/flightctl/certs.yaml >/dev/null <<'YAML'
- name: otel
  provisioner:
    type: csr
    config:
      signer: "flightctl.io/device-svc-client"
      common-name: "otel-{{.DEVICE_ID}}"
  storage:
    type: filesystem
    config:
      cert-path: "/etc/otelcol/certs/otel.crt"
      key-path:  "/etc/otelcol/certs/otel.key"
YAML

# Minimal OTEL config; prepare_otel_config.sh injects ${OTEL_GATEWAY}
RUN tee /etc/otelcol/config.yaml >/dev/null <<'OTEL'
receivers:
  hostmetrics:
    collection_interval: 10s
    scrapers: { cpu: {}, memory: {} }
  hostmetrics/disk:
    collection_interval: 1m
    scrapers: { disk: {}, filesystem: {} }

processors:
  batch: {}

exporters:
  otlp:
    endpoint: ${OTEL_GATEWAY}
    tls:
      ca_file:   /etc/otelcol/certs/gateway-ca.crt
      cert_file: /etc/otelcol/certs/otel.crt
      key_file:  /etc/otelcol/certs/otel.key
      insecure:  false

service:
  pipelines:
    metrics:
      receivers: [hostmetrics, hostmetrics/disk]
      processors: [batch]
      exporters: [otlp]
OTEL
RUN chown root:otelcol /etc/otelcol/config.yaml && chmod 0640 /etc/otelcol/config.yaml

# Prep script and unit
COPY ./test/scripts/agent-images/prepare_otel_config.sh /usr/local/bin/prepare_otel_config.sh
COPY ./test/scripts/agent-images/otelcol.service        /usr/lib/systemd/system/otelcol.service
RUN chmod +x /usr/local/bin/prepare_otel_config.sh

# Enable via preset (bootc-preferred) and also add wants-symlink as fallback
RUN tee /usr/lib/systemd/system-preset/99-otelcol.preset >/dev/null <<'PRESET' \
 && ln -sf /usr/lib/systemd/system/otelcol.service /etc/systemd/system/multi-user.target.wants/otelcol.service
enable otelcol.service
PRESET
