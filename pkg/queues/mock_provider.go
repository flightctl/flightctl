// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go
//
// Generated by this command:
//
//	mockgen -source=provider.go -destination=mock_provider.go -package=queues
//

// Package queues is a generated GoMock package.
package queues

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// AdvanceCheckpointAndCleanup mocks base method.
func (m *MockProvider) AdvanceCheckpointAndCleanup(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdvanceCheckpointAndCleanup", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdvanceCheckpointAndCleanup indicates an expected call of AdvanceCheckpointAndCleanup.
func (mr *MockProviderMockRecorder) AdvanceCheckpointAndCleanup(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdvanceCheckpointAndCleanup", reflect.TypeOf((*MockProvider)(nil).AdvanceCheckpointAndCleanup), ctx)
}

// CheckHealth mocks base method.
func (m *MockProvider) CheckHealth(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockProviderMockRecorder) CheckHealth(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockProvider)(nil).CheckHealth), ctx)
}

// GetLatestProcessedTimestamp mocks base method.
func (m *MockProvider) GetLatestProcessedTimestamp(ctx context.Context) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestProcessedTimestamp", ctx)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestProcessedTimestamp indicates an expected call of GetLatestProcessedTimestamp.
func (mr *MockProviderMockRecorder) GetLatestProcessedTimestamp(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestProcessedTimestamp", reflect.TypeOf((*MockProvider)(nil).GetLatestProcessedTimestamp), ctx)
}

// NewPubSubPublisher mocks base method.
func (m *MockProvider) NewPubSubPublisher(ctx context.Context, channelName string) (PubSubPublisher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPubSubPublisher", ctx, channelName)
	ret0, _ := ret[0].(PubSubPublisher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPubSubPublisher indicates an expected call of NewPubSubPublisher.
func (mr *MockProviderMockRecorder) NewPubSubPublisher(ctx, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPubSubPublisher", reflect.TypeOf((*MockProvider)(nil).NewPubSubPublisher), ctx, channelName)
}

// NewPubSubSubscriber mocks base method.
func (m *MockProvider) NewPubSubSubscriber(ctx context.Context, channelName string) (PubSubSubscriber, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPubSubSubscriber", ctx, channelName)
	ret0, _ := ret[0].(PubSubSubscriber)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPubSubSubscriber indicates an expected call of NewPubSubSubscriber.
func (mr *MockProviderMockRecorder) NewPubSubSubscriber(ctx, channelName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPubSubSubscriber", reflect.TypeOf((*MockProvider)(nil).NewPubSubSubscriber), ctx, channelName)
}

// NewQueueConsumer mocks base method.
func (m *MockProvider) NewQueueConsumer(ctx context.Context, queueName string) (QueueConsumer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueueConsumer", ctx, queueName)
	ret0, _ := ret[0].(QueueConsumer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewQueueConsumer indicates an expected call of NewQueueConsumer.
func (mr *MockProviderMockRecorder) NewQueueConsumer(ctx, queueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueueConsumer", reflect.TypeOf((*MockProvider)(nil).NewQueueConsumer), ctx, queueName)
}

// NewQueueProducer mocks base method.
func (m *MockProvider) NewQueueProducer(ctx context.Context, queueName string) (QueueProducer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQueueProducer", ctx, queueName)
	ret0, _ := ret[0].(QueueProducer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewQueueProducer indicates an expected call of NewQueueProducer.
func (mr *MockProviderMockRecorder) NewQueueProducer(ctx, queueName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQueueProducer", reflect.TypeOf((*MockProvider)(nil).NewQueueProducer), ctx, queueName)
}

// ProcessTimedOutMessages mocks base method.
func (m *MockProvider) ProcessTimedOutMessages(ctx context.Context, queueName string, timeout time.Duration, handler func(string, []byte) error) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTimedOutMessages", ctx, queueName, timeout, handler)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessTimedOutMessages indicates an expected call of ProcessTimedOutMessages.
func (mr *MockProviderMockRecorder) ProcessTimedOutMessages(ctx, queueName, timeout, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTimedOutMessages", reflect.TypeOf((*MockProvider)(nil).ProcessTimedOutMessages), ctx, queueName, timeout, handler)
}

// RetryFailedMessages mocks base method.
func (m *MockProvider) RetryFailedMessages(ctx context.Context, queueName string, config RetryConfig, handler func(string, []byte, int) error) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetryFailedMessages", ctx, queueName, config, handler)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetryFailedMessages indicates an expected call of RetryFailedMessages.
func (mr *MockProviderMockRecorder) RetryFailedMessages(ctx, queueName, config, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetryFailedMessages", reflect.TypeOf((*MockProvider)(nil).RetryFailedMessages), ctx, queueName, config, handler)
}

// SetCheckpointTimestamp mocks base method.
func (m *MockProvider) SetCheckpointTimestamp(ctx context.Context, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckpointTimestamp", ctx, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCheckpointTimestamp indicates an expected call of SetCheckpointTimestamp.
func (mr *MockProviderMockRecorder) SetCheckpointTimestamp(ctx, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckpointTimestamp", reflect.TypeOf((*MockProvider)(nil).SetCheckpointTimestamp), ctx, timestamp)
}

// Stop mocks base method.
func (m *MockProvider) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockProviderMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProvider)(nil).Stop))
}

// Wait mocks base method.
func (m *MockProvider) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockProviderMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockProvider)(nil).Wait))
}

// MockQueueConsumer is a mock of QueueConsumer interface.
type MockQueueConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueConsumerMockRecorder
}

// MockQueueConsumerMockRecorder is the mock recorder for MockQueueConsumer.
type MockQueueConsumerMockRecorder struct {
	mock *MockQueueConsumer
}

// NewMockQueueConsumer creates a new mock instance.
func NewMockQueueConsumer(ctrl *gomock.Controller) *MockQueueConsumer {
	mock := &MockQueueConsumer{ctrl: ctrl}
	mock.recorder = &MockQueueConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueConsumer) EXPECT() *MockQueueConsumerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueueConsumer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockQueueConsumerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueConsumer)(nil).Close))
}

// Complete mocks base method.
func (m *MockQueueConsumer) Complete(ctx context.Context, entryID string, body []byte, processingErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Complete", ctx, entryID, body, processingErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Complete indicates an expected call of Complete.
func (mr *MockQueueConsumerMockRecorder) Complete(ctx, entryID, body, processingErr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Complete", reflect.TypeOf((*MockQueueConsumer)(nil).Complete), ctx, entryID, body, processingErr)
}

// Consume mocks base method.
func (m *MockQueueConsumer) Consume(ctx context.Context, handler ConsumeHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockQueueConsumerMockRecorder) Consume(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockQueueConsumer)(nil).Consume), ctx, handler)
}

// MockQueueProducer is a mock of QueueProducer interface.
type MockQueueProducer struct {
	ctrl     *gomock.Controller
	recorder *MockQueueProducerMockRecorder
}

// MockQueueProducerMockRecorder is the mock recorder for MockQueueProducer.
type MockQueueProducerMockRecorder struct {
	mock *MockQueueProducer
}

// NewMockQueueProducer creates a new mock instance.
func NewMockQueueProducer(ctrl *gomock.Controller) *MockQueueProducer {
	mock := &MockQueueProducer{ctrl: ctrl}
	mock.recorder = &MockQueueProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueProducer) EXPECT() *MockQueueProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueueProducer) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockQueueProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueProducer)(nil).Close))
}

// Enqueue mocks base method.
func (m *MockQueueProducer) Enqueue(ctx context.Context, payload []byte, timestamp int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, payload, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockQueueProducerMockRecorder) Enqueue(ctx, payload, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockQueueProducer)(nil).Enqueue), ctx, payload, timestamp)
}

// MockPubSubPublisher is a mock of PubSubPublisher interface.
type MockPubSubPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubPublisherMockRecorder
}

// MockPubSubPublisherMockRecorder is the mock recorder for MockPubSubPublisher.
type MockPubSubPublisherMockRecorder struct {
	mock *MockPubSubPublisher
}

// NewMockPubSubPublisher creates a new mock instance.
func NewMockPubSubPublisher(ctrl *gomock.Controller) *MockPubSubPublisher {
	mock := &MockPubSubPublisher{ctrl: ctrl}
	mock.recorder = &MockPubSubPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubPublisher) EXPECT() *MockPubSubPublisherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubSubPublisher) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPubSubPublisherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSubPublisher)(nil).Close))
}

// Publish mocks base method.
func (m *MockPubSubPublisher) Publish(ctx context.Context, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubPublisherMockRecorder) Publish(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSubPublisher)(nil).Publish), ctx, payload)
}

// MockPubSubSubscriber is a mock of PubSubSubscriber interface.
type MockPubSubSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubSubscriberMockRecorder
}

// MockPubSubSubscriberMockRecorder is the mock recorder for MockPubSubSubscriber.
type MockPubSubSubscriberMockRecorder struct {
	mock *MockPubSubSubscriber
}

// NewMockPubSubSubscriber creates a new mock instance.
func NewMockPubSubSubscriber(ctrl *gomock.Controller) *MockPubSubSubscriber {
	mock := &MockPubSubSubscriber{ctrl: ctrl}
	mock.recorder = &MockPubSubSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubSubscriber) EXPECT() *MockPubSubSubscriberMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubSubSubscriber) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockPubSubSubscriberMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSubSubscriber)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockPubSubSubscriber) Subscribe(ctx context.Context, handler PubSubHandler) (Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, handler)
	ret0, _ := ret[0].(Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubSubscriberMockRecorder) Subscribe(ctx, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSubSubscriber)(nil).Subscribe), ctx, handler)
}

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubscription) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSubscriptionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubscription)(nil).Close))
}
