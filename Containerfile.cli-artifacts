FROM registry.access.redhat.com/ubi9/go-toolset:1.23.9-1751538372 as builder
WORKDIR /app
ARG SOURCE_GIT_TAG
ARG SOURCE_GIT_TREE_STATE
ARG SOURCE_GIT_COMMIT

# Convert ARGs to ENV so make can use them
ENV SOURCE_GIT_TAG=${SOURCE_GIT_TAG}
ENV SOURCE_GIT_TREE_STATE=${SOURCE_GIT_TREE_STATE}
ENV SOURCE_GIT_COMMIT=${SOURCE_GIT_COMMIT}

# Switch to root for build operations
USER 0

# Copy dependencies first (most stable)
COPY go.* ./
COPY go.mod go.sum ./

# Download dependencies (cached layer)
RUN --mount=type=cache,target=/opt/app-root/src/go/pkg/mod \
    go mod download

# Copy build tools and configs
COPY Makefile .

# Copy source code directories
COPY ./api ./api
COPY ./cmd ./cmd
COPY ./deploy ./deploy
COPY ./hack ./hack
COPY ./internal ./internal
COPY ./pkg ./pkg
COPY ./test ./test
COPY ./packaging ./packaging

# Use BuildKit cache mounts for dnf package caching
RUN --mount=type=cache,target=/var/cache/dnf \
    --mount=type=cache,target=/var/lib/dnf \
    dnf install --nodocs -y jq

# Use BuildKit cache mounts for Go caching
RUN --mount=type=cache,target=/opt/app-root/src/.cache/go-build \
    --mount=type=cache,target=/opt/app-root/src/go/pkg/mod \
    make build-multiarch-clis

FROM registry.access.redhat.com/ubi9/ubi as certs
# Use BuildKit cache mounts for dnf package caching
RUN --mount=type=cache,target=/var/cache/dnf \
    --mount=type=cache,target=/var/lib/dnf \
    dnf install --nodocs -y nginx && \
    rm -f /etc/nginx/nginx.conf /etc/nginx/conf.d/default.conf && \
    dnf clean all

ENV USER_UID=1001 \
    USER_NAME=server \
    HOME=/home/server \
    NGINX_CONF_PATH=/etc/nginx/nginx.conf \
    ENTRYPOINT_PATH=/usr/local/bin/entrypoint.sh

COPY --from=builder /app/packaging/containers/cli-artifacts/nginx.conf ${NGINX_CONF_PATH}
COPY --from=builder /app/packaging/containers/cli-artifacts/entrypoint.sh ${ENTRYPOINT_PATH}

USER root

RUN mkdir -p ${HOME}/src/gh-archives \
    chown ${USER_UID}:0 ${HOME} && \
    chmod 755 ${HOME} && \
    sed '/^\s*listen\s*\[::\]:8090/d' ${NGINX_CONF_PATH} > ${NGINX_CONF_PATH}.ipv4 && \
    sed '/^\s*listen\s*8090/d' ${NGINX_CONF_PATH} > ${NGINX_CONF_PATH}.ipv6 && \
    chmod 755 ${NGINX_CONF_PATH} ${NGINX_CONF_PATH}.ipv* && \
    chmod -R 775 /var/lib/nginx && \
    chown -R ${USER_UID}:0 /root && \
    chown -R ${USER_UID}:0 /var/lib/nginx && \
    chmod -R 775 /var/log/nginx && \
    chown -R ${USER_UID}:0 /var/log/nginx && \
    chmod -R 775 /var/run && \
    chown -R ${USER_UID}:0 /var/run && \
    chmod +x ${ENTRYPOINT_PATH}

USER ${USER_UID}

WORKDIR ${HOME}/src

COPY --from=builder /app/bin/clis/gh-archives/ ${HOME}/src/gh-archives/

USER root
RUN chmod -R 755 ${HOME}/src/gh-archives/ && \
    chown -R ${USER_UID}:0 ${HOME}/src/gh-archives/ && \
    chmod 666 ${HOME}/src/gh-archives/index.json
USER ${USER_UID}

LABEL \
  com.redhat.component="flightctl-cli-artifacts-container" \
  description="Container image exposing multi-arch Flight Control CLI binaries over HTTP" \
  io.k8s.description="Container image exposing multi-arch Flight Control CLI binaries over HTTP" \
  io.k8s.display-name="Flight Control CLI multiarch artifacts with server" \
  io.openshift.tags="flightctl,cli-artifacts" \
  name="flightctl-cli-artifacts" \
  summary="Container image exposing multi-arch Flight Control CLI binaries over HTTP"
EXPOSE 8090

ENTRYPOINT ${ENTRYPOINT_PATH}
