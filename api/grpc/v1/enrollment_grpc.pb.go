// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: enrollment.proto

package grpc_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnrollmentClient is the client API for Enrollment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentClient interface {
	// TPMChallenge establishes a bidirectional stream to conduct the TPM challenge-response.
	TPMChallenge(ctx context.Context, opts ...grpc.CallOption) (Enrollment_TPMChallengeClient, error)
}

type enrollmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentClient(cc grpc.ClientConnInterface) EnrollmentClient {
	return &enrollmentClient{cc}
}

func (c *enrollmentClient) TPMChallenge(ctx context.Context, opts ...grpc.CallOption) (Enrollment_TPMChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Enrollment_ServiceDesc.Streams[0], "/flightctl.v1.Enrollment/TPMChallenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &enrollmentTPMChallengeClient{stream}
	return x, nil
}

type Enrollment_TPMChallengeClient interface {
	Send(*AgentChallenge) error
	Recv() (*ServerChallenge, error)
	grpc.ClientStream
}

type enrollmentTPMChallengeClient struct {
	grpc.ClientStream
}

func (x *enrollmentTPMChallengeClient) Send(m *AgentChallenge) error {
	return x.ClientStream.SendMsg(m)
}

func (x *enrollmentTPMChallengeClient) Recv() (*ServerChallenge, error) {
	m := new(ServerChallenge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnrollmentServer is the server API for Enrollment service.
// All implementations must embed UnimplementedEnrollmentServer
// for forward compatibility
type EnrollmentServer interface {
	// TPMChallenge establishes a bidirectional stream to conduct the TPM challenge-response.
	TPMChallenge(Enrollment_TPMChallengeServer) error
	mustEmbedUnimplementedEnrollmentServer()
}

// UnimplementedEnrollmentServer must be embedded to have forward compatible implementations.
type UnimplementedEnrollmentServer struct {
}

func (UnimplementedEnrollmentServer) TPMChallenge(Enrollment_TPMChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method TPMChallenge not implemented")
}
func (UnimplementedEnrollmentServer) mustEmbedUnimplementedEnrollmentServer() {}

// UnsafeEnrollmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentServer will
// result in compilation errors.
type UnsafeEnrollmentServer interface {
	mustEmbedUnimplementedEnrollmentServer()
}

func RegisterEnrollmentServer(s grpc.ServiceRegistrar, srv EnrollmentServer) {
	s.RegisterService(&Enrollment_ServiceDesc, srv)
}

func _Enrollment_TPMChallenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnrollmentServer).TPMChallenge(&enrollmentTPMChallengeServer{stream})
}

type Enrollment_TPMChallengeServer interface {
	Send(*ServerChallenge) error
	Recv() (*AgentChallenge, error)
	grpc.ServerStream
}

type enrollmentTPMChallengeServer struct {
	grpc.ServerStream
}

func (x *enrollmentTPMChallengeServer) Send(m *ServerChallenge) error {
	return x.ServerStream.SendMsg(m)
}

func (x *enrollmentTPMChallengeServer) Recv() (*AgentChallenge, error) {
	m := new(AgentChallenge)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Enrollment_ServiceDesc is the grpc.ServiceDesc for Enrollment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Enrollment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flightctl.v1.Enrollment",
	HandlerType: (*EnrollmentServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TPMChallenge",
			Handler:       _Enrollment_TPMChallenge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "enrollment.proto",
}
