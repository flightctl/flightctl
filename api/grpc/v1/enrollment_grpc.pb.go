// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: enrollment.proto

package grpc_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EnrollmentRequestServiceClient is the client API for EnrollmentRequestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnrollmentRequestServiceClient interface {
	// PerformTPMChallenge establishes a bidirectional stream to conduct the TPM challenge-response.
	PerformTPMChallenge(ctx context.Context, opts ...grpc.CallOption) (EnrollmentRequestService_PerformTPMChallengeClient, error)
}

type enrollmentRequestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnrollmentRequestServiceClient(cc grpc.ClientConnInterface) EnrollmentRequestServiceClient {
	return &enrollmentRequestServiceClient{cc}
}

func (c *enrollmentRequestServiceClient) PerformTPMChallenge(ctx context.Context, opts ...grpc.CallOption) (EnrollmentRequestService_PerformTPMChallengeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EnrollmentRequestService_ServiceDesc.Streams[0], "/flightctl.v1.EnrollmentRequestService/PerformTPMChallenge", opts...)
	if err != nil {
		return nil, err
	}
	x := &enrollmentRequestServicePerformTPMChallengeClient{stream}
	return x, nil
}

type EnrollmentRequestService_PerformTPMChallengeClient interface {
	Send(*AgentTPMChallengeMessage) error
	Recv() (*ServerTPMChallengeMessage, error)
	grpc.ClientStream
}

type enrollmentRequestServicePerformTPMChallengeClient struct {
	grpc.ClientStream
}

func (x *enrollmentRequestServicePerformTPMChallengeClient) Send(m *AgentTPMChallengeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *enrollmentRequestServicePerformTPMChallengeClient) Recv() (*ServerTPMChallengeMessage, error) {
	m := new(ServerTPMChallengeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnrollmentRequestServiceServer is the server API for EnrollmentRequestService service.
// All implementations must embed UnimplementedEnrollmentRequestServiceServer
// for forward compatibility
type EnrollmentRequestServiceServer interface {
	// PerformTPMChallenge establishes a bidirectional stream to conduct the TPM challenge-response.
	PerformTPMChallenge(EnrollmentRequestService_PerformTPMChallengeServer) error
	mustEmbedUnimplementedEnrollmentRequestServiceServer()
}

// UnimplementedEnrollmentRequestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnrollmentRequestServiceServer struct {
}

func (UnimplementedEnrollmentRequestServiceServer) PerformTPMChallenge(EnrollmentRequestService_PerformTPMChallengeServer) error {
	return status.Errorf(codes.Unimplemented, "method PerformTPMChallenge not implemented")
}
func (UnimplementedEnrollmentRequestServiceServer) mustEmbedUnimplementedEnrollmentRequestServiceServer() {
}

// UnsafeEnrollmentRequestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnrollmentRequestServiceServer will
// result in compilation errors.
type UnsafeEnrollmentRequestServiceServer interface {
	mustEmbedUnimplementedEnrollmentRequestServiceServer()
}

func RegisterEnrollmentRequestServiceServer(s grpc.ServiceRegistrar, srv EnrollmentRequestServiceServer) {
	s.RegisterService(&EnrollmentRequestService_ServiceDesc, srv)
}

func _EnrollmentRequestService_PerformTPMChallenge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnrollmentRequestServiceServer).PerformTPMChallenge(&enrollmentRequestServicePerformTPMChallengeServer{stream})
}

type EnrollmentRequestService_PerformTPMChallengeServer interface {
	Send(*ServerTPMChallengeMessage) error
	Recv() (*AgentTPMChallengeMessage, error)
	grpc.ServerStream
}

type enrollmentRequestServicePerformTPMChallengeServer struct {
	grpc.ServerStream
}

func (x *enrollmentRequestServicePerformTPMChallengeServer) Send(m *ServerTPMChallengeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *enrollmentRequestServicePerformTPMChallengeServer) Recv() (*AgentTPMChallengeMessage, error) {
	m := new(AgentTPMChallengeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnrollmentRequestService_ServiceDesc is the grpc.ServiceDesc for EnrollmentRequestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnrollmentRequestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flightctl.v1.EnrollmentRequestService",
	HandlerType: (*EnrollmentRequestServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PerformTPMChallenge",
			Handler:       _EnrollmentRequestService_PerformTPMChallenge_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "enrollment.proto",
}
