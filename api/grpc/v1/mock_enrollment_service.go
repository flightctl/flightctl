// Code generated by MockGen. DO NOT EDIT.
// Source: enrollment_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=enrollment_grpc.pb.go -destination=mock_enrollment_service.go -package=grpc_v1
//

// Package grpc_v1 is a generated GoMock package.
package grpc_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockEnrollmentRequestServiceClient is a mock of EnrollmentRequestServiceClient interface.
type MockEnrollmentRequestServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRequestServiceClientMockRecorder
}

// MockEnrollmentRequestServiceClientMockRecorder is the mock recorder for MockEnrollmentRequestServiceClient.
type MockEnrollmentRequestServiceClientMockRecorder struct {
	mock *MockEnrollmentRequestServiceClient
}

// NewMockEnrollmentRequestServiceClient creates a new mock instance.
func NewMockEnrollmentRequestServiceClient(ctrl *gomock.Controller) *MockEnrollmentRequestServiceClient {
	mock := &MockEnrollmentRequestServiceClient{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRequestServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRequestServiceClient) EXPECT() *MockEnrollmentRequestServiceClientMockRecorder {
	return m.recorder
}

// PerformTPMChallenge mocks base method.
func (m *MockEnrollmentRequestServiceClient) PerformTPMChallenge(ctx context.Context, opts ...grpc.CallOption) (EnrollmentRequestService_PerformTPMChallengeClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PerformTPMChallenge", varargs...)
	ret0, _ := ret[0].(EnrollmentRequestService_PerformTPMChallengeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PerformTPMChallenge indicates an expected call of PerformTPMChallenge.
func (mr *MockEnrollmentRequestServiceClientMockRecorder) PerformTPMChallenge(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformTPMChallenge", reflect.TypeOf((*MockEnrollmentRequestServiceClient)(nil).PerformTPMChallenge), varargs...)
}

// MockEnrollmentRequestService_PerformTPMChallengeClient is a mock of EnrollmentRequestService_PerformTPMChallengeClient interface.
type MockEnrollmentRequestService_PerformTPMChallengeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder
}

// MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder is the mock recorder for MockEnrollmentRequestService_PerformTPMChallengeClient.
type MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder struct {
	mock *MockEnrollmentRequestService_PerformTPMChallengeClient
}

// NewMockEnrollmentRequestService_PerformTPMChallengeClient creates a new mock instance.
func NewMockEnrollmentRequestService_PerformTPMChallengeClient(ctrl *gomock.Controller) *MockEnrollmentRequestService_PerformTPMChallengeClient {
	mock := &MockEnrollmentRequestService_PerformTPMChallengeClient{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) EXPECT() *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) Recv() (*ServerTPMChallengeMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ServerTPMChallengeMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEnrollmentRequestService_PerformTPMChallengeClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) Send(arg0 *AgentTPMChallengeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEnrollmentRequestService_PerformTPMChallengeClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeClient)(nil).Trailer))
}

// MockEnrollmentRequestServiceServer is a mock of EnrollmentRequestServiceServer interface.
type MockEnrollmentRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRequestServiceServerMockRecorder
}

// MockEnrollmentRequestServiceServerMockRecorder is the mock recorder for MockEnrollmentRequestServiceServer.
type MockEnrollmentRequestServiceServerMockRecorder struct {
	mock *MockEnrollmentRequestServiceServer
}

// NewMockEnrollmentRequestServiceServer creates a new mock instance.
func NewMockEnrollmentRequestServiceServer(ctrl *gomock.Controller) *MockEnrollmentRequestServiceServer {
	mock := &MockEnrollmentRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRequestServiceServer) EXPECT() *MockEnrollmentRequestServiceServerMockRecorder {
	return m.recorder
}

// PerformTPMChallenge mocks base method.
func (m *MockEnrollmentRequestServiceServer) PerformTPMChallenge(arg0 EnrollmentRequestService_PerformTPMChallengeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformTPMChallenge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformTPMChallenge indicates an expected call of PerformTPMChallenge.
func (mr *MockEnrollmentRequestServiceServerMockRecorder) PerformTPMChallenge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformTPMChallenge", reflect.TypeOf((*MockEnrollmentRequestServiceServer)(nil).PerformTPMChallenge), arg0)
}

// mustEmbedUnimplementedEnrollmentRequestServiceServer mocks base method.
func (m *MockEnrollmentRequestServiceServer) mustEmbedUnimplementedEnrollmentRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentRequestServiceServer")
}

// mustEmbedUnimplementedEnrollmentRequestServiceServer indicates an expected call of mustEmbedUnimplementedEnrollmentRequestServiceServer.
func (mr *MockEnrollmentRequestServiceServerMockRecorder) mustEmbedUnimplementedEnrollmentRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentRequestServiceServer", reflect.TypeOf((*MockEnrollmentRequestServiceServer)(nil).mustEmbedUnimplementedEnrollmentRequestServiceServer))
}

// MockUnsafeEnrollmentRequestServiceServer is a mock of UnsafeEnrollmentRequestServiceServer interface.
type MockUnsafeEnrollmentRequestServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEnrollmentRequestServiceServerMockRecorder
}

// MockUnsafeEnrollmentRequestServiceServerMockRecorder is the mock recorder for MockUnsafeEnrollmentRequestServiceServer.
type MockUnsafeEnrollmentRequestServiceServerMockRecorder struct {
	mock *MockUnsafeEnrollmentRequestServiceServer
}

// NewMockUnsafeEnrollmentRequestServiceServer creates a new mock instance.
func NewMockUnsafeEnrollmentRequestServiceServer(ctrl *gomock.Controller) *MockUnsafeEnrollmentRequestServiceServer {
	mock := &MockUnsafeEnrollmentRequestServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEnrollmentRequestServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEnrollmentRequestServiceServer) EXPECT() *MockUnsafeEnrollmentRequestServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEnrollmentRequestServiceServer mocks base method.
func (m *MockUnsafeEnrollmentRequestServiceServer) mustEmbedUnimplementedEnrollmentRequestServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentRequestServiceServer")
}

// mustEmbedUnimplementedEnrollmentRequestServiceServer indicates an expected call of mustEmbedUnimplementedEnrollmentRequestServiceServer.
func (mr *MockUnsafeEnrollmentRequestServiceServerMockRecorder) mustEmbedUnimplementedEnrollmentRequestServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentRequestServiceServer", reflect.TypeOf((*MockUnsafeEnrollmentRequestServiceServer)(nil).mustEmbedUnimplementedEnrollmentRequestServiceServer))
}

// MockEnrollmentRequestService_PerformTPMChallengeServer is a mock of EnrollmentRequestService_PerformTPMChallengeServer interface.
type MockEnrollmentRequestService_PerformTPMChallengeServer struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder
}

// MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder is the mock recorder for MockEnrollmentRequestService_PerformTPMChallengeServer.
type MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder struct {
	mock *MockEnrollmentRequestService_PerformTPMChallengeServer
}

// NewMockEnrollmentRequestService_PerformTPMChallengeServer creates a new mock instance.
func NewMockEnrollmentRequestService_PerformTPMChallengeServer(ctrl *gomock.Controller) *MockEnrollmentRequestService_PerformTPMChallengeServer {
	mock := &MockEnrollmentRequestService_PerformTPMChallengeServer{ctrl: ctrl}
	mock.recorder = &MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) EXPECT() *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) Recv() (*AgentTPMChallengeMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AgentTPMChallengeMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEnrollmentRequestService_PerformTPMChallengeServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) Send(arg0 *ServerTPMChallengeMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEnrollmentRequestService_PerformTPMChallengeServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockEnrollmentRequestService_PerformTPMChallengeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockEnrollmentRequestService_PerformTPMChallengeServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockEnrollmentRequestService_PerformTPMChallengeServer)(nil).SetTrailer), arg0)
}
