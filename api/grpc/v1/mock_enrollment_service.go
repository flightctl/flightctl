// Code generated by MockGen. DO NOT EDIT.
// Source: enrollment_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=enrollment_grpc.pb.go -destination=mock_enrollment_service.go -package=grpc_v1
//

// Package grpc_v1 is a generated GoMock package.
package grpc_v1

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockEnrollmentClient is a mock of EnrollmentClient interface.
type MockEnrollmentClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentClientMockRecorder
}

// MockEnrollmentClientMockRecorder is the mock recorder for MockEnrollmentClient.
type MockEnrollmentClientMockRecorder struct {
	mock *MockEnrollmentClient
}

// NewMockEnrollmentClient creates a new mock instance.
func NewMockEnrollmentClient(ctrl *gomock.Controller) *MockEnrollmentClient {
	mock := &MockEnrollmentClient{ctrl: ctrl}
	mock.recorder = &MockEnrollmentClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentClient) EXPECT() *MockEnrollmentClientMockRecorder {
	return m.recorder
}

// TPMChallenge mocks base method.
func (m *MockEnrollmentClient) TPMChallenge(ctx context.Context, opts ...grpc.CallOption) (Enrollment_TPMChallengeClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TPMChallenge", varargs...)
	ret0, _ := ret[0].(Enrollment_TPMChallengeClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TPMChallenge indicates an expected call of TPMChallenge.
func (mr *MockEnrollmentClientMockRecorder) TPMChallenge(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TPMChallenge", reflect.TypeOf((*MockEnrollmentClient)(nil).TPMChallenge), varargs...)
}

// MockEnrollment_TPMChallengeClient is a mock of Enrollment_TPMChallengeClient interface.
type MockEnrollment_TPMChallengeClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollment_TPMChallengeClientMockRecorder
}

// MockEnrollment_TPMChallengeClientMockRecorder is the mock recorder for MockEnrollment_TPMChallengeClient.
type MockEnrollment_TPMChallengeClientMockRecorder struct {
	mock *MockEnrollment_TPMChallengeClient
}

// NewMockEnrollment_TPMChallengeClient creates a new mock instance.
func NewMockEnrollment_TPMChallengeClient(ctrl *gomock.Controller) *MockEnrollment_TPMChallengeClient {
	mock := &MockEnrollment_TPMChallengeClient{ctrl: ctrl}
	mock.recorder = &MockEnrollment_TPMChallengeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollment_TPMChallengeClient) EXPECT() *MockEnrollment_TPMChallengeClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockEnrollment_TPMChallengeClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockEnrollment_TPMChallengeClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).Context))
}

// Header mocks base method.
func (m *MockEnrollment_TPMChallengeClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockEnrollment_TPMChallengeClient) Recv() (*ServerChallenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ServerChallenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEnrollment_TPMChallengeClient) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEnrollment_TPMChallengeClient) Send(arg0 *AgentChallenge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEnrollment_TPMChallengeClient) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockEnrollment_TPMChallengeClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockEnrollment_TPMChallengeClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockEnrollment_TPMChallengeClient)(nil).Trailer))
}

// MockEnrollmentServer is a mock of EnrollmentServer interface.
type MockEnrollmentServer struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollmentServerMockRecorder
}

// MockEnrollmentServerMockRecorder is the mock recorder for MockEnrollmentServer.
type MockEnrollmentServerMockRecorder struct {
	mock *MockEnrollmentServer
}

// NewMockEnrollmentServer creates a new mock instance.
func NewMockEnrollmentServer(ctrl *gomock.Controller) *MockEnrollmentServer {
	mock := &MockEnrollmentServer{ctrl: ctrl}
	mock.recorder = &MockEnrollmentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollmentServer) EXPECT() *MockEnrollmentServerMockRecorder {
	return m.recorder
}

// TPMChallenge mocks base method.
func (m *MockEnrollmentServer) TPMChallenge(arg0 Enrollment_TPMChallengeServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TPMChallenge", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// TPMChallenge indicates an expected call of TPMChallenge.
func (mr *MockEnrollmentServerMockRecorder) TPMChallenge(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TPMChallenge", reflect.TypeOf((*MockEnrollmentServer)(nil).TPMChallenge), arg0)
}

// mustEmbedUnimplementedEnrollmentServer mocks base method.
func (m *MockEnrollmentServer) mustEmbedUnimplementedEnrollmentServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentServer")
}

// mustEmbedUnimplementedEnrollmentServer indicates an expected call of mustEmbedUnimplementedEnrollmentServer.
func (mr *MockEnrollmentServerMockRecorder) mustEmbedUnimplementedEnrollmentServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentServer", reflect.TypeOf((*MockEnrollmentServer)(nil).mustEmbedUnimplementedEnrollmentServer))
}

// MockUnsafeEnrollmentServer is a mock of UnsafeEnrollmentServer interface.
type MockUnsafeEnrollmentServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeEnrollmentServerMockRecorder
}

// MockUnsafeEnrollmentServerMockRecorder is the mock recorder for MockUnsafeEnrollmentServer.
type MockUnsafeEnrollmentServerMockRecorder struct {
	mock *MockUnsafeEnrollmentServer
}

// NewMockUnsafeEnrollmentServer creates a new mock instance.
func NewMockUnsafeEnrollmentServer(ctrl *gomock.Controller) *MockUnsafeEnrollmentServer {
	mock := &MockUnsafeEnrollmentServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeEnrollmentServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeEnrollmentServer) EXPECT() *MockUnsafeEnrollmentServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedEnrollmentServer mocks base method.
func (m *MockUnsafeEnrollmentServer) mustEmbedUnimplementedEnrollmentServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedEnrollmentServer")
}

// mustEmbedUnimplementedEnrollmentServer indicates an expected call of mustEmbedUnimplementedEnrollmentServer.
func (mr *MockUnsafeEnrollmentServerMockRecorder) mustEmbedUnimplementedEnrollmentServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedEnrollmentServer", reflect.TypeOf((*MockUnsafeEnrollmentServer)(nil).mustEmbedUnimplementedEnrollmentServer))
}

// MockEnrollment_TPMChallengeServer is a mock of Enrollment_TPMChallengeServer interface.
type MockEnrollment_TPMChallengeServer struct {
	ctrl     *gomock.Controller
	recorder *MockEnrollment_TPMChallengeServerMockRecorder
}

// MockEnrollment_TPMChallengeServerMockRecorder is the mock recorder for MockEnrollment_TPMChallengeServer.
type MockEnrollment_TPMChallengeServerMockRecorder struct {
	mock *MockEnrollment_TPMChallengeServer
}

// NewMockEnrollment_TPMChallengeServer creates a new mock instance.
func NewMockEnrollment_TPMChallengeServer(ctrl *gomock.Controller) *MockEnrollment_TPMChallengeServer {
	mock := &MockEnrollment_TPMChallengeServer{ctrl: ctrl}
	mock.recorder = &MockEnrollment_TPMChallengeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnrollment_TPMChallengeServer) EXPECT() *MockEnrollment_TPMChallengeServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockEnrollment_TPMChallengeServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockEnrollment_TPMChallengeServer) Recv() (*AgentChallenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*AgentChallenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockEnrollment_TPMChallengeServer) RecvMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) RecvMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockEnrollment_TPMChallengeServer) Send(arg0 *ServerChallenge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) Send(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockEnrollment_TPMChallengeServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) SendHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockEnrollment_TPMChallengeServer) SendMsg(m any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) SendMsg(m any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockEnrollment_TPMChallengeServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) SetHeader(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockEnrollment_TPMChallengeServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockEnrollment_TPMChallengeServerMockRecorder) SetTrailer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockEnrollment_TPMChallengeServer)(nil).SetTrailer), arg0)
}
