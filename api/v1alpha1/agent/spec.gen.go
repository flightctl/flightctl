// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/cm6Muv+w/1/BQAA//8Vj8KTooMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
