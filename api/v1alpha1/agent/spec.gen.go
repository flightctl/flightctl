// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAAA//9Xc/tnkU8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
