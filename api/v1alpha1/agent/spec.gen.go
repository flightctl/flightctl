// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/w8AAP//L9vHXTI5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
