// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
