// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
