// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
