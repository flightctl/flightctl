// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
