// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
