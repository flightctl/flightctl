// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vwEAAP//AdJCgyF5AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
