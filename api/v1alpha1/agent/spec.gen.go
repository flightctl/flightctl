// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
