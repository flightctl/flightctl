// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XXevOUL/EfMH6yL/8PHh/wIAAP//zkeZIXx4AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
