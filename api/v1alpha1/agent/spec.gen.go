// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PwEAAP//j35oBrFxAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
