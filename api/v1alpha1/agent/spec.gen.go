// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
