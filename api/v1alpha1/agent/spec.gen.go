// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
