// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"dvioPkP3MfMnawP/ePf4fwEAAP//i2ypuS2HAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
