// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Yqqs0zT9tVqYDG4a7R52/x8AAP//wOv1yTNLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
