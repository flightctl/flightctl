// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
