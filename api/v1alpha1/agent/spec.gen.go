// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
