// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
