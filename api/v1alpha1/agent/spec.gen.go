// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"d4//EwAA//8eW8ocHI8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
