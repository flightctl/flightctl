// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LEwGN422d9v/CwAA//+RG6hIO08AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
