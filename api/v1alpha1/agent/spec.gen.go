// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/0UExnKBcAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
