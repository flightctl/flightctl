// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
