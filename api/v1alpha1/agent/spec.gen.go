// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
