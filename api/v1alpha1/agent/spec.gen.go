// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
