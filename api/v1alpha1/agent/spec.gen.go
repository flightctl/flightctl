// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
