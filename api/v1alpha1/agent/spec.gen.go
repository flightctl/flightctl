// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CwAA//+/qwHysnsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
