// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"QK7+ZAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
