// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8e7x/wIAAP//2IELKCKPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
