// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
