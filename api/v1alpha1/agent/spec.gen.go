// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p8J096QWC3ODmya7+93/BQAA//8XR90RB1EAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
