// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
