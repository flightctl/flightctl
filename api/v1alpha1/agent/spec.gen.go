// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X3UAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
