// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9F8zf7Iu8A8fHv4/AAD//50OkjxdfwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
