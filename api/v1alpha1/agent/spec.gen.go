// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
