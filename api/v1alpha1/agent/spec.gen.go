// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"eAcLxcKe4ObJ4/vH/wkAAP//NLImZ05kAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
