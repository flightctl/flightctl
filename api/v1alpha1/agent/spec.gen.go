// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
