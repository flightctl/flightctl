// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
