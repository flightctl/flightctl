// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"soX14ObJ7v3u/wIAAP//T1nNtVxrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
