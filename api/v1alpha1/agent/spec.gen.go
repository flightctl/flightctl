// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xcAAP//Pw4lz0xrAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
