// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
