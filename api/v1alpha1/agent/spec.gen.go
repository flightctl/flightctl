// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP///G7Cxz1nAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
