// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
