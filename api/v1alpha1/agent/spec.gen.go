// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XLcNvLgq+C4vyrb2fmQ7CSVqGorq0i2o4tlqfSR1K5Ht8aQPTNYkQANgCNPUqq6",
	"d7g3vCe5whcJkuAMZywr99s4+cMa4qvRaHQ3uhuN36OYZTmjQKWIDn6PRLyADOs/D6eCpYWEcywX6ncC",
	"IuYkl4TR6CC6gJyDUM0QpgjbumhGUkA5lotRNIhyznLgkoDuLw/2c7WAqrWqgiRD2PTDKJILQGIlJGQj",
	"9JZJQHKBJcJ0heAjEZLQual6R9IUTQGxJfA7TqQEqiCAjzjLU4gOovES83HK5mOc56OUzaNBJFe5KhGS",
	"EzqP7u/LL2z6b4hldD+IDvP8Sn8Lga1qIzbTMOI8T0mMVakelxZZdPDOIFdAdNMcbRB9HKpKwyXmFGcK",
	"Q+/caEeukQHA9XvEqAQqFSw4Tc9m0cG736P/4jCLDqK/jKtlHNs1HL8iKbhG94P1dS8gxZIszWKryhw+",
	"FIRDouDSK3fTQk8Dvpd0+QvmZqlrCw9VAU4Souri9LxWpbEUgwa2X9Il4YxmQCVaYk7wNAV0C6vhEqeF",
	"IhvCxQARquCCBCWF6gbxgkqSwQipxbqFFcI0QaYF4HiBskJIRTNTkHcAFO3rCs+/eYHiBeY4lsDFKGpN",
	"u4NOHBrOOVuSBPhlDnH/tQrgUa1CHZG4osYNfelq94NIkVbHnqsGRKpWiY39//u//08dByhldD5AQmIu",
	"0R2RC4RRClICR4wjWmRT4AONu5hRiQlFlKG7BZEgchzDqNdW+z1iFHog6iTDc+hC9yYqP6Epod2tb+5v",
	"1q/tpcSyEGGOYMoUP8BIEDpP6zi2vCyBJTEocSzinEOOLU+4VCg2f14UlJq/XnLOeDSIruktZXc0GkSK",
	"QaQgIenPV+oz8MdsFXpAtMoqqFpFDsxWQQV3q8ibSB3Rv7C0MJRbbZ86uo9hRigIhDX1JmipW6BCQIKm",
	"Ky2T6iy5vpXCG+Oakg8FmP1gGbvfr6J9QkP8vk3fPv/Ug918Is0blLQINoS3JguqT93MSLRn/4YIqenX",
	"I1tbWc2RSMhED97TWMNqr2PO8Woj/zTNDH2s32UPsuRvW2sdWE+1nDPgQGMIaUK2SGkuZo/nKVtBgs6O",
	"ToYKRynBVCKiVlFxTLW9ZjiWaIrjWyWo1o4doiUfng0sS1wWWYb5qifrSlMfiaKbbf0EOJWLVTSIjmHO",
	"cQJJgFVtzZ7q0FZjdFbxBu+sE+BM9QoluPeD6EgRzExVg0syV8zuAj4UIGQbbZ1VEfeUY8Ttx5laeiTI",
	"nEKC4qotmnGWaSwfHbapFufkF+BCj9gE4PD8xJahxLJDTUrmGyTI7EpD3kRUYFmRNFN7xlDNCF0CVw2R",
	"WLAi1aJ8CVxNJWZzSn4rexOOzFMs1bQIlcApTo1mZfSADK8QB9UvKqjXg64iRuiUcUCEztgBWkiZi4Px",
	"eE7k6PY7MSJMsZWsoESuxkqf4GRaSMbFOIElpGNB5kPMY6VdxLLgMMY5GWpgqV7YUZb8hYNgBY9BBLfy",
	"LaFJG5c/E5ogotbL1LSKYokyt08vXl5eITeAQavBoLfoFTIVIgidATc1y5UGmuSMUKl/xClRiq0ophmR",
	"wtGLwvMIHWFKmdbLijzBEpIROqHoCGeQHmEBnx2VCntiqFAWRmYGEidY4k1y4Uzj6BQkVq2EFUzrWnTu",
	"LqvpRaIUEbt1Y5o3+au33yypeJO0kIdY7npwW+T2K8d5DkoWsIImCCspxocxB7XG6OjyYoAylkAKiWLB",
	"t8UUOAUJAhGm1xbnZOTxEDFa7o/WgtDmLPAxJ9woYxAzmoiQaNPtzZGqZBpLnJKEyJXmaJqAq4HVMDPG",
	"Myyjg4hQ+eJ5RTWKU8yBK2zBR8nxugNhqWy0KK6uTLROiqpjhKWhdRBOtCv0GtuBw7FmuArPOcuLVH+a",
	"rvTXw/MTJPQGVrjX9dXMFWMjWVZIdfoMnAsNHQUlhTpwTbGAb78eAo1ZAgk6f3la/f3z0eVf9vcUOCN0",
	"imW8sJxcUduolB8E0gQRirBPD+uEkGFStSWZriSE9rEWS/xtUEU6oYkhMg0TL2nCtDEcX3PODwVOyYxA",
	"ojXoIL8oSID3Xp8cP8I6eUAIPA8pwNf6u8a6moYWBqBV4ltYIdPKm789ChAhirpEr2nLGwlYTXmzbvoI",
	"iGlwQkfNNeLYjvV1KPEVQeE852yJ03EClOB0PMMkLTggUWqk5Sw9+4LowDsis8o0KNocz6sa3qO2y7aO",
	"NqgQh5hS9Uuc99pdir1qNhdAxlFZZjRvtbLM32kj9LPSTlHsVeSADjXqIBmgY6BE/asw9AqT1ADV67hW",
	"Dh48pvnU4E0hSANlR90TrJYvAYlJKrQAYRQQVltOuuWOC861QiTVmjrlVRH1hcfS6kubYiGvOKZCj3RF",
	"usxeqh6SJAMzUgmaLNtCYtQ0BZclQ8kQpkwugNdWW+ljQ9VXWDESil+0ofipyDBFHHCiqcnWQ8TsCaVm",
	"OuzgKSukhbgEL8jQ2FRv9+Q1UDByOjz7kdNkRvOypmEqdWzcYaE5n5JZCSpyM6wv17/9OijXOWARPKmg",
	"p1NOYPYMmRqV6uDGfCJ6zbSn0ud6dUqe66lnM2M+bewA3UMJwSBEciUCqvVfu1k2WzlqOBpoomQzdMXV",
	"SesVTgUMkD29+odzVR4NIl1h6+N4AzrbV+Or67rxuXaSrmGzTY/We1JRHfEPNt5sHKeLBtHV+ekvwLWO",
	"YQ70rsDwQD1nxQDbVeMYhCDTFJo/HE85x1zoqpcrGus/flF6rqrB0pQV8oSeczbnINTiX6vTmDXa5hC7",
	"qqdFKkmewtkdBS40XEsSwzGogxgR6lihGvVbiJeUszTNgEorT735tsrq0+0UyV4XnXVKXHbWKJHcWaMO",
	"zgXkTBDJ+CqIeoXxzoLW+viF5Vq9SgGkWwX9I7RqZjW8tTMf/BU0X/quoyHzGZk3Ta79DLuviQw03+TF",
	"+LnU/i8h5iB3cIHsMOpPUuahZhoHeeFW5ZRRtdBt71ddXmem2mbnamVqYcg22qy6+r0H7e7rXaHtmZhZ",
	"ckZffswVLYUVHc4ogrICMvJSizrVd1Kk2ohEMhCjCVWTtDWIQO+/Qvb/9wdoiE4JVafXA/T+q/cosyfC",
	"veE334/QEP3ECt4qev5CFR3jlULaKaNyUa+xP3yxr2oEi/afe41/Bbht9v7taEIvizxnXB0z1EJiyRQQ",
	"Q1XxoDy0Ku3bGM6ewmg+GuhuCEULBXLZHyyBr/S3Z2rc98P3B+gC03nVam/43XuNuP3n6PBUrf136PDU",
	"1B68P0DaVeEq7w/2n9vaQmoteP+5XKBM49C0Gb8/QJcS8gqssWtjgGm2uDQevPpcvqtQouTyd16TCX1p",
	"Qg0U5tDe8LvB/rfD5y/skgZVmaNCSJYZxnJCZ2ydOaSpTWlrkbH5JijWHSG7wewCBIdsHne9Tgg1xKgP",
	"ilrxrNv9W0qMAbwNnPleN4Hni5UgMU69/r5Yub9Yub9YuceVAtL/dGPb7GC/vuncxy3XfNtvHLZRNY6z",
	"vut8vY9cn5WSVVj6m6ASezyQmCgtDN0tSLzQtg/dEvVyxathdORKgI++LUdxdZA7SZcH1HDv3pG335qF",
	"g0juB93e+OoMaKuUjm69yRpw7eacbx6PO2w/pc9ZrZeH0HLyveiq7nMNSTVhKjj6WWj3byMiIeCSrpMp",
	"saJ0LZn60s6YWxzn00YIPwLiQQwS6x3yTXxvxKrRw7sQeeTZzyorgsGX2k8zMm+jjQNNgEPSKYYvbAUn",
	"eDv73WRVro+zdpKCpZ0ahi32FQ1rLNGfY0YpxNauUC52e97CKOsnx2FGZIvRybFvsmqMECYM0/LUEx0N",
	"ei91vXIUx6gda1NwW/fD32qhjjGmWloKYy0mlEiCU/KbMWuWganAM0JxOihhlsw1GyCQcddy4eSMpqvo",
	"QPICGqTZmNXAQ2D3Uvrn5jYiXGdW78SOpJL6abu0h7fWUGI+B9lPbPqgXOl2YWOf6bLflLx+2my8dCaZ",
	"zSLUCK2pZSAXLKlvKd8Edk1BG3y0gSuWjK8uQNTgW2dIWgex1/O6avVRSyycKDnIiVwdLSC+7WJI3XWb",
	"u7fOsohrgWLVBOXA1Y4wPvEdZcAwKAOqE09zTAPRJ7D+7snvxvs7e9pgRd4CmRXVucjNayrc6d+3sZYm",
	"vm3oMDSBaqR1dXwYuuuV0HVXqeBuo7XTJm+Vky4Sbe3dvHGC16Mk6tQhV7sTjSKErVWciry1elMBvUG5",
	"UbVLXLXlI8mUJpjlbu6Nzpe6ZaWj9nOc7bSrbOSyWSKnWss8+xQ877wx28D03pqdAsAzppf0Hd6eO23F",
	"xrbomFLXztqwh9vbt9p2b8gM4lWcwk7KbOpaP8AxoGn0qjp/KBnQmOtu7D/USRd5+ReUQhhr83njVrJr",
	"XPd11L9sSWgNqJuk0iiuQREoD4G2oVqN6M5EOCjPL0WmaGoVN6MPorPL8hjQqXtkQbf/Va0TEwtujCUc",
	"XV+82XxwMv12E8aZ2GkLnV32nsIv9YOfm0ZwX+iSYzLvDIdLdFmzL2NqR2KBn3/z7QHeG41Gz/qipj5o",
	"N6JK/+FW6CqtrZsEfZwX/dhBHQ4ntBIibj+lfQYZ46vde2iG/eRFVHZqoeuL2vXOPVHz7hlkG1t2+4rB",
	"r5jbjX7EiSQxTne+bBAC1L/L0C6tBg+VegCFih2QoTI/WMKzA3ewpQZTwmt8KZWtqd8ln9w6dHe65tNw",
	"IrfCG41hqBsQU74DDEEfdmh4wdKQgVWHgzlsxJIsK9OOtWn0h6VusQpGKddF1ta2Ch3m1RMOK9+M7dtw",
	"rYD5SYFW24PWa25XxAZ898dBw28ewoK5yZ10mNpMoY5cJYrR1j3+jfgBLOPFOZYSOA3akt3K6oootzVr",
	"k2mZn43P18FRUCK1iB6YS6+M63+VliiK2Yx8HCBzo2cBaToUcpUCmqds6gbT8OvR8RwTKqQLbExXKGU4",
	"ATOEhinDH98AnctFdPD8m28Hke0iOoj+17u94fd4+Nvh8J8Hk8nwX6OJ/u/dZHLzPyaT4WTy1WTyw81f",
	"n/69X71nPzydTEbvTMVQ8X+FpPnmC3zGb3fOUhL3FD7XXgtDrvedcmW9YaltSgrr9cK7O2iZJ7JtM6zP",
	"wiQ1Pp9YFjit4k8/lddaVctnudWRYgv+0nbSBfYYbrsatu694arpH8FcroHGo3GmObeNwmMwvNdH76dG",
	"LfvyphfDrvwo2rBij6w7mR+cxeQSgPaJPrZkYYJtgbrofcv/+ltMyjPdTsfQLQVL2aYmWrbVNbUw2IY4",
	"WwRpuLSLm+nRQVW/ZFfJNpwq6bALeTujBlV9J0bhjemj0Se/koz12lTwVljzSM2ngG7dfHfvq0erC8yT",
	"O8xBx7+YMDBC51ZkolpEysN7ZS0MLij/IfyyAdTsZpbZ6pZ12MR3piMzwxeqL2DKmI1ZPWd3wCE5m81q",
	"NsDDO0ykDsC1jkkTnT1LSSzPcSG2tNjUJuSB1irzoA2U1s8/tSJ/ToHi2jQD5U0bUq0whIxAtSZ+quWs",
	"cZd+UXlnufPmmt3gXUKEjzkT1f0sPAcqRxP6EscLfbUsZpyDyBlNzGWTSgU328LGnsU4x1OSErkaTejm",
	"+D4zidquilmamhw5ZZBWp2qjgOyMBlDS7HCu8/GYKsFN6MdddfTh1VDagwkwtXhqRR9WPSvSCfnsf2RM",
	"opPjbboy4ZN9JEkrYlOJTscEDbbDszwrOeWl45Q9wWtGd/kILbHQhmJQX75uvtXSwjc4sHNdUxtBM0zx",
	"3NxX0nzZyCidhylOi0SV3C2Auu8u5HIKKGF31J6AlByx194CPjNb79JET2/Ub8xkytqlnN+1/f0GtCU7",
	"WVwNTA/qsfDFo+n+IcVjbbK7icd2F1v4LCqElQ6L/IodY33X8qyQZzP7t3exYxejYA1Ib4hAqT9qsHHj",
	"hkm91Lf7EXG78erE1rcVBv+fXbcIchR7EtasxHSgmQkRt+aq9TYZBBPCQQeolCkEnTFLdV/vc/1c1uS6",
	"Oy78u5UzXKTqaLan9PM2RBn+SLIiqxIn4DRld35gqQlOkwzFNguWSVRXNqj4pbuQniCso+mZ2thL6zcG",
	"NUfb93SlztjqfFlQIkeourJRftSXhw/Qe2FuPwiT+mGA3mfmg7nQoD4szAd9dUOvRWWTevrDwbv94fc3",
	"k0ny1bMfJpPkncgWN0HT0UsaMyUL+kRHga1rqFEHt+nlwxI3ovp9ZpCnmChtyCRY6H23zgx1bhu73z/a",
	"Tu4DV+za4LeqrMn8Y2+6qwU3EVdrzUpfrkN8uQ7xJ7wO0dpQ292MaDd/2CQ/HTdycdqDNbiqVRaEsC5X",
	"MgrPMmo5hs5/2hkFi93V3jX5Nu4WIBfA/fQSaIEFmgJQ5Drw1nzKWAqYGsvmFNJPSeJ66JKpmJ70QTfP",
	"01WVNq/jrllr8ew8t1qhSlXvp1d1L3Vbodkw6KYV9/wSn7r2hx3RFlr8Y2mv0Pirf4dFbeH7mZxdix+7",
	"7u/UrwGpuj30SK/XgT+lgDo22HIJdnAOBRBfLtAoSGvhA3SwmpE6XkUzcqvuE+GihrS7JBBuInh4CUIJ",
	"pvxcOcLc1/dpKrCB6963/rfSPge/cHlKrIPE5Pz2WAgRpUtlARQpseotIREhBtfBYxRWe7GXLgtAR8Xt",
	"6LDVSdfGNwJoJ3bmufg2ZUfyKaqdImm0deKjdpofCE/5cVMZ+WnTg3iITaFZoxkJRZ/G69rrAwuS8FGi",
	"p9dXr4bfPUOMN/PDeYPom0Ak7cSwqufOL5vpwDuOBQ1cavrdl5ZUaXlNqT3vOWdFHp61msETgXSNgXek",
	"BaI1EuxSOduc4sBJjE6OR+jYnLS1vjCJOGNyEoW1UpbA2qFz4DaYRudWHKF/sEIr6wYYY4nNlGo9wxlJ",
	"CeaIxRKnVc5zrE+nvwFnLifA3rdff62XDxt+HpPMNjBXmUJtvn6+90ydFmRBkrEAOVf/SBLfrtDUHtBR",
	"GSs9QiczpE4DJcYGxhBbn4w+Y6p5Kh5YIUyBF762Wgjga7HF7nRyvwdfqC6a287stc3bBjWK3lS59upF",
	"8CGEcs91mInCSV1a16nnRF4oMEJLwP2U0hi9JrIelGWz+21jIXN2MXuDcUbm7pJhlZyn4/q0K96s6lVd",
	"1bJPtuOJtEpzAUvS7V3itlQBXQgvS/JaeFu3TUvgW6MOumx9655N8GfbiFzsnbvbrnxo4I4kOy3iUaf+",
	"ntRD0U9XV+c96Uft/fB7L+qroxijZT0R5ukV6+6UzDtdOOnFQRacVn4uDYqAJXDPvOm91/JJ1Mfb1OeI",
	"B9vrhSsaozV0aeL6QpPnpSS+vnhj83CyDATCM2nP00qA61B+dCL1BV3jBwP0oQBtmOY4A/2ehijiBcLi",
	"AE2isaLBsWRjZxz6Qdf+m67dxT87KbxcvscnakeRoZHXvtmxyxMpobcQWj6PjlsMrXT9ZYYJewUhkPkB",
	"5Ti+7eU+6Lql0YmW8yJNq7DJyq1wMnvL5Lk5K7QcDC7UoC50n/htnozQr+oUpM5QquwwvcMr8cQoD2ai",
	"RKC8SFMl2nUOJPNYTq3VW1VSa6SficGpycChE6123x81Y0aD5mR0rz0N9Qo/ZT/qR6Mv9cn251Da5xGM",
	"kjh6vrtxqZnGFpdy2m0D0av+DSPLsIx9fsPLEQHBXyOjjZPyqG6Lxy02A2bSU3OYEyH5aoSu1KFcqdhT",
	"MFEttZ2mGpq8qqX/8ezopOxsoNh2yuhc/WtVIMaz0heh6pqOhO9R7MMz1z2esf6RoM/HrkyM1ZpQdp8h",
	"WQG7y4WNSm1ef0y2APXkZV1pBQ+2n6c5xkhmM123+UuvGZdnikCM8OcVhZ2IG0RrUzf2zLi0PZiDSOjR",
	"+p43KiiRaRi4f8EKKnfUFGt2aDOApw3qnms2umoa/RBSwRzsQD9K1t2LLt7YVXjlq+4HHoZuNlkbbetq",
	"kUKkc6rv4P0J0mx6XsN2jGVZprSXMl2OeRQyTVEOXBCdnL+6r6k1lgVewsCSndXLhW5hoNXJtbita9hO",
	"wNZKKZPVXY8dzdpVZZNiuxX031p5l8C/zLewxsdjrl1o1/QdFu6tgP6OnQRS2GUs+/ymbr7NePM1GcsP",
	"kYAPhWZLNh9czTGPS7GPvGzmZeiYSbRjvCbovPlEgntT9AJwMmQ0XfVMcP7JXo1TrNNl2HiDW1iJ6llK",
	"6+NoJHdifI4p+c3E3MdYwpxx9fOpiFluvgpIIZbPHDEHqagf77SBIcEk83c0ZDI89AMjsETsTr/PoCNP",
	"zPeBkgYT7Wcfq7EmkU1825WuT7fqDoChiOX4QwEOiXpYojOrlKFExsDxRHiRKtXt9SoApp958hzLeOEF",
	"AZX6R5gGZjove4N5sI6dZCN3jZ3L5uTxz1A4SfQtkTw1YoVDxpZ6K9VvuVcIDNsAD9H/vDx7i86ZRkj5",
	"RG+rtSbEMKgmOEZpCEmidHcL1KglF1i+zrjWVMZqT8+ufWcYcVt1+2eGDwNtH/R9YcHjMaEJfBz9W/Sj",
	"KicAD1Pg8sKGJ+fdFwzaU1rUE1o1vMnahqH6Drt2iy6268IclYSVjtereXtaG14CVwevQlhDQpk3cwoz",
	"xu3AhM5H6JXe6gfroxafiCf1cMQn2ZN6OOKTxZPOcMTJJPlrdwRiDjwGKjuzclTlCmtmRsbXzMl8rrSC",
	"ECaNRDK69RL63BmsrfelbRQOp3Y9estUm0ddqNxsIq7aYO0YTFvaohnHgoLZF/T9h34mnE5Yqo47q3gj",
	"dtYxoHiTdjfQ1VSJmmpGKLYfMpzn1k96dH7d6UwOJ7Q38dqdERAdsdxOd+9q163Z35fMbWWe5qqp3Eom",
	"93pmoGM2mzT0dXBtiAXpwMT9zZoDRHsB115ICYeP45rjqaG/O0a7LhuCroS4qjVCZzRdmQeK9NccOHJ7",
	"U8eTGAa2dYaEiuOHciQoiULo/ETJ6WBoYcmg3cPlLtZdN1VwPwLPLeO/uxjvmrPiwF+KwIxDDG3DUznE",
	"qAey4NTqKQrwGKcucChh9InzRyFjc/S05S/h1583/DoOxmZcFvO5eUpP+wXt4sQunEHjz8RDDdAeIjYO",
	"wthjejwy+SXm+0FjvjveM+ujhvr34BQe3ZmnKy18xxtiGY4XhELnUHeLVWMAtdDWFDnRiRMLro6fNvsG",
	"OrEAGRIgAkGWS20g4PonZfUovSUmqX48ER2iC/OQWZxibh+LtJ524YJ+E0DTQnEeEJpylQ7NSQKIyA13",
	"8tZdHK+Qh870a2AHaBJdFvr5pEmkzmXeTD872Ygc4iGmybAzR2KP0PvySTXNJno+onZFMvgnc54E5zZ9",
	"w4yy2M5Uin5Tgrw0E3BhhaFG6snh20P3Gs/hxcvD8Zuzo8Ork7O3A3SniUF9rF/uUQgjVIfoccRiwNTw",
	"Ydey9oxojrkkcZFijgSRoAPEiH16D3PAA/MUjTlNokMdVIXHb+HuX/9g/HaAXhZKQI3PMSdOLSkozqZk",
	"XrBCoBfDeIE5jnUogptrI5AMPZ1Er0+vJtEATaLrq6NJ9CxIhdetK7NNr2Ul9eyzRoZd40IytVHi8n6v",
	"VshoEroZLJVOPrdpJOy9eQU5K0JBrhtzezeeZjKbicvXHMfgX9tbq7S6ekop84hrXZuSCFtkHooOu/dy",
	"92pfaKwnBhkmaXQQScDZ32cpmS9kLNMRYZGz2ulz6itdgo7URmUpugKcRYOo4Kqp29q11i3b47t6FzdP",
	"Q82eWeFog6z1BTxQXM5YT/Stb8hsaOosBZCaNUEyd+4eY9GUCyAc3TF+q0hBmIwFKYmBCqicW9FhjuMF",
	"oOejvdZk7u7uRlgXjxifj21bMX5zcvTy7eXL4fPR3mghs9QsmNRmmAaSDs9PokG0dMpctNzHab7A+/bm",
	"PsU5iQ6iF6O90b41WWmCU5xuvNwf+y9sm3B5J7O1rYaF7gQeGacl7vkyc8nOT5KycWfLqHxj+kdmnk7x",
	"Ao099/D431aCGjrd+Y10Q7IVXUtegDHR5kwther4+d7+YwESQnSilvLrvb0Hg6G8MtYa8EecoBIeNej+",
	"Iwx6TXEhF9rib6f64hFGfcX4lCQJUDPk948wZD0jixr3m0eZ6qVhdNe01O6MuRbPtfGqkwVEN6raZk4x",
	"/l1xunsd8gsyZODGSfnYu4m07twGbYbxGuQ6blEFHWoj0Xrfz2aGpY6hc3P+IqoHGw9tWXn5TJDPLgbe",
	"AjVthQUlHwo4MaYTzVuMgajGXfb+GO5y9vOfbI9//QhDvmXyFSto8t9td1u9xm7lsXvDqHNPvwZpI5Lt",
	"m0mJexSxS/C/BukeWLIPK265ee2zi2aD1gcXTYPpw+zf+/ZF2DLHoU5wghpvPZXD6hDnalxd+aLxLtS6",
	"cT8nk7DY7+QIz81GadI18qLq/iim8Ug7GJVb+HEUg0ol8Dau2VBrd2llTsmxjMOBai4Izbt0ebxpq+pm",
	"tduuu21VX6hqCB9qW95sc0oY6qH/ut1i1QIiep0RHm+DfjkL/EfoCeiPURRQl6ZQMpxBlBcBkX9t065t",
	"y00uTBDNA/OTKmXaozOU3XbyF/7xZ1AZNgjwKltDfzMbRaEkXOvta+3MXp+HwNvjPLI9rQOAL3a0/2A7",
	"2h9mQesUna1tvWnXbzKZqeP1lhv/NcjQrt9KznaP96B2sc97vu3FEr4Yv/4cSm1wZ+qQVh3VoveE8cmN",
	"zbU/066d+dxuNf04e0Md1TEBdidYod82HNV76N5ofmdt4O9v7v9fAAAA//9ZdCan0KYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
