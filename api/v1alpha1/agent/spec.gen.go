// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XAc3TXY3u/8PAAD///cVQqtmOQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
