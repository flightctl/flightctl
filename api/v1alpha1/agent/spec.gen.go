// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9/XLcNvLgq+C4vyrb2fmQ5CSVqGorq0i2o4ttqfSR1K5Ht8aQPTNYkQANgCNPUqq6",
	"d7g3vCe5whcJkuAMZywr99s4+cMa4qvRaHQ3uhuN36OYZTmjQKWIDn+PRLyADOs/j6aCpYWEcywX6ncC",
	"IuYkl4TR6DC6gJyDUM0QpgjbumhGUkA5lotRNIhyznLgkoDuLw/2c7WAqrWqgiRD2PTDKJILQGIlJGQj",
	"9JZJQHKBJcJ0heAjEZLQual6R9IUTQGxJfA7TqQEqiCAjzjLU4gOo/ES83HK5mOc56OUzaNBJFe5KhGS",
	"EzqP7u/LL2z6b4hldD+IjvL8Sn8Lga1qIzbTMOI8T0mMVakelxZZdPjOIFdAdNMcbRB9HKpKwyXmFGcK",
	"Q+/caMeukQHA9XvMqAQqFSw4Tc9m0eG736P/4jCLDqO/jKtlHNs1HL8kKbhG94P1dS8gxZIszWKryhw+",
	"FIRDouDSK3fTQk8Dvhd0+QvmZqlrCw9VAU4Souri9LxWpbEUgwa2X9Al4YxmQCVaYk7wNAV0C6vhEqeF",
	"IhvCxQARquCCBCWF6gbxgkqSwQipxbqFFcI0QaYF4HiBskJIRTNTkHcAFO3rCgffPEfxAnMcS+BiFLWm",
	"3UEnDg3nnC1JAvwyh7j/WgXwqFahjkhcUeOGvnS1+0GkSKtjz1UDIlWrxMb+//3f/6eOA5QyOh8gITGX",
	"6I7IBcIoBSmBI8YRLbIp8IHGXcyoxIQiytDdgkgQOY5h1Gur/R4xCj0QdZrhOXShexOVn9KU0O7WN/c3",
	"69f2UmJZiDBHMGWKH2AkCJ2ndRxbXpbAkhiUOBZxziHHlidcKhSbPy8KSs1fLzhnPBpE1/SWsjsaDSLF",
	"IFKQkPTnK/UZ+GO2Cj0gWmUVVK0iB2aroIK7VeRNpI7oX1haGMqttk8d3ScwIxQEwpp6E7TULVAhIEHT",
	"lZZJdZZc30rhjXFNyYcCzH6wjN3vV9E+oSF+36Zvn3/qwW4+keYNSloEG8JbkwXVp25mJNqzf02E1PTr",
	"ka2trOZIJGSiB+9prGG11zHneLWRf5pmhj7W77IHWfK3rbUOrKdazhlwoDGENCFbpDQXs8fzlK0gQWfH",
	"p0OFo5RgKhFRq6g4ptpeMxxLNMXxrRJUa8cO0ZIPzwaWJS6LLMN81ZN1pamPRNHNtn4CnMrFKhpEJzDn",
	"OIEkwKq2Zk91aKsxOqt4g3fWCXCmeoUS3PtBdKwIZqaqwSWZK2Z3AR8KELKNts6qiHvKMeL240wtPRJk",
	"TiFBcdUWzTjLNJaPj9pUi3PyC3ChR2wCcHR+astQYtmhJiXzDRJkdqUhbyIqsKxImqk9Y6hmhC6Bq4ZI",
	"LFiRalG+BK6mErM5Jb+VvQlH5imWalqESuAUp0azMnpAhleIg+oXFdTrQVcRI/SGcUCEztghWkiZi8Px",
	"eE7k6PY7MSJMsZWsoESuxkqf4GRaSMbFOIElpGNB5kPMY6VdxLLgMMY5GWpgqV7YUZb8hYNgBY9BBLfy",
	"LaFJG5c/E5ogotbL1LSKYokyt08vXlxeITeAQavBoLfoFTIVIgidATc1y5UGmuSMUKl/xClRiq0ophmR",
	"wtGLwvMIHWNKmdbLijzBEpIROqXoGGeQHmMBnx2VCntiqFAWRmYGEidY4k1y4Uzj6A1IrFoJK5jWtejc",
	"XVbTi0QpInbrxjRv8ldvv1lS8SZpIQ+x3PXgtsjtV47zHJQsYAVNEFZSjA9jDmqN0fHlxQBlLIEUEsWC",
	"b4spcAoSBCJMry3OycjjIWK03B+tBaHNWeBjTrhRxiBmNBEh0abbmyNVyTSWOCUJkSvN0TQBVwOrYWaM",
	"Z1hGhxGh8vlBRTWKU8yBK2zBR8nxugNhqWy0KK6uTLROiqpjhKWhdRBOtCv0GtuBw7FmuArPOcuLVH+a",
	"rvTXo/NTJPQGVrjX9dXMFWMjWVZIdfoMnAsNHQUlhTpwTbGAb78eAo1ZAgk6f/Gm+vvn48u/7O8pcEbo",
	"DZbxwnJyRW2jUn4QSBNEKMI+PawTQoZJ1ZZkupIQ2sdaLPG3QRXplCaGyDRMvKQJ08ZwfM05PxQ4JTMC",
	"idagg/yiIAHee3168gjr5AEh8DykAF/r7xrrahpaGIBWiW9hhUwrb/72KECEKOoSvaYtbyRgNeXNuukj",
	"IKbBCR0114hjO9bXocRXBIXznLMlTscJUILT8QyTtOCARKmRlrP07AuiA++IzCrToGhzPK9qeI/aLts6",
	"2qBCHGJK1S9x3mt3Kfaq2VwAGcdlmdG81coyf6eN0M9KO0WxV5EDOtKog2SAToAS9a/C0EtMUgNUr+Na",
	"OXjwmOZTgzeFIA2UHXVPsFq+BCQmqdAChFFAWG056ZY7LjjXCpFUa+qUV0XUFx5Lqy9tioW84pgKPdIV",
	"6TJ7qXpIkgzMSCVosmwLiVHTFFyWDCVDmDK5AF5bbaWPDVVfYcVIKH7RhuKnIsMUccCJpiZbDxGzJ5Sa",
	"6bCDp6yQFuISvCBDY1O93ZNXQMHI6fDsR06TGc3Lmoap1LFxh4XmfEpmJajIzbC+XP/266Bc54BF8KSC",
	"nk45gdkzZGpUqoMb84noNdOeSp/r1Sl5rqeezYz5tLEDdA8lBIMQyZUIqNZ/7WbZbOWo4WigiZLN0BVX",
	"J62XOBUwQPb06h/OVXk0iHSFrY/jDehsX42vruvG59pJuobNNj1a70lFdcQ/2HizcZzOHOHdn4br6Vkq",
	"lqcK4xiEINMUmj8c3zjHXOiqlysa6z9+UbqsqsHSlBXylJ5zNucg1AJfqxOXNczmELuqb4pUkjyFszsK",
	"XGhIliSGE1CHLSLU0UE16ofsF5SzNM2ASiszvRl2ytU+dUr0dNYo8XYBORNEMr4KIk3hqrOghVm/sMTy",
	"yxRAOvzpHyF8Gzx6WDcffNybL31XwBDhjMybBtF+ZtdXRAaab/Ix/Fzq5pcQc5A7OCh2GPUnKfNQM42D",
	"vHCr8oZRtdBt31Rdmmam2mbXZ2UIYcg22qxY+r0HreLrHZXtmZhZckZffMwVLYXVEM4ogrICMtJMCyLV",
	"d1Kk2sRDMhCjCVWTtDWIQO+/Qvb/94doiN4Qqs6Wh+j9V+9RZs9re8Nvvh+hIfqJFbxVdPBcFZ3glULa",
	"G0blol5jf/h8X9UIFu0feI1/Bbht9v7taEIvizxnXB0C1EJiyRQQQ1XxsDxSKt3YmLWewmg+GuhuCEUL",
	"BXLZHyyBr/S3Z2rc98P3h+gC03nVam/43XuNuP0DdPRGrf136OiNqT14f4i0I8FV3h/sH9jaQmoddf9A",
	"LlCmcWjajN8foksJeQXW2LUxwDRbXBr/Wn0u31UoUVLzO6/JhL4wgQAKc2hv+N1g/9vhwXO7pEFF47gQ",
	"kmWGsZzSGVtnrGjqOtqWYyyyCYp1R8huMLsAwSGbh1GvE0INMepjnFYL61b5lophAG8DZ77XDdT5YiVI",
	"jFOvvy826C826C826HGlgPQ/e9g2O1iXbzr3cctx3vbqhi1IjcOm79he78HWJ5lkFZb+JuTDKu/qRK/I",
	"7G5B4oW2TOiWqJejXA2j40oCfPRtOYqrg9w5tzw+hnv3DqT91iwc4nE/6PaVVyc0W6V0Q+tN1oBrN9d5",
	"8/DaYZkpPcJqvTyElpPvRVd1j2hIqglTwdHPQjtnG/ECAYdxnUyJFaVrydSXdsYY4jifNhH48QkPYi5Y",
	"7y5v4nsjVo0e3oXIY8+6VZ3xDb7UfpqReRttHGgCHJJOMXxhKzjB29nvJptvfZy1kxQs7dQwbLGvaFhT",
	"hv4cM0ohtqf+crHb8xZGWT89CTMiW4xOT3yDUmOEMGGYlm880dGg91LXK0dxjNqxNgW3dQ78rRaIGGOq",
	"paUwtlxCiSQ4Jb8Zo2MZNgo8IxSngxJmyVyzAQIZdy0XTs5ouooOJS+gQZqNWQ08BHYvpX9ubiPCdWb1",
	"TuxIKqmftktrdWsNJeZzkP3Epg/KlW4XNsWZLvtNyeunzcZLV4/ZLEKN0JpaBnLBkvqW8g1U1xS0GUcb",
	"o2LJ+OoCRA2+dSagdRB7Pa+rVh+1xMKpkoOcyNXxAuLbLobUXbe5e+ssi7gWKFZNUA5c7Qjjsd5RBgyD",
	"MqA68TTHNBB9AuvvnvxuvL+zpw023i2QWVGdi6u8psKd/n176C/AtTd2KzoMTaAaaV0dH4bueiV03VUq",
	"uNto7bSYW+Wki0RbezdvnOD1KIk6dcjV7kSjCGFrFacib63eVEBvUG5U7RJXbflIMqUJZrmbe6PzpW5Z",
	"6aj93Fo77SobV2yWyKnWMs8+Bc87b8w2ML23ZqcAKFfB233h7bnTVmxsi44pde2sDXu4vX2rbfeazCBe",
	"xSnspMymrvUDHAOaRq+q84eSAY257sb+Q510kZd/fSiEsTafN84iu8Z1X0f9y5aE1oC6SSqN4hoUgfIQ",
	"aBuq1YjuTIRD5vxSZIqmVnEz+iA6uyyPAZ26RxZ0yl/VOjGR2sZYwtH1xevNByfTbzdhnImdttDZZe8p",
	"/FI/+LlpBPeFLjkh885gtUSXNfsypnYkFvjgm28P8d5oNHrWFzX1QbsRVfoPt0JXaW3dJOjjvOjHDupw",
	"OKGVEHH7Ke0zyBhf7d5DMygnL6KyUwtdX9Sud+6JmnfPINvYstsXAH7F3G70Y04kiXG681WAEKD+TYN2",
	"aTV4qNQDKFTsgAyV+aEMnh24gy01mBJe40upbE39ruDk1qG70yWchhO5FXxoDEPdgJjyHWAI+rBDwwuW",
	"hgysOljLYSOWZFmZdqxNoz8sdYtVMIa4LrK2tlXoIKyecFj5ZmzfhmsFzE8KtNoetF5zuyI2HLs/Dhp+",
	"8xAWzD3rpMPUZgp1XClRjLbu8W/ED2AZL86xlMBp0JbsVlZXRLmtWZtMy/xsfL4OjoISqUX0wFxJZVz/",
	"q7REUcxm5OMAmfs2C0jToZCrFNA8ZVM3mIZfj47nmFAhXdhhukIpwwmYITRMGf74GuhcLqLDg2++HUS2",
	"i+gw+l/v9obf4+FvR8N/Hk4mw3+NJvq/d5PJzf+YTIaTyVeTyQ83f3369371nv3wdDIZvTMVQ8X/FZLm",
	"m6/XGb/dOUtJ3FP4XHstDLned8qV9YaltikprNcL72afZZ7Its2wPguT1Ph8YlngtIoO/VRea1Utn+VW",
	"R4ot+EvbSRfYY7jtati694arpn98cbkGGo/GmebcNgqPweBbH72fGlPsy5teDLvyo2jDij2y7mR+cBaT",
	"SwDaJzbYkoUJhQXqYust/+tvMSnPdDsdQ7cULGWbmmjZVtfUwmAb4mwRpOHSLm6mRwdV/ZJdJdtwqqTD",
	"LuTtjBpU9Z0YhTemj0af/Eoy1mtTwVthzSM1nwK6dfPdva8erS4wT+4wBx3/YsLACJ1bkYlqESkP75W1",
	"MLiQ+YfwywZQs5tZZqs70GET35mOzAxfd76AKWM2ZvWc3QGH5Gw2q9kAj+4wkTr21jomTez0LCWxPMeF",
	"2NJiU5uQB1qrzIM2UFo//9SK/DkFimvTDJQ3bUi1whAyAtWa+KmWs8Zd+kXlneXOm2t2g3dFED7mTFS3",
	"p/AcqBxN6AscL/TFr5hxDiJnNDFXQSoV3GwLG3sW4xxPSUrkajShm+P7zCRquypmaWoy2JRBWp2qjQKy",
	"MxpASbOjuc6WY6oEN6Efd9XRh1dDaQ8mwNTiqRV9WPWsSCfks/+RMYlOT7bpyoRP9pEkrYhNJTodEzTY",
	"Ds/yrOSUl45T9gSvGd3lI7TEQhuKQX35uvlWSwvf4MDOdU1tBM0wxXNzm0jzZSOjdJakOC0SVXK3AOq+",
	"u5DLKaCE3VF7AlJyxF5KC/jMbL1LEz29Ub8xkylrl3J+1/b3G9CW7GRxNTA9qMfCF4+m+4cUj7XJ7iYe",
	"211s4bOoEFY6LPIrdoL1TcizQp7N7N/exY5djII1IL0hAqX+qMHGjRsm9VLf7kfE7carE1vfVhj8f3bd",
	"IshR7ElYsxLTgWYmRNyai9Db5PdLCAcdoFIm+HPGLNV9vc/1c1mTie6k8G8+znCRqqPZntLP2xBl+CPJ",
	"iqxKa4DTlN35gaUmOE0yFNscVSaNXNmg4pfuuniCsI6mZ2pjL63fGNQcbd/TlTpjq/NlQYkcoerKRvlR",
	"X+09RO+Fuf0gTGKGAXqfmQ/mQoP6sDAf9NUNvRaVTerpD4fv9off30wmyVfPfphMknciW9wETUcvaMyU",
	"LOgTHQW2rqFGHdymlw9L3Ijq95lBnmKitCGT/qD3rTgz1Llt7H7/aDu5H7QvzrXBb1VZk5fH3kNXC24i",
	"rtaalb5ch/hyHeJPeB2itaG2uxnRbv6wKXg67tLitAdrcFWrHAVhXa5kFJ5l1HIMnZ20MwoWuzu7a7Jh",
	"3C1ALoD7yR/QAgs0BaDIdeCt+ZSxFDA1ls0ppJ+SYvXIpToxPemDbp6nqyqpXcdds9bi2XlutUKVqt5P",
	"r+pe6rZCs2HQTSvu+SU+de2POqIttPjH0l6h8Vf/DovawvczObsWP3bd36lfA1J1e+iRXq8Df0oBdWyw",
	"5RLs4BwKIL5coFGQ1sIH6GA1I3W8imbkVt0nwkUNaXdJINxE8PAShNI/+ZlshLmq79NUYAPXvW/9b6V9",
	"Dn7hsohYB4nJyO2xECJKl8oCKFJi1VtCIkIMroPHKKz2Yi9dFoCOitvRYauTro1vBNBO7Mxz8W3KXeRT",
	"VDuB0WjrtETtJDwQnvLjJhryk5oH8RCbQrNGMxKKPo3XtdcHFiTho0RPr69eDr97hhhvZm/zBtE3gUja",
	"iWFVz51fNtOBdxwLGrjU9LsvLanS8ppSe95zzoo8PGs1gycC6RoD70gLRGsk2CVathm/gZMYnZ6M0Ik5",
	"aWt9YRJxxuQkCmulLIG1Q+fAbTCNznw4Qv9ghVbWDTDGEpsp1XqGM5ISzBGLJU6rjORYn05/A85cToC9",
	"b7/+Wi8fNvw8JpltYK4yhdp8fbD3TJ0WZEGSsQA5V/9IEt+u0NQe0FEZKz1CpzOkTgMlxgbGEFufjD5j",
	"qnkqHlghTIEXvrZaCOBrscXudOq9B1+oLprbzuy1zcsDNYreVLn2JkXwmYJyz3WYicJJXVrXqedEXigw",
	"QkvA/YTPGL0ish6UZXPvbWMhc3Yxe4NxRubukmGVnKfj+rQr3qzqVV3VckO244m0SnMBS9LtXeK2VAFd",
	"CC+H8Vp4W7dNS+Bbow66bH3rHjXwZ9uIXOydWduufGjgjiQ7LeJRp/6e1EPRT1dX5z3pR+398Gss6quj",
	"GKNlPRHmYRTr7pTMO1046cVBFpxWfi4NioAlcM+86b2m8knUx9vU54gH2+uFKxqjNXRp4vpCk+elJL6+",
	"eG2zZLIMBMIzac/TSoDrUH50KvUFXeMHA/ShAG2Y5jgD/dqFKOIFwuIQTaKxosGxZGNnHPpB1/6brt3F",
	"PzspvFy+xydqR5Ghkde+qLHLAyahlwpaPo+OWwytZPplhgl7BSGQ+QHlOL7t5T7ouqXRiZbzIk2rsMnK",
	"rXA6e8vkuTkrtBwMLtSgLnSf+G2ejNCv6hSkzlCq7Ci9wyvxxCgPZqJEoLxIUyXadQ4k85RNrdVbVVJr",
	"pB9xwanJwKHToHbfHzVjRoPmZHSvPQ31Cj9lP+pHoy/1yfbnUNrniYqSOHq+inGpmcYWl3LabQPRq/4N",
	"I8uwjH1+w7sOAcFfI6ONk/KobounJzYDZpJHc5gTIflqhK7UoVyp2FMwUS21naYamqynpf/x7Pi07Gyg",
	"2HbK6Fz9a1UgxrPSF6Hqmo6E71HswzPXPW2x/gmfz8euTIzVmlB2nyFZAbvLhY1KbV5/TLYA9eRlXWkF",
	"D7efpznGSGbzULf5S68Zl2eKQIzw5xWFnYgbRGtTN/bMuLQ9mINI6NH6njcqKJFpGLh/wQoqd9QUa3Zo",
	"M4CnDeqeaza6ahr9EFLBHOxAPxnW3Ysu3thVeOWr7gcehm42WRtt62qRQqTzRt/B+xOk2fS8hu0Yy7JM",
	"aS9luhzzZGOaohy4IDp1fnVfU2ssC7yEgSU7q5cL3cJAq5NrcVvXsJ2ArZVSJqu7HjuatavKJgF2K+i/",
	"tfIuvX6Zb2GNj8dcu9Cu6TssXCb//o6dBFLYZSz7OKZuvs148zX5xI+QgA+FZks2H1zNMY9LsY+8XONl",
	"6JhJtGO8Jui8+YCBe/HzAnAyZDRd9Uw//slejTdYp8uw8Qa3sBLVo5HWx9FI7sT4HFPym4m5j7GEOePq",
	"51MRs9x8FZBCLJ85Yg5SUT/eaQNDging72jIZHjkB0Zgididfj1BR56Y7wMlDSbazz5WY00im/i2K12f",
	"btUdAEMRy/GHAhwS9bBEZ1YpQ4mMgeOJ8CJVqtvrVQBMP/PkOZbxwgsCKvWPMA3MdNb0BvNgHTvJRu4a",
	"O5fNyeOfoXCS6FsieWrECoeMLQPPvd4POox/R+h/Xp69RedMY6J8ObfVWlNgGEYTFaNUgyRRSruFZtQS",
	"CCxfZ1VramG1F2HXPv+LuK26/eu/R4G2D/rsr+DxmNAEPo7+LfqRk5N8RylweWHjkvPumwXtKS3qmawa",
	"bmRtvFB9h326RRe/dfGNSrRKx+TVvD11DS+BqxNXIawFoUyYOYUZ43ZgQucj9FLv8cP14YpPxJN6HOKT",
	"7Ek9DvHJ4klnHOJkkvy1O/QwBx4DlZ3pOKpyhTUzI+Nk5mQ+V+pACJNGFBmlegl9LgvW1vvSNgrHUbse",
	"vWWqzaMuTW42EVdtsHbwpS1t0YzjPcG0C/riQz/bTScsVcedVbwRO+sYULxJu6vnaqpETTUjFNsPGc5z",
	"6yA9Pr/u9CKHM9mbQO3O0IeOIG6ntHe161bp70vmtjIvZtV0bSWMe70v0DGbTar5Org2BIF0YOL+Zs3J",
	"ob2Aa2+ihOPGcc3j1FDcHaNdlwZBV0Jc1RqhM5quzLtB+msOHLm9qQNJDAPbOjVCxfFDyRGURCF0fqrk",
	"dDCmsGTQ7j1xF+Sumyq4H4HnloHfXYx3zSFx4C9FYMYhhrbhBRti1ANZcGr1FAV4jFMXMZQw+sQ5opAx",
	"Nnpq8pe4688bdx0HgzIui/ncvHCnHYJ2cWIXx6DxZwKhBmgPERsAYQwxPd5+/BLs/aDB3h3PjPVRQ/0L",
	"cAqP7rDTlQ++42mvDMcLQqFzqLvFqjGAWmhrg5zojIkFV+dOm3YDnVqADAkQgSDLpbYMcP2Tsnp43hKT",
	"VL9piI7QhXlfLE4xt284Whe7cNG+CaBpoTgPCE25SofmJAFE5IbLeOtujFfIQ2f6ka5DNIkuC/1u0iRS",
	"5zJvpp+dbEQO8RDTZNiZHLFHzH350plmEz3fNrsiGfyTOReC85e+ZkZZbKcoRb8pQV7aB7iwwlAj9fTo",
	"7ZF7hufo4sXR+PXZ8dHV6dnbAbrTxKA+1m/1KIQRqmPzOGIxYGr4sGtZe90zx1ySuEgxR4JIqB74V4dN",
	"Dnhg3qAxp0l0pKOp8Pgt3P3rH4zfDtCLQgmo8TnmxKklBcXZlMwLVgj0fBgvMMexjkFwc21EkKGnk+jV",
	"m6tJNECT6PrqeBI9C1LhdeuubNNdWUk9+56RYde4kExtlLi82KsVMpqErgRLpZPPbf4Ie2FeQc6KUHTr",
	"xqTejTeZzGbi8hXHMfj39dYqra6eUso84lrXpiTCFpmHwsLuvaS92gka64lBhkkaHUYScPb3WUrmCxnL",
	"dERY5Mx1+pz6UpegY7VRWYquAGfRICq4auq2dq11y+j4rt7FzdNQs2dWONroan3zDhSXM9YTfd0bMhuT",
	"OksBpGZNkMydn8eYMuUCCEd3jN8qUhAmVUFKYqACKq9WdJTjeAHoYLTXmszd3d0I6+IR4/OxbSvGr0+P",
	"X7y9fDE8GO2NFjJLzYJJbYZpIOno/DQaREunzEXLfZzmC7xvr+xTnJPoMHo+2hvtW5OVJjjF6cbL/bH/",
	"8LWJk3cyW9tqWPCxfuOtxD0fTC7Z+WlSNu5sGZVPP//IzJspXoSx5xce/9tKUEOnOz9dbki2omvJCzC2",
	"2ZyppVAdH+ztPxYgIUQnaim/3tt7MBjKu2KtAX/ECSrhUYPuP8Kg1xQXcqFN/Xaqzx9h1JeMT0mSADVD",
	"fv8IQ9ZTsahxv3mUqV4aRndNS+3OmGvxXBuvOllAdKOqbeYU498Vp7vXsb4gQwZunJRvsJsQ685t0GYY",
	"r0Cu4xZVtKE2Eq13+mxmWOoYOjfnL6J6sIHQlpWX7wP57GLgLVDTVlhQ8qGAU2M60bzFGIhq3GXvj+Eu",
	"Zz//yfb4148w5FsmX7KCJv/ddrfVa+xWHrvHizr39CuQNhTZPpaUuNcQuwT/K5DuZSX7ouKWm9e+t2g2",
	"aH1w0TSYPsz+vW/fgC2TG+rMJqjxyFM5rI5trsbVlS8aD0KtG/dzMgmL/U6OcGA2SpOukRdO90cxjUfa",
	"wajcwo+jGFQqgbdxzYZau0src0qOZRyOUHPRZ95ty5NNW1U3q11z3W2r+kJVQ/hQ2/Jmm1PCUA/91+0W",
	"qxYJ0euM8Hgb9MtZ4D9CT0B/jKKAujSFkuEMorwIiPxrm29tW25yYYJoHpifVLnSHp2h7LaTv/CPP4PK",
	"sEGAV2ka+pvZKApl31pvX2un9Po8BN4e55HtaR0AfLGj/Qfb0f4wC1qn6Gxt6027fpPJTB2vt9z4r0CG",
	"dv1WcrZ7vAe1i33e820vlvDF+PXnUGqDO1OHtOqoFr0njE9ubO77mXbtlOd2q+lX2RvqqI4JsDvBCv22",
	"4ajeQ/dG8ztrA39/c///AgAA///cC1EMZ6YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
