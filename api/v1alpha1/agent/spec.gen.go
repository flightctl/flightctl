// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
