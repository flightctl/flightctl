// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
