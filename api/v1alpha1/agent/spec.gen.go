// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
