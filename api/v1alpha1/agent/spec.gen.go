// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tTLOhFmPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
