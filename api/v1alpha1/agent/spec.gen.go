// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
