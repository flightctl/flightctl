// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
