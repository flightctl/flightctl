// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
