// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xFQY3r9CsbAR3Dx5uH34vwAAAP//MRHdOZpmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
