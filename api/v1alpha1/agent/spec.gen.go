// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
