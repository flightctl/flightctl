// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
