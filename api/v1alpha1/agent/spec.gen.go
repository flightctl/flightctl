// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
