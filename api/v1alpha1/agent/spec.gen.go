// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
