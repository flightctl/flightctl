// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
