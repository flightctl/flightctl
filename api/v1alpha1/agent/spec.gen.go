// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rFosTAQ3jXb3u/8LAAD//14YZ+2VUgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
