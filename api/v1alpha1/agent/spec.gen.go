// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
