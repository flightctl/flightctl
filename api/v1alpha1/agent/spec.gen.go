// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9ZsQ3sqnUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
