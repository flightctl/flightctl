// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w8bXPbNpN/BcM+M2l7enFyuU6jb46dtJ7EsUe2ezMX+zoQuaLQkAADgHLVjP77Dd5I",
	"kAQlyrF780z6xZYIYHex2PcF9SWKWV4wClSKaPYlEvEKcqw/HhdFRmIsCaNXEstSPyw4K4BLAvobxTmo",
	"/wmImJNCTY1m0a9ljinigBO8yACpSYgtkVwBwjXMSTSK5KaAaBYJyQlNo+0oUos2XYjXK0C0zBfAFaCY",
	"UYkJBS7Q/YrEK4Q5aHQbROhANEJibnbcxPShwuLmILYQwNeQoCXjO6ATKiEFrsCLil3/4rCMZtF305rL",
	"U8viaYe/1wrQVpP3uSQckmj20bDYMcajvMJyV1HAFn9ALBUBYdCzLxHQMldQLzkUWHNjFF0pgObjvKTU",
	"fHrDOePRKLqhnyi7p9EoOmF5kYGExMNoOTqK/hwryOM15opeoVB0aPBxdgY9IjpjNVWdIUdmZ6CmuzPk",
	"baTJKnFV5jnmmz5pJ3TJ9kq7msRzDQ8lIDHJCE212GRYSCQ2QkLuixCSHFNBemX1YGFqbiMoVMNEJwDI",
	"E6FfAWdypWTyFFKOE0gCYnOwqDRx1jh6p3jIe+cEpKQ5oSJ3O4pOLm/mIFjJYzhnlEjGrwqI1c5xll0s",
	"o9nH3ScRWrzVgBlNiBGatgxVQ862CSs7QhsdRgFhUUAsnR2NS86BSqQO0hpXItDx5Rly6JUsNcVXyd91",
	"JWvXJGS6r52cSpKDwVSRVsupsoWc5ZouI0pIMoQpkyvgCrFRgWgWJVjCWMEKSXYOQuB0vwOx8xChiT49",
	"mlbcwQtWSkvxbjVyVvwXoMBx+BjU7ic5SJxgiSdpNRPJFZYtbtxjgQRItMACElQWBm21cULlTy+DzoED",
	"FiHk3y84geUPyIxXzqbC+EwM2ucwc1EJnLV1Wwdp4LKgVdEQKgpGIYGrtl+ffsgItcnzzM41LxWYtzgT",
	"cLChacG1sFpPHejW44aNaPDBo+64KDhbG2sUxyAEWWTQ/uJU9BJzoadebWisP1ysgWe4KAhNryCDWDKu",
	"GPkbzogavikSbJ2kMivusfk/jANvKGdZlgOVc/hcgpAexXMomFA2axMkV1HZO9DZkz9Y7e9tBiB7NqnH",
	"3JZOYU1i8PZrHvi7voa8yLCE34ALwqhlwtZN7SqYeY44FByEEmuEUbHaCBLjDCV6sGs0cUEsgi7A48sz",
	"O4YSWBIKQmvs2jyDBBm1qcxzhdkYFbZEmCIj9BN0pawTF0isWJklSu3XwCXiELOUkr8qaNrUmnBCgpBI",
	"WRZOcYbWOCthhDBNUI43iIOCi0rqQdBTxASdM24ClRlaSVmI2XSaEjn59LOYEKb0Pi8pkZupckacLEp1",
	"QtME1pBNBUnHmMcrIiGWJYcpLshYE0u1W53kyXfcHr0I2adPhCZdVr4jNEFEnYiZaUitOeZiqPmbq2vk",
	"4BuuGgZ6x1rzUvGB0CVwM1P7LAUFaFIwQq1Jz4j2pOUiJ1IdklYLxeYJOsGUMokWgEolipBM0BlFJziH",
	"7AQLeHJOKu6JsWKZCDtQ46r2me0LzaJzkFh7CBvO7FpRq9twn2LXWIfS8g2eHlkZ8MgPuQADrRGx9YTl",
	"jgM4MTYZZ5eN8YNyMIW6KZrnuFCqGgjcDVtAeH64pl+Y+PLBcXuHg3qbNdx+np0wuiRpH7c40AQ4JL1W",
	"zZk0G2kmzmqaZcowLUkaCD1a5Lbx7KRXsAy6pKbzy5M3VlXV926so3wRo2engdEWOQ1Y/sp+us5UzMaJ",
	"7M0HBx5xEJo9625mtvd4ewB9fbZqYukqUyUOz+NEnLuIPzRH3QvLr3RgYQKSt5hk+kNdGrihoiwKxocX",
	"NYKYKxTB0QpvcLQmpmfYo7Da+cWVS0lbR54H0ykmJAdAetRW4zi6mb/fr8QGYP8RXFz11krCpLSMy8WV",
	"oerrKanCzR564qIcJqFNQEYyR1FCxKevWZ9DzoZaihCEFjfUbiqglrqhvOmv4/w35rbOdsKJVGHxgys6",
	"IcR+wag7WiMPjXoEhYYdkaExP2/zwpquhGjH1hXZ90RIW3VekrQKPrXXJxJyE4MQtSQnFEvGPdibD7pC",
	"boE7aWAUBhSSfiHSuPJLztYkAVtKGu1e9a5cAKcgQVxBzEEetPiMZoRCCGtIuuwDzDneqO91Xb7L3RzL",
	"eHWJpUpWjIFwrCvMw2gW/e9HPP7rTv05Gr8a/z65+/FfIX/TRLsNEMYGeiNrR01DwKYs3SxP4bENAZN2",
	"5KayZyWiNDWipjwcUCAMcdIEm8khbMzxn++BpnIVzV7810+jNluPx/9zNH41u70d/z65vb29/fGBzN32",
	"Wpna8obSbjPqJ9/h0MOWE1Vu7HJyZNeqbE5yTDLThIllibO6AIp3pPB1iD1MLgJZhxFvk2CIh2YbdQW4",
	"k2VUQx6P9D5N3dLQYvYZrP/62+8cUG3a9u+9kT1sR1EVBj4owDtQG6s1DX081GUekH5Z4WwmXk7/zmwE",
	"PQBAPX87imytYNjSGzO5xm1XH+uUZ0ghvR0b1GLa2MioqQg+j/1TrqRFH1y9mZqlPon9Qcff0Euzqanr",
	"QDxelvJVDbQ+EF7IdaHdbLhzNocFY7boecnuVQp9sVw+MABrUOFh7Yx5hARGm+FVY8gnNzDc2EFgPBCc",
	"NVQv6EqqGbZiCDo+I4mYliVJdIG0pORzCdkGkQSoJMuNV8sIeAivDBfuCh17M5SB1hkZWrTBdqROMceU",
	"J5owXzMm0dnpIaAUwboabvYfpvPCTUJm1nAE7Xqdz5JqH10q+jWgadgevTxhld+YosdU/gbdD1P+LghP",
	"+W+Ka3aKpeLqRSkvlvaz1+t4iKY3UHooAqM+1uDiVtOlOeorLBGfHr9VPmrLhHpMlq7oumTcBeC6EUzE",
	"J1QKW0NoiliBVTQcUpOEcN132iA1RxkMF9Mr8E2Yu/VE4+hKgmJPp9XWpaUzpdmdsr0ITRTWfTqcKWJB",
	"L9sZ8v7Ttfqna/XNda066nRYA6u7/AG9LEtpyDn09N5x1vWO2HXlOzLnRtxtGBDofgVyBea6iDMZKyzQ",
	"AoAiN98zZQvGMsA6CXWjx7If07FUMq6A60tBWNpblz66eywamIZdAHIrXm/6sb/eOOyte6RqlAe9fYYX",
	"kO1M0jtLmrgNgEZ0aR9JpjuAG2fOepPujsjY8xwkF86L7nEWapoh0ptoigGduc8EkpinYEsGXZcRC95F",
	"GQtuEFy+OR8DjVkCCbp8d3L13fMjFKvF2i8DEiSlytpZeQgeS9IqEz24l6xIHcbHnpJUz8TDqlMdIMHK",
	"U6XfBxmeyjBsR5HH5sABeWfQOSh1KJD45xQ8l2Zdq1WW6t4zhPDOB5U+GwWwTqmxp4oRPGqdkXbLo303",
	"CvV8d5Fwb1BXXU3bjiJ9X5DEtizmFPOgcn+oz+Cygs5puCv1e4s8DohdEuJSuIMwODzvbl0F560ePZFz",
	"BeFLT+wduHrvLpn1XPP3rHw914ueGCoFIGx8gtjQGJmRWxqsZ2ujN4c1cdHwvmsLFXmdxaO+aL9918Dw",
	"JJwV9LZYHvVYiKn19LpAyUvYtw0LI7yNnW2mR92K0PCDQpazksrLPknr0SQzIAocD9Az+/ZFvWLkId0r",
	"CDXpYSae6wbu09w296Lnjp7VY8ppuNDV3HLGWYYKFd0KCUnd7UR5qaPKNYxs+EdonJUJCL3C7Eoo1eR2",
	"bswhGGjo5ATv7aPsCdHqyeYWtqluCeD9TRBFj72HLCTOi6H1dYU6gwcuTXdcNz9GQvlPGlcvNzUyR4yE",
	"rXwg7yp6dS1LKCmz0Ry6ZEWpUuuqzmcK/xM0B5yMGc02A2+nf3Xs7K7LmYT4E2yETu5NEm9ELMZUJ6cC",
	"EmXOGU+xyvT1PBWlpIyrr9+LmBXmqdD3hH9wYhY83/C7aL47sXNDtdV7Cjx0QF7SjiVi91S4ooh5PkKE",
	"oludBE4VqtsIGSb3vXamV/XXZihiBf5cguOfRmtr2MRWavR7DPyZ8Ioo9a2aujYTjHI6XJvba3rDbkaE",
	"Ykd3d29Qa1FPfvBVgb/pKkDngmTvQf77Xhd4SOP/0OudjvLjDLicl6Erng3eddVvVeaYjqt2QCvN1YUA",
	"BTucbpZ9dvfUjjTKGmwN3Cts4DVwnIIpAyPivQW6gCXjFjGh6QS91Qo/czZ8ybKM3RtL/Ew808VbASqf",
	"ESP0LDcPckJLCerByjxYsZKrr4n5muCNlhDvFsftbfIfH0W+Su6CFzcK4DFQGcx+VFxdjyvWmW2Z15o4",
	"SVPltUPsNHsyd23XMOQaQOPQr+yicBvFQfTOqrGPpmvZK2ENZF7DJXitTTcYhzVYepHUgHuneBh75xhS",
	"vN04TQ8lmrl5cUZ9PLm86c2zw+8wmpZNryHsaee4OLVvXX8UW+e+LjG2tvCwi3A9u9l3mW0XXXtcQg8n",
	"toFTCrtM7EzeLg+hJyGuZk3QBc025kVP/bQAZTWMkOjKjjEqB3uN2vYG/IZ/GsH79TgvMkLTMxVo2DpW",
	"jyldgLwHoJWz00vVvp7MOqJzlWUsAGGkU3ayBmQD2Zbl/Ph8/Oru9jb5sdd8tus/Hl9G/lkGWBJIAvWt",
	"KdPdzkgMVED9WwnRcYHjFaAXk6NoFJU8i2aR68Hc399PsB6eMJ5O7VoxfX928ubD1Zvxi8nRZCVzXRWU",
	"RCp/Gl0UQJF9s+0cU5xCDlTqN4HHCKfqM9SvPaxdTBOV1DT/Enu1gOKCRLPoPydHk+e20KFlbIoLMl0/",
	"n5rirZh+UdvYTp371yUgCDQPUjAV02WZZVUeU3dwdRxrnkJiq+j17QJGz5JoFv2icudOeKqI4zgHqYPH",
	"j50fcPAC/gouUSO6eOPyhPp3Fdyxm5KI0Z9gYaD3XWndEUftiMhi/VyCriVZtHruvDO1H+2djjYLpiRB",
	"jb84OrIxuQTzWox3rWv6h321uIa320h0uKult1UteKdk5MXRy8CvZTDkCNmOopdHzx+NNFPgDVBzQ3Ep",
	"VzpDTAzSl0+P9AOTb1lJLcJXT4/Q/VIFXWbEXbvFqQ5HrFDfqWc92lm3O4syoJscigzHfjejqY6nYXWc",
	"m2WN1sweZfSz79PHVMY7MxmEfM3MD8Y8ynlYGrdNh6CI2T6hGvpYQ6r38hFx9Urca5wgd0/lG9HlPUoF",
	"VZvL3a7QGsVEUKVMH7xeY5qEPap0omuj3QtCTyPVXTyDBPz5UxPQajVqniTG1/z89+I+zszPR83tbclv",
	"TOv+fx1aR8/2qaF1c72xpzrLlkurpSDg1nAS0sSdjk2HtoSmwAtOqOztjD+mu3si7zNIQZwj+qacQlAw",
	"dSlMX9TTYmEyuGm0vdv+XwAAAP//L0LT10tPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
