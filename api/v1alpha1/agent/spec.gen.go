// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PvxfAAAA//+0YrM7qHgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
