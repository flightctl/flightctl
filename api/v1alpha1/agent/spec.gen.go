// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
