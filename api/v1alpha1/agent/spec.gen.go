// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
