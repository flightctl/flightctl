// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9e3PbNrb4V8FwdyZJf5RkO2km1cxv9rqO03oaxx4/dme3yt1A5JGENQmwAChH7fi7",
	"38GLBElQohynuzPd6R91iNfBwcF5H+i3KGF5wShQKaLpb5FIVpBj/edxUWQkwZIwekrXf8Vcfy04K4BL",
	"AvpfUDfgNCWqL84uG13kpoBoGgnJCV1GD3GUgkg4KVTfaBqd0jXhjOZAJVpjTvA8A3QHm9EaZyWgAhMu",
	"YkTovyCRkKK0VNMgXlJJchijm5XujTBNkRkBOFmhvBQSzQHNQd4DUHSoOxx9+xIlK8xxIoGLcRQ74Nhc",
	"TR89PHS+xD4argtI9Faz7GIRTX/+Lfozh0U0jf40qbE4sSicBPD3ELcRSHEO6v9NpKhdqRbEFkiuAOF6",
	"qkFb05+ExFyieyJXCKMMpASOGEe0zOfAvc27kwls/reIURiw1bMcL8Hb7yVna5ICjx4+PnzcgVOJZSlu",
	"dI82GkybQgJGgtBl1sQEoxo5KaxJAmpDQMs8mv4cXXIosN5UrObg0vx5VVJq/jrlnPEojm7pHWX3NIqj",
	"E5YXGUhIo49txMTR55GaebTGXB2KUEt0duCv2Wn0gOi01VB1mhyYnYYa7k6Tt5EmosV1meeYbwYiPMt8",
	"XIt+ZP8IOJOrTRRHb2HJcQppAMF7I7UJbb1Gbxdv8d4+AXw2O1TgPiiKoIahddFUNaGEUYkJFSgFiUkm",
	"0IJxxCggLApIpLu/Scm5YnBCYmkvNRHo+PIMXYFgJTcYbXKGDAt5wzEVeqUb0scnVD+kmKFZqQJNVmMh",
	"RQvOcg2XMCcsGcKUyZVhBAvGcyyjaZRiCSM1V5c7xFEOQuBlAIofyxxTxAGnmnnbfojQVCOZLivs4Dkr",
	"pYW4Am8cWozNBfA1pD8ABY7Dx6B2P85B4hRLPF5WPZFcYdnCxj0WSIBEcywgRWVhlq02Tqh8/aqGg1AJ",
	"S8W+4ogDFqHFj9HzOSeweIFMD33yjTWfiUE7NSeiFtjGYSuSM4QaVcx64DB93x/0fn4pCYdU3Tc9QwVB",
	"HCK5CgH1+YcYehu8LZylgaNYEyVboBteQoze4UxAjOw19LmMao/iSHfYm6+0oLNztb66qVufgywhzD3V",
	"V7WXmuoIRSc4h+wEiwbPPC4KztaOWbk/3wIl+o93mGSmMUlACDLPoP0PxzcuMRe66/WGJvqPizXwDBcF",
	"octryCCRjKuz/SvOiGq+LVJsRZFSZ9zn8zKTpMjg4p6C7v9WM/q3kLA8J0IQpoXUMHyfUs6yTKl0V/BL",
	"CUJ6mzxRHG6hGANck6WadI8+FYZ6e1Sou4KCCSIZ3wTxptDV29BBrt9YIfpdBiB7sK3bHG4NKj3Emw8+",
	"+s2XoYdgSHFBlk7PcorpMG3tByIDw5W2t23UT+UcOAUJ4hoSDnKvwWc0IxQeseqPUhahYRoHRekO5pxR",
	"ddb7KeihwWZizujp54KDRnlA/nNGEVQdkBEjWgKoudMyU0JPyVExnlElpmwPItCnb5D979MUjdA5oaUE",
	"MUWfvvmEciyTFQh0MPr2uzEaoR9ZyTtNRy9V01u8UazmnFG5avY4HL08VD2CTYdH3uC/Ady1Z389ntHr",
	"sigYV9aW0kewImkF6icF8bntienG2lvPYbwcx3oaQtFKgVzNB2vgG/3thVr30+jTFF1huqxHHYzefNKI",
	"OzxCx+dKL3mDjs9N7/jTFL0nQladD+PDI9tbSG3jHB7JFco1Ds2YyacpupZQ1GBN3BgDTHvEtbErmnt5",
	"U6NEias33pAZPf2MlYqtMIcORm/iw9ejo5f2SIMS3tziLhmZ74iDIiRFmQijYrURJMGZp2g31UJckL8C",
	"D9Pl8eWZbUMpLAi14K/NN0iRofxKAa1WtvbUAmGKjFAfo2ulf3GBxIqVWaqE2hq4RBwStqTk12o2rUxK",
	"rYhKEBIp3YlTnBmUxvqYcrxBHNS8qKTeDLqLGKNzxpW+uGBTtJKyENPJZEnk+O6NGBOmrm5eUiI3E6Vu",
	"czIvFUlOUlhDNhFkOcI8WREJiSw5THBBRhpYqvX7cZ7+iduLLoLHc0do2sXlT4Sm6r5iZHpaCqlQpm/4",
	"CtDV6fUNcgsYtBoMeudaI1MhgtAFcNNTq+VqFqBpwQi1WmtGtLFQznMi1SlpyabwPEYnmFKm7f9SyRNI",
	"x+jMVzK+NioV9sRIoSyMTKeO71JMLzSOzkFirQNbvr1tRC00h2vNdoxVmVvar3eTLBF44IeUXDNbx+Lu",
	"esXCTp2WmdTj3wliVQ3a9LiJtDvHqp3KFlVkdr8iyQphDno5RXIDl9E+o4D6/qFaxfVBzkKrDJ/w7J4p",
	"NezMwr6h9uFpFDvEeJBXqww6wKb1HzLyhOngDmqlHRGaU251jjTpQV3HnfSgOiklwXBvZS87FqOtSN/x",
	"9SQW5XbXUBvfO7FqlLQ+RJ54DpDaDDT4UoS7IMsu2jjQFDikvfLOCbvmdG6YN2/X0+nvrb3O1k0KlvWK",
	"ctvsS3Rr7erPCaMUEmsYVofd3ffy6vLk1AqE8KVXPWqZ4XkeWuuEycNorWdvw3PbZnT2dr+JW0htbMJf",
	"tB+7vp3The3csmbrRMLuuNOmdeTEZRetEvMlyGEiwwflRo8LO1DMlMO25M3TdY8UkJAFsQpbCkKt0Nla",
	"DnLF0ia5+26FWwra8tYuBGWKbq5ANODbZrVvg9ibeVu35qoVFs6UDOBEbnZ7h+yhEjeie4yWIw87x9bK",
	"ls91uZv93n+QPRN1d2LlRZPRVdvpnt0XSgpzGSopUS/0JDJi294fJya2zLXDZ7gFh1XcBwvRdKDVgZJb",
	"KpxZu9d9aAFcLRFsrdYNttbA9DR7EFYIe08WkGySDB4lWjM3+klJrT25XfuLCa2118dRWGiSPtKS1mPb",
	"h7GasbqTM65Ne8ZNt1zzy55k1oK6TSqt5gYUgfYQaDu6NYjuQjhPWkjNMa3INM2tzDKiEF1cV1pDL4/L",
	"g1Gkm8YkupO1kTi6vXq/W+Mw8/YTxoV41BW6uB68hZY+6rYRvBe65S1ZgujR8VLd1p7LuKiQWOGjb19P",
	"8cF4PH4xFDXNRfsRVXm790JX5WTZJeOSohzGDppwGG4QRykRd18yPoecDVUfQjO0UKt2U01qoRuK2p4w",
	"kroIm8IgsvIsGWQbF1Y39P43zO1FP+FEkgRnjw7ChwD1Y/zd1nrxUKsHUKjZARlq82Nvnvunhy21mBLe",
	"4kKtLd/uZNrj3DLw1RxEQr6X88J6qizKMed4o/5trNL+dU07Kmy4Y/jawehKZ/mWTbG/OaSj8wMFupUj",
	"xrVkuEPAyaJAa9B6bgIyFhUl3/MQWnGdEBbERkjI0x4L2DQiAVxtQju4LUhdYtJxgkssJXAa9CBl9lx1",
	"R1TYno3NdJxOJibh4CgpkVoUxiabi3H9f6WNiXKxIJ9j9QkjsYIsGwm5yQAtMzZ3i2n49ep4iQkV0uWj",
	"ZBuUMZyCWULDlOPP74Eu5SqaHn37Oo7sFNE0+t+f8ejX49E/DkbfTWez0T/Hs9ls9s3Hb/4ckm5NfIfS",
	"6oz7+pJlJBnIjG+9EYasHnr5bJ/o8lt9N01YzxVe/pllJsiOzbE2sUhmXJ+JLHFWp/d8Ke+xqofv86tV",
	"7EF3oM9XHbgLuOsI3Hv2liPVsDmTBCG25E95Z6DxaHzKzqmq8BjMnvLRO5Q12lyurQx595YbXk6lxTkT",
	"7lGWtJpBme3XAHRIcpclC5PLBBTNN4ZMDZ8anslV2TiPMsv2FADVmIYI2Ff30kx7H+LsEKThpmfW6h0w",
	"Qd2/YlfpPpwq7Yk7eTejAVXzJkbhi+mj0Se/ioz12dTw1ljzSM2ngH5d9fGxEY9WV5in95iDDgObdAJC",
	"l1a0oUZg9uljJhYGl/P4dB6xJ4iX7JWNG3Z3XeikmnDi7RXMGbPpRpfsHjikF4vFI42BBqzeqp02D5BA",
	"a1PVbzT54AaaGzsItAcMhcZtDyoBVQ8b5gctekkqJmVJUq31lZT8UkK2QSQFKslis9Ww9WPnYXZ+7PVQ",
	"os9k2czb03ZoUyEnFK/5njGJzt7uM1V1B83+w3BeVBf12l3UgQu0Y+w+Sqp9dKHovycdrW9H7KTQPbUT",
	"KscUL036seYDhifqapIkK1PVcr8C6r67TJc5oJTdU6sZK76lGTGk3RN3/a5N1tdOeWo2U/Wu5Mpjxz/s",
	"QFv6KI+XgenpgxON6Z+SHTc2+zh23J1iD59xjbDKYVzcsLdYKpq/KOXFwv7t5YA+hg83gPSWCLT6qwYH",
	"t5JRm60+OyXi7umzLOOeS2yNHX17TX99f4m4Q6WwrtQmURZY2aphByrX+bgbZQevPCNeT9+cczsX02t0",
	"aUejp/SrExa4zJT2faBUsC5EOf5M8jJHqR2EcJaxez+FxmQHSIYSW8ZjKtyqATWLEpbrpQjrvEGm7tLa",
	"hslA7dHOPd8oM0qZEMrIH6M6u7P6KBDmMEWfhEmUFKBUVBGjT7n5YHIf1YeV+aCzPPVZ1O6B53+Z/nw4",
	"+u7jbJZ+8+Ivs1n6s8hXH4PegU5+ePcAO12aaZI2yK+BwTpxHGcKbSZKvdX+/m/65H/TJ/+A6ZOdC7Vf",
	"JmV3+COSKi2kISncUzKCswGswXWtq/HCSkjFKDwXkuUYuvy4N3MIu9KUDixnpsYNhNIk5Qq4DYUZ7rTC",
	"As0BKHITeGc+ZywDTI0LaA7Zl9RQHzvjxcykq/uKIts41tLR1r165+bh2X3udUK1jjlMIeg/6q5asGPR",
	"XSfuOXC/9OyPe8K0WohiaVNu/dO/V4LZO/hhvjk34vvNoLJw1ZcPsMPqWWN/S2GlJswrdl9EHYEjJvRW",
	"dTQY7/R9Jly0X7t1A2FiwcMYuDw9HwFNmLLOLn86uf7T4QFK6nowJExBmH+kgfvTjBIMTyL/GtfVlata",
	"Ry66J7b62t5gIirXr7JXlVTzSJeIEH/pueIKq4Nud5/l2NNxv2BKZ5K+e2f4/6O4iReKqIljN0Up6oHU",
	"J6ggAW0Nb3SrvSG85S8NXvR7loNnrP1vnWqF3rpu3d+Vc+/mMVV98EMcvSNZFatvXWtGJfTlNRcZJhRJ",
	"+CzR89ubd6M3LxDjumb79avqhOwMDrELkvUekep3qobZSHfLc8HuXXqzNHYFVzJBrzJG5/adDSBars8i",
	"DdwsUhDNIgPTLBqjt8bq01K36uT7AvSnKLZDugb/QxwtOSuLMErU9p4JpHvEntVnwdLGn0uTomUOnCTo",
	"7G0bLM6YNFB1VU6WwtalC+A29I9U3zH6Oyu1Jm6AMQ7BXOnNC5yTjGCOWCJxVj89grWv7VfgzFXYHbx+",
	"9UqfLTbSIiG5HWByu0NjXh0dvFCmgCxJOhEgl+p/kiR3GzS3NiyqMijH6GyBlKpfYSw27sHmZrQBqfap",
	"OGyNMAVeuIal392A54JlpYTK2+CIs1Udgj4wCYbnY7pB8JkIbQ3prprzzwEpqX7PiZQQ9o6VAvjWQ2P3",
	"FPhXoJeQZ6S6akGuE6427vCFJZFXigeG9sRhARyoMhAZwugHIpupIVpwQig5g5VUXlZH5twzk453RvVx",
	"VVLmnJ4JcyI2UtXS8Fxtuboeamjtl9FLNiRxfWr9xOPTjE0AstDUdew9JVuuebe6WE9VWdzBOY1edgVr",
	"Inrf3eC2VUdJBNSm+FZ4O4U3FfCdVeM+r1s88M2kVh7VbmhsSZklxNDCPcXoHVpeSVkMJGaKfry5uRxI",
	"zoogL4M0tJN+JfPo10lQDrLktI7qaFAErIF7BL2NDe1DfbxLfY54sHG0iQ1N0Ba6NMlOoc3zShu4vXpv",
	"eGvCchAIL6S1yZX01XnE6EyiBFMbBAL0SwnaRcxxDvrtLFEmK4TFFM2iiaLBiWQT52D6i+79/3XvIfyx",
	"QeHV8f3+RO0oMrRy7+NdHbruSXu+8ina0ZeuRLU5y4EKUVTg5G6QWtmf1t37qEQXcBOz3pKdZ3QAyVDC",
	"QWvt7YrOQap6pfYG0oy+7gHbHYbQtPXhjunjHqTbDWYcCb3aUKFeQ4nMwJ3S/PHy2ywwUGgPQ0gNc3AC",
	"UeBkyyy6eedU4ZOvp489DH3c5Qiwo+tDCpHOuU5r/zqPrHgu7A5e6jZEBHL+Y6s0Z5nS4gURElKv6kC/",
	"i7jCa4jtSVsGL/QIsyehxA23fc1ND3geKGWyztB8pJOn7mzeHeuk6nWQreGx724JifNii8PRJEvqOMk9",
	"FnYre3gZU8jgMWtZ80QP32e95ZZn3I6RgF9KzQnsYwaNKBF2RkyCvCfeqgC8qZQ1PkR0yYoyw16eirn9",
	"Y3QFOB0xmm0Gvvr2xT6+c1woGG3w6w42on6i1Hr8lBIyB0WRqWKBjC8xJb+aTLkES1gyrv75XCSsMF+F",
	"fmHqhSPmIBUNY1c2ShlMEFKWY+iUvCgdlsrAFC4Mar7HigHPdNBnotaaRfbZo763JvSo/mgsRazAv5Tg",
	"kKiXtYlYLtvHaMrPhBc2rWuw6mjsoMdOoyv7DsC/48XXY9rQjlSn3/WJ1rZGF8REq+SvemjB0uZi5BS/",
	"tLqzfmg8/EBIF//bSn26fb4IKPT2UXn6OjU7UCek7nEKRcY2exSrhIluj8qhm0ohcwakCwDqK3m2pETW",
	"z5T1+UrdwxaDkuB151Y10e9XSrTfsyAVRbh04AKSrSzpvzVK/9k1Sv++aqN9X41xp3ycAZdXNsGzlULq",
	"47WL5lWZYzqqsitbcVVtVKu5w0HOsk/lcllrSruWTs9ja+CekYTXwJXxXprHfL0Hn+awYNwuTOhyjN5p",
	"xjLdnoT2TDxrZpc9y581s8uerZ71ZpfNZun/608oK4AnQGVvXXndrrBmdmSirpwsl8oiCGHSaKPGlF3D",
	"kCqfxnlf20HhhFQ3o3dMjX00RfJO4mos1k1dta0dmnExqmD9sM6eH5af2gtLPXFvF2/F3j4GFG/Tjm+q",
	"rRK11ZxQbD/k5j1W9efJ5W1vWDX8eqjJeO3lDT3ZsM5U7hvXb0g/VMx680FrhpFl465efZh617ObXc+r",
	"boNrB5fswcRD4JS25u2HU35xI0TR0s0cN90mqHUnxFWvMbqg2cY8y66/FsCRu4A6fcJwqb2Fd83WA+Lb",
	"P8beGv+GStEU4V1/Gs6LjNDlmTJ1gplxFVt3vw3hlBQ9VCHid+DUVRJwH7tupw14eIr9sw3sOMQGb0gO",
	"/2DOu+tCfO+Z4SgttCs596sihMqO5MLuXTPGs+MPx+6x3uOr0+PJ+4uT45uziw8xul8BB/2xmYqszAtC",
	"dUICRywBTE3SrhtZxWB1mjbmkiRlhjkSRILWkYh9sB5zwLF5qda8MIuOdXgWTz7A/T//zvhdjE5LdRMm",
	"l5gTR9YlxfmcLEtWCvRyVP0GiJHpaq+tyDh6Pot+OL+ZRTGaRbc3J7PoRZDcbjuVKe0qqjpF2r56bDz9",
	"uJQsx5IkVRmNvtA0DRXgSMW4l7Y60PhZNOSsDOUE7Xy9rfVys0lv5fIHjhPwU/W3cjbXT11qj7i2jamI",
	"sJN4FwqKP+jKYVNMo63TRG8MckyyaBpJwPn/LDKyXMlEZmPCIufW0XzjnW5BJ4xKzjJ0AziP4qjkaqjL",
	"WW6M7jinfm5O8fF5aNgLVxZnctJ0zQQkGVbIWYMproLcJuIsMgCpk7sgXToXvHF5yRUQju4Zv1OkIMYz",
	"U3+aABVQ+0Oi4wInK0BH44POZu7v78dYN48ZX07sWDF5f3Zy+uH6dHQ0PhivZJ6ZA5OKWKMWko4vz6I4",
	"WjuLMVof4qxY4UNbEUdxQaJp9HJ8MD60kWdNcBNckMn6cGL3M/lNAfswcaq/zluAQC7TDyAbpmfc9kR4",
	"pmhTBDqPREP82Wo5Rs9SM3nAU6KgdiFMrS1sdwC2VlGyZ9kCuhdILSfVpDb7w55g9SSro37JS4jtL0oF",
	"XKbdbN+q4l2XH6GWhVUtq2Ow9bq681XLGtu27kdt6hdMEZFqPzo4aGWmeT6dyb/sz3/U8w1x5/ivFT90",
	"LuDFT4rwjg5eBV7aZS48r7q8Ojh8MtBM+l8AmluKS7nS3ubULPrq6y/6gcl3rKR2we++/oLu55HoIiPu",
	"t77wUlsvhtCjj+pbz5WvqySKMnDhb21NYyvPdeddvoIiU6LJTzH+8ptc1yM+xTX9aDqDkN8z8wr1kxyU",
	"fRX/oSkxFTAPX/F++quG7uSrJ1yrlxS/xylylW9/kEu+47bV6eyuXEtfNRYqDTwxGRqYolCRYN9NM6O6",
	"lYdfh7i76wyi88OvDUAIk+kfjO5ffv1F3zE+J2kK9N8m3eLo299jo9fGOrileI1JhufuUQJ71TvXetet",
	"t+J2q2K958W/ApyGrv1eQrZ/Qas5P6mw/UqybxBPcGLwD3I1f2dN9z/2Uuoghy6y1rfBGOCTSP96qxnX",
	"ydFyt0z//EVLC9VOQXsHrLzvmnvNGfqvmD9ZF/iHjw//FwAA//9WLXG9xXgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
