// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
