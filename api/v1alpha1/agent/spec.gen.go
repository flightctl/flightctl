// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
