// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"r+sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
