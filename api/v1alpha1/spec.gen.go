// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2aWgyWEyS64/XP9/AAAA///y39+r+OwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
