// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
