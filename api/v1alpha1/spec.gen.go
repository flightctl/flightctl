// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
