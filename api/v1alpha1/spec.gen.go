// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
