// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
