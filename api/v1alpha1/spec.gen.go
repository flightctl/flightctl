// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
