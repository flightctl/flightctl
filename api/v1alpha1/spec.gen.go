// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"w5UBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
