// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
