// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+ArF68p/HzVLrt5d/TcAAP//gtog98FpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
