// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
