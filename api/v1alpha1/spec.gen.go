// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"57yNhrbvWi6i299v/xMAAP//IuhLbw6rAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
