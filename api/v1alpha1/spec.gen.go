// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
