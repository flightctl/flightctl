// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
