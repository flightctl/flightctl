// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FzKbHEz2Jzefb/5/AAAA//99gbHNLWoBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
