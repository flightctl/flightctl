// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"s9PzeqdBAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
