// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
