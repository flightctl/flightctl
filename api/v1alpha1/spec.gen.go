// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xsJkznMhssneZHdy/eX6/wcAAP//TK8xWUt9AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
