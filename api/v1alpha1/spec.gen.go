// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"p8v/CwAA//+cZmQPZvwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
