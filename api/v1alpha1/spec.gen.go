// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//aUvATHmvAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
