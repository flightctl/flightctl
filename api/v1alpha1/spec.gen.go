// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
