// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a2/cOLLoXyF6F5jdPe12kp1d7Bo4uPA4mRnfycOwkzm4d517QEvV3TxWkxqSstM7",
	"8H+/YJGUKInqltrPxPoy47T4KBaLxXrz90kiVrngwLWaHPw+UckSVhT/PMzzjCVUM8HPNNUF/phLkYPU",
	"DPBfnK7A/D8FlUiWm6aTg8nPxYpyIoGm9CIDYhoRMSd6CYRWY84m04le5zA5mCgtGV9MbqYT02ndHvHj",
	"EggvVhcgzUCJ4JoyDlKR6yVLloRKwOnWhPGe0yhNpV1xfab35Sy+DREXCuQVpGQu5IbRGdewAGmGVyW6",
	"/ihhPjmY/GG/wvK+Q/F+C78fzUA3CN5vBZOQTg7+ZVHsERNAXs7yuYRAXPwPJNoAEB/64PcJ8GJlRj2R",
	"kFPExnRyZga0f54WnNu/3kgp5GQ6+cQvubjmk+nkSKzyDDSkwYwOo9PJlz0z8t4VlQZeZaZowRDO2foY",
	"ANH6VkHV+uTBbH2o4G59ChZSR5U6K1YrKtdd1M74XGyldtNIrnA8koKmLGN8gWSTUaWJWisNq5CEiJaU",
	"K9ZJq4OJqb6MKFH1I53IQAEJ/Qw000tDk69hIWkKaYRsBpNKfc5qjs4mweSdbSJUUm9QgmsQUOjlkeBz",
	"tmjvtflm2M+cLcxe1cmDFnrpkRTphniI7K/p9un0bUcv86XVqbGb5cTVYLGdPTr5dApKFDKBd4IzLeRZ",
	"DglCnmUf5pODf20msVjnG4OxI4ODuUEsnLGFOaqn8FsBSrfX1NmUSMglKDMhoUS6Hw3HpUSxBYeUJFVf",
	"MpdihYfq6LC9Dzn7FaTCCVs4PTl230gKc8ZB4ShX9jdIiV2sva6YqqCyR1XMCeXEonRGzsy1IBVRS1Fk",
	"qaGLK5BmJYlYcPbvcjRFtHAcQJtVmZtCcpqRK5oVMCWUp2RF10SCGZcUPBgBm6gZeSek5S0HZKl1rg72",
	"9xdMzy7/oWZMmN1aFZzp9b65GyW7KLSQaj+FK8j2FVvsUZksmYZEFxL2ac72EFiOJ2G2Sv8g3d6qGIVe",
	"Mp62UfkL4ylhZrdsSwtqhTHP9k7fnH0kfnyLVYvAYMsrXBo8MD4HaVuW+ww8zQXjGv+RZAy4Jqq4WDGt",
	"PLUYNM/IEeVcaHIBpMhTqiGdkWNOjugKsiOq4N4xabCn9gzKorhcgaYp1XQbP/+AKHoHmuId4A7qph6d",
	"R8se1L4XSfcwtnuL+VSnzVFKsEgHeZQbdc3zlg1iHKa5JcPM/CXmpJsdjZzinjkF07CKCNVvt+2MuUzL",
	"vjtRp5ndgUOlpOuRbz0O3zJbbbnWMD5hd38Qo/DSS317/0vSPAdJqBQFTwklhQK5l0gwOCVHZ6dTshIp",
	"ZJASwcllcQGSgwZFmEBc0pzNAklDza5ezjaD0OQq8CVn0uobkAiDzxaQrjukJC1kyTCuaMZSptelohnA",
	"MZlOrF5hNc2/vooqnvBFS9wimqaoUdDspK7C+EPW2uDm4akD/MYMTKi2lAXK6/MGuUQvqSYewyiUGSzn",
	"Ii8y/Olijb8enhwT1KSlwTy2Nws3PI2tVoU26tMkQgCyS5j8uARyQRX8/fs94IlIISUnb95Vf/9ydPaH",
	"ly8MNDPyjupk6Xi4uZNmpYjJIEsJ44SGxLBJTrUcIdyQi7WOivYouMr3USPJMU8tgSFIsiQI28eyeuRS",
	"vxU0Y3MGKXGmgNY0BYuwuU/Hr+9/kwIYFF1AhNI/4e+IcrMIZLuAl8ElrIntFaze2W+YUkVd4q/dEFuJ",
	"16w4bpt6Hxij7h8vDR4oSzkkoIxhPK+U4bqoiea5FFc020+BM5rtzynLCgnESn9+6bhIA7yzpakI2o2e",
	"xYwYsybwhSm0OdU5XcifoqfTDdhW4KYV1ojgCVQI73OuDFdF9hbBxFH5zRpZzK6K8IzNyC9G1ydJ0FAC",
	"OUS8QTolr4Ez83+Dnh8pyxCmkvb66colFJObz4aXzmmRGQ520yLWBokES4sSRjlu98KrPbX2J4X3ieBA",
	"qDmG2tNAUkiJ4og2O+3lWEPoXtNv2zgyqvTH0l71ka06Nh5tXZqtwM5UglbZuiC1QpKBy9GmFoRyoZcg",
	"ZyEVGGloz4wVl0uU4SFbzXKuHWH2oBghz2OHXohCO4g3m+K8Jfgn4GCv7fjqZ16wmS3KlpbR1LFxTRVy",
	"Q3OJpaTI7bThPf/376P3vASqYpP/6UIymP+Z2O+VHOFn/E71WmdPTdGP6jVDP1LPblHLpLOSOQimMYIr",
	"l1/t/sajUvFMb7r8KAszzI80UzDYWNkY143V+NUP3fg5tDPW8RBA5zmRNVj6Py1XQqgdSzpMElCK2Yun",
	"9g9/fk+oVNj0bM0T/OPDFciM5jnjizPIIDFKwmQ6+dVIngYTRvVwXoEcEv/zuyLTLM/gwzWHoH0/fL3h",
	"UmTZCrh2d1iwqM57rk+bEiOdLUpUnUIuFNNCrqN4Mujp/NBCZvixROyPGYDuwC5+87h8DVcsgQDR9ocQ",
	"3faXFtI/wio3V6RTo9weGEoqlBaru7ftTpvs5cxKcc5vYbjLyrY37DRBKEr5WM3asrwB1i6uzbrs73Uz",
	"cL5cK5bQjKT4cTYacEZT72jqVfsVy+h/W7s+OxhxY5erHa3mT+twmnoMdFkkBnnI24aJdzQ3RzXiVrVo",
	"ifKh6URZ79/OXtUWBr25243bjTPrWuzClgSegoS0k6t5luZk+NRzTdst8E1u00Tr82yEV4kM2qAuTk+O",
	"3rijGlXKlblPBT9+HfnaAKc2VtizG66fhbhU/pJr3ApzDfIULoTAK7atGpiuBL5AUhgNH5sT6dsT4Kgx",
	"uPuMJk5HNCzQSOBOnL9meklQWXHEp865kGgjYOb2Ix+XoKDsLpKkkG6qYOOWVLmZUePMMnFtQDBXay6U",
	"3rPfiKbqUs3OeV8zuUWRRYFZrWcVTTsJwlPKIv0QVbjm948nS8zeQJosKV+AIkt6BeQCgDf1eyckDMUS",
	"Lh82YekC5kJCf4Ky7QOKwn3FTb0PZLnpAqpiFVHdA9HY+XpTjQOvJJsHQUacdKiEByKam06+dYwrZLoz",
	"yqjn1RQdzd1R7XifrddSx0C3j4Gy1pUy/on5ee7GBrEJ+KGRT1vHCuPnqFJ1bbwKOPvEVZHnQvYPlYvO",
	"XE4R/VrOG/1aAdPxOYCwXHnc8V59q3vZ7e9q1Mke26kebMQABjb6y5+av3w6jPN38vqdHe123A9ncaGa",
	"raJmdqG0BCD41UV6S/Lp9O12FcQOuBGQrjjcOCgN1ejDmYXq9pA0RKK2vpF0+KI+LivxRNNL4F48MSzH",
	"yrhOcbXimpVQvJdhRt7QZOkGMCewFKmcl1TI1GoTa+xnOWramxGYBR0m1km1xf8f0e68e3VLaGrS7cvy",
	"yHXW1I7NTvKir+AaDmQv/+kkZeryNv1XsBJ9j2RshKZ7Ly8m5aAOur646Q7A/i8qXYD8kWSaJTTbORQ7",
	"NnEY6d3+Wk0e+xoAFPvsgYx9C50lgcWrTSEdwdr+grTf64bp6k5lpsuKcaqFDMZe26gNN7inBsGhhzH9",
	"J6atledEiiuWQmVO39TrlzL65AwSCXpQ52OeMQ47zPqz1nmsW4womyyiysNpb8qK6mR5QrURteqRR7n9",
	"cXIw+X//onv//mz+82Lvn3v/Pfv8lz/GrtLtmtXSaJz9zmhlNjLb2bOTuxNt4pAT1NqyrYHPJQ5ZGcg5",
	"R+rKaH9BreGTie2AvT3SIehf0S9vgS/0cnLw6m9/nza343Dv/77Y++fB+fnef8/Oz8/P/7LjpnQrwF0h",
	"LOHX0A0UVyarcBbqdXji+hrRUkvKMpusleiCZlWQA93gTKqMvf3oImL/7h+dUi7R3uV46VNnyjBgRkM0",
	"Quj7BcxWgSjRA+w45/a11uzWRivxKuVOKroZIaNKnwGgeNEv2GPAeS1nqZ3YoXf4YKm84STwJ/TYWU16",
	"DFC1v5lOnGozxCaVdjgoAqqsQTWt032IsHCTS2LBXaggq/ATbGi3RPMAGXbOBupjiu7OynSrtLquIQJ5",
	"7gPe4fF8usr4PJ2ciGuQkH6Yz3eU7mpQBLO2vgWARL7WZbfapxDcyOfaCiLfI5Jf7RhFL46yhTNW2ChT",
	"lqr9omApGoEKzn4rIFsTlhpNfr4OTcDt+yCwAMR1u8OgheHnaFHzEaPVsC2qM8ixbrH6mD8Iocnx6yFD",
	"GYDRrm7XH4fzg29Ezry62XOCpjoXoqRcRxuK7hPQMJzvqEsLVKfJ9RJ4GdFtY6TnLAPiwPGhnV+1Qm2U",
	"jh+ZdcD2gsI0/uAREAMkp0b4i+HXfDHI9YIrOmmc74TxhlPFYBqdMEzZjgnlxNnuBAGGjhvqtyZxOyMJ",
	"5cQcPoNfJjFGat2D8LbaEeq33537LdytYq+9u7xVanDvdqu0hwhulU/5R/HaJpB8KPSHufs7CEDb5Qqp",
	"TRlMEfkazhrt3IiEq39t3QSha6qhgBEnitSDI5Q/3fMMQBMJupAcUss85qCTJXoliWJ8kQHBYL32ZaCa",
	"gktXPEs7WLcJ5YUEepmKa74Rzos1Ofeznk+cOBONZdFC0yx+oPFTUDkjNlO8hIUl9AderhMqNy23GS6M",
	"a582tqcBfvTkMHX52BGTKVOXNgWmTW/dTLrkmlF2XR9zM1PFOT5HozRbQbttWFpNNqTwu5wUvBiw20Y1",
	"fPQfjjGdzy6ms3WchoV3trvfbbp+RxS/vXhadjQbu9+iOf/FZ+GAMrcwCopBghYGxfkAL2wfsLILITKg",
	"KNf6r4e6e6ZDjFowg2MyEtWuYlQ43TVVtZn62aJ8jx/W3bP/sPazN2pgma8yKjpm9AKyPjdu1aU+tx2g",
	"pgO7n7TA4Kd1I/Rp6x1b7mcvuohHkUSb1QNKWk3Gq+GxQ0uiW9JLCW3LD2O8yTdanyF+cW3nAKaZ3eeg",
	"ofVxtNp+p4imcgHOE9LmDImS7SkTJe0EsaoAYTUpZbPGygzhGILThvOqf67FHTD1wyYr97mkLhiWXDMj",
	"U1fcnSlvsUA111AzlEhFpFQJdpu5v8Fsv23v8Ot1NBzm4ut1OVQCySDWVEoyN9PNGe0hybToqp3jPhuc",
	"ut5OyIZb8OANrr9hSefW0N/2MXelXmN7n3G9VQstc3hvppO67TJu0ljniJvSxmsPgxHiykKdwlkWWIab",
	"4E1hR1jlAb0pK3FVWsGg9K/0NIHVoCwHrf1azlD7tZyu0dbOfeMyRdvr/tFZrgL12vGDdIzCHbXoUYuu",
	"nB/mpAzTnG2Xu9WWccy4JlR+qms/+PN4jh9d5an2oZ+zDRn2qNt8o7pNxU7i53iDDoNuja16i3JlIrYu",
	"zcj9vqYE0psrBhETyx4i7bzpo4xzwqa3xgPdjesOJSL4OExxsC6uvqGB2HpKAJ3WNMvWhFVOs6qFzUE1",
	"RwZDYBNfOmxFOV0AqlheMcPCctdLJ4m2ApeH6QKlv+72oX9py5l6i5STLfoDlktiiYsg9KdpUOB1LOLb",
	"e7p3TE0IBnFdNsB+Crko/YNRHX5OMwVNQPvUQ/JD+6UWssOZ+6dcYIEac7euhIY/YxiPLWvTq064Gdm1",
	"iS41Grbe2yHa3uWbaatmANOnZoQWzxIF1ydRl+eJc3K6KH7G3XmMXRTeaRp578EjquNticA8HyC1uoEF",
	"KRQQ6upHrnlC7BfMG24HRyPPP4UrpuLRPq1qDCV4rc5uVdMAR1v5rENz3LUbRCkd/B5kNDSLmELiqhr2",
	"jnp6U/aJ3hHBkJ/bpBGEsvebzYaapfHryA32OZrHEIO4TZPAr36lMhboz4nILQMoxfdf3vyf//z18O2n",
	"NySnTKKMbDR0qgjwKyYFx0vhikpmJlNlZbYKJ8MKXMqiwzxiZDEjgmthxDkf4DYljCdZkWKkC18TKhfF",
	"Cm/QQpnflKY8pTIlaglZZghc0y8utssWSHUJw4qsXFkqP5MiOcsxn36BnrypWTSb2yi6a5AVEKTgKYaE",
	"XVC1JHsJXp7wJW5uvRby8jWT20IgGA8cehUyrT30AogsuJWH2ZwwVLkymGsCq1yvzQ/Yrmzki4IqshSr",
	"QfFpZj/6ktowthoQfK98nhhtN859PPJSsxWIoqPM7op+YatiVZUrxioO4Zs4NqgSGbV9XmVGzjlulu/i",
	"NMuLMFyTYpkvw/zYFRAXRUTO+Vy48S/WhFrfrdEwZuTMJ65XP2KQ58E53yPfqe8QIGXrLuNPK/vTivFC",
	"g/1paX9aikLaH1L7Q0rX6txx3DIn5uXePz+fn6d/+ZdaLdPPf4xSwoZtD7nUbfa8vldm2YM55SfTqSUT",
	"mB+3XRThAD3fgGreqo4j44YREZ7aihiCsF1/fnOQRsI3Gikyo4qG7IGnia5Ng8PPWQZToopkiQz4CzUE",
	"OXMS+YwczyuXPFMoxlflfssvHgJaaEGMsCqusMJSySgwntXczZvisjtDmcuwWI+YYPFa+HV7S3aFIzwF",
	"4VXhjdtvuCtB/Jop9xe+qYT/F7mtW+h+OIVMUIzqp7AS3P2zn/Hb0UI5nft3MKujeD+5/yfC4P5VgVL+",
	"4CDyw9UAi1yAX9n94Ep3B1QRvS3KZMyBekZCZ4mMsO4fsDo68T4qKYS2L+ZERGelroVMuwLD7VcbzVfo",
	"pS3O8/PHjyc2Ftrw5DB0phwuFh19yXJruvoVZBkc2Z747JLlTtXxpbevwg6xmCCdqV6Y+Pj2DF11xJmA",
	"egFuBr+Edf/BTeO+Y4tL6PJ4mU93gvnusugfHWUj69syVZ/7L55VfKe65FLrPKpMGsZ8sjnHwdtTDAu/",
	"XoKrniVB5YIrvBWUFrJKDMFcB5s6UwtinsX1vwdWN1Uxn7MvMdVZlsW+P52+daXuxQpUUIjugir8OiPH",
	"GlM4rKYA5LcCMMZY0hVo9AzYC/XgnO8bJO5rse8tzP8LG/8nNo7BuEnfLbdrq1rrd7xDXMGvO5lpljW+",
	"2y9dvm+5697mHTxnuE2CJDTLiJAkyQS3j50NMe5MwwXF7pnOagF3ekCZzSzs3AotC9i25W6M+I5vrJhw",
	"p0tROP5201X/pC6Up3Ka9DBUOtmh6jHIFlSBHkdi3bMQSapZ2Qqrl7CeWm+Vs3AYZoIPJ7x/jal1RmTa",
	"50WW2SAl4l0bimAxAiNnLxmPvJuIn98OD5HavO5w1NgZKJ1FUVeg+eJ8OhegiPep2FWrNddL0CypaoqQ",
	"VaGsWyA0tWRMaVvX8IpKJgpVuiYQDDUjh0G1CLq2fgXBszU+iyDm5PfKSzMlHrCbqCtBM17EgpbcFxzf",
	"6N6gnXnGvn+CZiqSsZXVy3TtpV3UMsqUKfcoTfBwTRCFBhLjtldCAgpVhF5RlqFlixj2ZmmHKSJy+lsB",
	"pZ/4AuFAgxW+FuKfgCjDs527OXBmUuteQW3NSOzMtpKgJYMre5dz+KJ9kEwJSYX3I4sVm/mVCK6Y0sC1",
	"HcuA5fyhzuQOHmVupfVMSLNumyaZEszwQXmCckLJHK696cFubo5V/SxK/NZ7J761tNUT1Kx9DtdZ7qRF",
	"pVdhbC5zYrNrdIVpL7lI+2gRSjZTUvAMlCJrUVh4JCTASlQ6UdPoOpQTCOO4Ot5RXlHGGV8ca1gdGabU",
	"JsB2mzIovqQzVVwos93mG5Kcgx63o3rj2WyKE0+caOa33y+w1O7dr5aEfKGa1LEmIb1V0/OoqenUpP4S",
	"cg+UIoXNR0Tqteg1w/itQN2x4HikeErEimn3xhcaWUEymrF/24eja4Di7lqzGfmTS529gIQaKdCqpehs",
	"XBb80owkqq+IAodPTFTFRn+u1iPBoc7SZXNNdiGlmXenlfg4BJHZ9GnKydXL2cu/kVQg3GaUag5L+4xr",
	"4GYbzSJKUThGKX8BpdkKc0T/Ys8g+7dz1yYiM/uHQBxhfENpITLzSkBG2jW2NZEjj5ClvZwmutcbLDGt",
	"5x2W9bqfN3YDb33rhFXfDL7qd5URJHPDX/B5reh9Zc+XO1cKezg+6Ywd2NY+kRUJUOJc6MrStWOAc9XY",
	"PoizDqObo1mv/gmuj2wFStNV3r+MTAoZ7Nh1seHln0NieVhS8pBaXE+QCh+8ClSqk8oILi5MhJw0nx+z",
	"yueMnAJN94yA0POhoFtHnvv6+jZc6RLWXp7JCi8BGKUxuMWFXFBujig+L0Y1LIQ0//yTSkRuf7Vs98/l",
	"dRzb37idItScXduY8fWaQ1SWDUKqqCbiGt89w8g4+7sR3sg5hgjtm6nOJ8QiueP2q93fHZ5ClHYc/nBa",
	"V3yE+dcIkXt+p4JIuqqQZRWg18/wcmKk3iBlt3q2rL82LPK4ghpEXJcG6jC8mqYplg/KM6ukSBsD/XmD",
	"o765P//77MN7ciIQE922dSS+OIxW9tGC0BRlMQfNrKUeoDW6IwG6bW0+dc8l9CtDGAv6928o9Cq0hY13",
	"LrD3xAvotR646DxXX2+RvV3K5Q19nqNmWIq8MFt9LVNgXepE3ewYnOAF0854FD21pxvMmqehGTPIU/iJ",
	"6dDEaeu/oKkLqvc+xpDnMXXh2acuVCdoWP5C0O9ukxiqgeOZDPXv9XSG8hsbk5MeP6lBNnaj581Ycvsx",
	"v+EbzW9o8JxaPGgPn0npbutTZbp34zO1rNpugbojXaDZYljOQCWv9E4cCLrcPsy/PtjD5vp6efgwA6lP",
	"i1hgbKOQYVOHWxYryvfKmnqNxBhEnxk7nmRfdBlXXntje1jORVyBDOJ76BVIugBb/gpdDT4h2D+7YCZm",
	"fDEjPyIJHHhDTRhu2AginDZDCKf1AMJpLXxwVo8ePD9P/6MzcHA6yUEm5uZadGiz1XeDOrss63SRbLEA",
	"qaLotGuyL/BdQZ8SzbVNP3Od4rUI/YjBXtXWUbcfbaWw2mRBNFv0RQMs/9ovSq1zkmrgzibBjJ1tLCjB",
	"arz+GMtsWdkngc2fRyefOo/wyaeY9deWqutUrzvK2HljdFe/blN1lWzjM3Gchj3sDYSO1Wzj/Zvg2mJo",
	"6MDETWSXOkrPepa3ye6AjYgssPbpB++ptb/m6E61RIJSkGUqg20RFe+NCF7hbkRf3aSrPGN8cWxE2KtY",
	"YciSlV6AvgbgpQkFu5p13Rt3JO8KhXJYO+h7tkPcdc3fH+BlGu5lBCWb2NLZmicxgaL62qxzOAeJRn8t",
	"rNfeeYAxZszm/wUGEC1sPBf6q538i3pOWZt9VJVGY8hoDAnf2B9oDgl63rVBpBram0TG0/q4hg3Xd82T",
	"wdcscvrRtPHNmjYaHKR1WPOtMeK0LFpfyyhp6OjkGN/l8S2m51zXclCqM6op4za8L3b323B7Ls65Ki58",
	"d2ZOID5bgKA0xrKhA34ELIuFEsg5d8E+/smzJxGn3k6LjqTuuEAI6Vq18T0sujyeTb2VYDrtSs02Qy1L",
	"Fb+6nZ2I7sb7NtaE8OaSI7FasY5EUBtjhg3IkqplVX3NwAFpfOf9yD9tCJ8pRw+iY2KD9wnNGmDwOlPL",
	"nVKucsmuqIZfYH1ClcqXkiroTp6y363mpJYnZd+nkDNVB2hbcpNbNzk7+7l/ftNNHPE7pmuocMu2WJLv",
	"KVnDrL7h2vapGzumbFSLilJpB0NyTIhZTVQXkju5BJ9uoZmvFZoK/p1/+8K9qR8EX/Ws69jHtltxOyv6",
	"+JihjgAqquJG5BVNloxD51TXy3VjAoMDd1ec46vshYTqIQkbbctUFYZuUzxtgCzG19bZdxW8fkhOEUyS",
	"ZFTasC0fwuAWaw4GuSgMlsFG6oorkJKlQJje8kBMdDt9gFuJPPIB0wEOyPnkrEgSUOp8YsSSYKX3LukZ",
	"tWiP8nRP+Uc2ehzyj67i0+vQJlrLW45XndmS3LMhhakz+bCf4TgKcAnjpGNFNWC7GoUgd7UJ8ss+B+jr",
	"VCobDeqmqTCOkPjaW6M3fjQxjSYmqvYbR2eYlanZ+W4NTY3R4+E3kUb1GJxGgzEO59HNVbEd6aW2Ne+B",
	"0Wr1jVqtYkypXeAgXiX8Y/mY2vVSKChvfH8+5xgwILYXK7Hj9wGveh6uV3ZTWEB0uoWf7WJeKVfsuNQd",
	"xOLc5XPbjtbte0V98o2GWDI+39zgq9z2mcuMJcCtQcIm0kwOc5osgbyavZg4vXbiT9b19fWM4ueZkIt9",
	"11ftvz0+evP+7M3eq9mL2VKv8IEEzXRmhvuQAyd2P8m7quzp4cnxZDq58pfKpODuEVVXE4nTnE0OJn+d",
	"vZi9dMY4xKk5pPtXL/dpoZf7VSbFIkbnP4G25UlqIf9hdZ3j1Cy40MtS2Pb5oTjZqxcvfM402IzV4Ans",
	"/f9xKqnd0m0bHsyCG9DIzPvFrPv7l/+I3K8FGnt1uQqDIxyihosrmrHU1fmNYuNX18CixJaRiaHCt0Os",
	"+5oeeGKZGWYJNAXpK6HaLjav2CG3QkeTSD/H0ds43ZhZjKtBlLx42dWG8arVbogL3uBwL7v4y8eOlkHs",
	"dQ/7ey2r1DCBo2qwMzuYT69qYvk1DtDZXt0nGZYCaBcJWnzfyVz2OZDIVJ+4oUHM9kutOYAuUKnu3BBU",
	"cqNkjULsRlzWkW+u4o3NG0TfXdKzbGhkUVsExztTikwH0o61r4bVDdydgSOYATBx1la/0M1G3/l0/u9c",
	"6rUzXuUSrrBURD2vHR/jnxxMEKDqmJZ1HzYd0GksU9Umvrs4FC1Zoqt0dPSsuioEPhXYJqIy6Z4gmpHX",
	"MKeIEC0IXIFcl+U9YoBmtTIjg6AN60+Gyfl2O0pAw5IBVTmAj1XRBsxtt7no3eivdSdsXt97+MKUtoM2",
	"qjFggPASeKu8ZUVOGAoUVDpADHXii60wGavCU+j3+OurmN/j8z0ymM6zhcrpBr7z4v75zg80JcEzc0+Z",
	"1+VCRUtk2DoVAZKJw3KL0dn3hjbdSm60H0S6vv/tt7ippFQtC7h5DDrspsFXd0gPg6a3W5VaGF49DgyH",
	"SQJ5CcQ/7u5gtB94jEyeSaDpGrPBpANi5AghR+glte7/bi6Fm17Ca4SFkB0F1m1CUxgdsnlavOBcGXt3",
	"v7miZnXGsYOW8VhM5RFIykz6/f1P+l7oH0XBby3Bm6PfKF6c9NalToGmOxNmZbepam3ICKW2Rr09nU4n",
	"BWe/FXBsjUV4G46k+4RJNzfaWZt4cyq1fQDIGu0ahNzfKIAFWe6ExXav4w4ZbF/JcQ/x9h/D9q1WnObG",
	"CY6jnBjKic9EOnpwfmAm/Of9T3gk+DxjrqBLTwZURO9OLFu0M9c5tf3vWrS7hwtzIN8ZNdaRE42c6D44",
	"0RBNdD98a71bJeXrnRnYa+Drr4B7jeL+cz1UnbZcezR2v7oPbf+v5+oeKf0bpHTrTw7pPbgf3NuxOzjT",
	"3TuyHZbI6usz9ZO7l003O8W7cPiWKV19G93dX6u7+5DMWeb2Iwqrf4/alYauodl2dYWkC0UuYT0UdNvz",
	"RxyoBnn/6qajB39HD/7dki6WwR66/bZ29mPd+paBjTEF7qb/64OIFr5QUdddFBd07YMAhLoLqSNQofx4",
	"HzYeN3gvg87Le5l1NJ88jjgaodO2gDrEb95BxKFgOkTzKns8dTWrm5ifpbNwmwQecWp3UM4p0LQf3VgT",
	"EhnJ55sinw7HMvpA/csfJQ2lcRrCxsOZT3rn1PPNuIW30+vo9fiWzFbxo9nf5drJ3LHxU5ALHleqfriT",
	"OUrwIyt4MJVhP3ixKSoHuj1zj4eKDK1J3Bq6I9wCG/uHnb55cbB8wWp01DxxMvfvTHXS+cIZW+dFlpXv",
	"F9oU7LmQ/aTYn0BH3k/bcgre35c8O+2sO2dfdm0+vRW3kmLb01bTxzl1EexuuEa/b+/ye0E8IOPpfDqn",
	"sypF022LULWKYQOsEme+itdo03pGRolNms9gUgp0oKdATc9FExoVk4c7MgFzhjLj8RbVJKq0ya4gmFZi",
	"5TOOh2mhfEtoTIU7srFQRBTHY8TMWCBiLBBxdwnhYxBHH2a2uSBE1ccWONsYatFOyb8fqagj9f/hAjB6",
	"1R6oFV8Y6x48n4CQ2DnbKMYNCRNpSxh9xbghulF0lqeudfc6Gc9SAR8gxkbiSyq8Rq05gwnNhgnzBchc",
	"Mnux1GluJLlvleQGOL57MDpnALojTvdVJBXvKPo8CsU/psQ1mqi+VbfFrtJVLWV4c0C5a9g2RMeYRTR5",
	"8lmzpEOP6MdmTXVARkv2g7KJV68eYpW5FAkoRS8yeMM101jm/G8PsavH7mUI+ySBb3YHfOo2TtftDCoq",
	"sQ93no3C+jMX1m9DgXGp/YkR4fOW3ccDEDJrfI9kF2/rj7Zj3EJXfnymzlX3ystGh2oHAt8ypctPo990",
	"9JuOafnfdlo+HvbRodvFQLckyCP2Opy2/tt9SDx27Ad2zgaTjubBx7bWeRJtCVP7v+P/b/b9k2nuya5d",
	"pKzmq2tdAlfz9cNtsoO5DJDt+Zu9NdEsrnHMgzP1+Hrv05YCG/u/RR7cvtXmknjCGz0dBdRRQB0D+4bw",
	"lNhjxKMUuIGB9r9sh0QeNXliv0v21qz3/jhvaErsOeuTsme33mQejXnDJIpIrNNWIj8Fmn49JP5+JPFn",
	"QuIRnt+ftcftA4GVeohXxnd46rTVaScYSwQ8xFMAW6z/Ed4cp1LDkHvRaKSsxV2Saov3Mp5kRQooeK9W",
	"VK7r1QSUF/vnIRANUZymLllandkxYurLhRAZUD4elwdkwIHpdUiZtXmUhLHtYD47v2s++83UWNtKqmPQ",
	"17cZGxqcyv6B5l3XCrZ9fOnnUb0yD3YmRwfQyAPuSqLsUoVuFVm5RfgcHrw2qklfudy3S3Tk9rvmCRDS",
	"87hxninhBsxRQi4U00KynZ5SOg27x21HjSbP1MNd4nm9xbktN2H0LVO6gc8x8HH0K49+5VtUrfTncnQp",
	"b+RYW6ILg9bxEMPTsMF9yBfBBA8cbNiceVQ4H9sGVKPdDmlniG9sA3U3hJz1EKm9NuxT1wE3U/mzlKf7",
	"CHURH9YGajoFmo60NNLSMI/SBoJyLpenQ1HfjIOpHw2PFuZvzcLcPKj9nUwb+T52+BoP6v1J6A97VkeN",
	"YGQQd88gasqHEoVMQK15sput1fY/W/OkUw2pmjxrY2uF6a3m1qBp3Nxaw/pobh3NraO59RYXY3WaRoPr",
	"Fq611eS6gXV5o2uNed2PUBdM8eCG1+bco6D1+KbXGhV3yT/DrK8bCL0t+AxTnWpDP3272WaCf6aWsz7S",
	"XtQOu4GurCV2pKqRqvxtPMwiu4G0nJXyadHWN2SX7UfNo+Hl2zO8NI/sENvsxrvAWWe/ziN7n8L8Q5/b",
	"UX0Y2cX9sAvzyZp47HkuZDY5mOxPbj7f/P8AAAD//4ZPpl2fagEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
