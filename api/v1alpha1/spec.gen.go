// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"agEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
