// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
