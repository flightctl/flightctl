// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FPAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
