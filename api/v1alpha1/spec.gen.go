// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
