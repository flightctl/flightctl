// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
