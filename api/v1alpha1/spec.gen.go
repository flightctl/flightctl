// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
