// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7efb/x8AAP//H4ouLDRwAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
