// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
