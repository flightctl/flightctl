// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
