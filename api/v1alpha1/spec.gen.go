// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//wafWWDw5gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
