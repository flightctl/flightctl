// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"L7Qm0c37m/8HAAD//0ovVQtDagAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
