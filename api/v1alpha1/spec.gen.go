// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"qgprIuxXIhbR7R+3/x8AAP//13mbXibJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
