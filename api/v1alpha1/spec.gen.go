// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/XT7/wEAAP//EhGbQKbsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
