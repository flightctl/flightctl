// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///nCKPVHRcBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
