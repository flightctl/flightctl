// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
