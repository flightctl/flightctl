// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
