// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
