// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
