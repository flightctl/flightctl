// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
