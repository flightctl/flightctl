// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
