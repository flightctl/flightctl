// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//JN0y5f7sAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
