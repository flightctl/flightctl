// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
