// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9q0LllVR4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
