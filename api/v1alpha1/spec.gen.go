// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
