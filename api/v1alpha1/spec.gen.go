// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/mQ+ufp09X8BAAD//2aqYxMkIAEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
