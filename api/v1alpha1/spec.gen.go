// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"xkhmdlXwNNqPZtHlx8v/DwAA//+5sWBH1zIBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
