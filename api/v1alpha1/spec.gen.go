// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xW0ptRPqgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
