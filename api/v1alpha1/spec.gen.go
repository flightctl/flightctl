// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"89K2sdD2xclFdPPp5v8DAAD//xhAtKbQrwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
