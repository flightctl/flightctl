// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SZhHxYyw2ddHFsHtx9v/DwAA///E7XYS+5YAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
