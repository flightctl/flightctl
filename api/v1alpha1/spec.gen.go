// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde2/bOLb/KoR2gXnAsdvu7GI3/2XSzkwwfQRJusC9k94FLR3b3FKkhqSceop89wu+",
	"JEqibDnNaxr908bi+/Dw8HceJD8nKc8LzoApmRx+TmS6ghybP485y4ginOkfGchUkML+rJNQypnChEmU",
	"gcKESrTgAnEGCMsCUoX4AqkVoLQUAphCUmEF9iOR6Oj0BJ2B5KVIYZpMkkLwAoQiYNqnWKpfAAs1B6wu",
	"SA76o9oUkBwmUgnClsn1xOS6EJhJ0x+frdndixUgnQ8pkoPtTzUAVZWFDC0Ez03vdT9LiRRHmHG1AqG7",
	"12k7BynxMtLgL2WOGRKAMzyngFw+RFhGUqwIW1bkwnNeKte5qifRxvhcglhD9jMwEDg+L3qg0xwUzrDC",
	"02WVE6kVVq2BX2GJJCg0xxIyVBa22QUXOVbJYUKY+scPdT8IU7AEoTsiAMtY49/OBYHFd8imG0ZotPiN",
	"HDROS3pd/V8FLJLD5C+zmkVnjj9nFQee2+zXvqaBxS505mszmt9LIiBLDn/zTbuqPlSd4/P/Qqp0G+1m",
	"Dz8nwMpcF74QJSST5CdMpf7/PfvI+BULanFDnCSfDnSZgzUWDOea139r1+vqan31Vbc+Vy2F/btwxPC9",
	"OyoKwdeQJZPkKE1BSjKn0P7h1+IpFtJkPd+w1Pzxbg2C4qIgbHkOFFLFhabTvzElmSmIs00ySV4S+fFU",
	"gJSl0PW9gZyLTfDh9ORl8Ov49H3w62iNCcW2I6eCL3WKpddLWAqcuQ5JBXn2nhElz0rGbIZjK4RABN/O",
	"C0h99+z/w2biFROc0hyYOoPfS5AqoNwZFFwSxcUmSjZNrd6EDm3DxIrOP1EA1UNsk+aH9BLWJIWK7uZX",
	"i/r2Y2cO7OfmTNhvzfmw38JZcSVbc2NarmfIfojPk2smMluuVDBnF5AXFCv4NwhJOHNTeB1Mdr0Em/sG",
	"sCVhEaH8ynxHwjbqZZOtC30L0+V0ggqe5ZhNUCoInyBQ6XdRGUWybvUnL6vNztcaL5tHt4wT/XlYDZpX",
	"uxW8xfnA8rWEbdZgCdqpw9PGEW6CpOJFAZmhzzRGoJZYNfNph+06P6lFrZutmLC1TNHtp/2OBBQCpBbv",
	"CKNitZEkxRRlJrGLJnBBHCt1Kzw6PXFpKIMFYSANBdb2G2TIbh8VbqlatpsrXyDMkO33FJ3rXVpIJFe8",
	"pJkm4xqEQgJSvmTkj6o2gy6UQSYKpEJ6hxUMU7TGtIQJwixDOd4gAbpeVLKgBpNFTtEbLjSqWPBDtFKq",
	"kIez2ZKo6cd/yinhev/LS0bUZqbnUpB5qSXJLIM10JkkywMs0hVRkKpSwAwX5MB0lulByWme/UU4ESVj",
	"XPSRsMgq+JWwDBE9Izan7WpNMb/yzl6dXyBfv6WqJWAwrTUtNR0IW4CwOQ1M07UAywpOmIM2lBiIWc5z",
	"ovQkGfGtyTxFx5gxrtAcUFlkWEE2RScMHeMc6DGWcOeU1NSTB5pkMg4kLWTbBV/eGRK9AYXNOi4g3VWi",
	"FqzDsZUr44BVazEH68jxQND9/lX8mkjVt5J1muUZqv/iC2S/y3EV3/kqJgryyFbwujsRVc7drFOj8QQL",
	"gTejuHgYcaFn0QqLfRaxn+r+xfzu/NyJnubq7IE2XCoBgEwqYgamCPT+7PUA5GAq7O9IvBspZwuy7Gdq",
	"m16xU5O7M6KL5IRhxUVQ9+atQV2ucqs+ThLO4N0iOfxt+zz8TNSxKXYq+JpkIJw83l7q13IOgoECeQ6p",
	"ALVX4RNGCYNYqzFqthdrhf0i8DrHKl2dYqXlnJ11T7rCfkwOk//7DR/88UH/8+zgXwf/mX74/q8xPm42",
	"ex3pGB8ocRxH6i3Oah779DvHn14DW6pVcvji7/+YtMdxdPC/zw7+dXh5efCf6eXl5eX3NxzNdT8b9wDy",
	"MDWEu1rwiNxuW9aApAWarOA79igYubJaICqBCTUZcapKTGtbnM8+QaAhBcGUbhCxWoBNQSsskZaIhjFS",
	"BZlJzDHDS8iNGAVhMhKGMLpaERqB4JUlKDLU466BEAIsP2jzqQ2WO1k6pviAdMLB5dNjuVkvGvpppC+W",
	"R0/Ygg+EYnX+msONbj2AkC470huSRPxGY+oo9f1jcxvmkYpYa7esgAZFoqugyuHwAhhZTjI5K0uSGRxW",
	"MvJ7CZp5M72ZLjatsbawZLAJx02pR0EOvf640Jw/b1fbkQRzztXJy26dP3Ku0MnLfarKcboiDGK1vfFJ",
	"e9UHWJbCrFlLhMwuGUxPG8TpFOxSx5iEBVEbFFbq165lu6APgVAvjFmaLe2cxmn/zmdCNtfwQbaxTjjN",
	"1dyElO32qEWnDzv4NlwS0cHIhmUlXJERtkwVWRuh38OVNkNTUrar7LpJOM621KmT96wxboXSlbHAEtWs",
	"pj03zhhUd27SGH6M7h37bMzQ18rSNBU5pG8cFNgYdzHV0gNMsXrzHJXP0YQ0mpDkrLOc9rMmdYvfwLDk",
	"ejpIIBy5Nd1VAbB35XR4zqd4Fy1IdLUCtQLrw/QiQ8PgOQBDPn8gGeecU8AGe/rUI9Xf0pExeenKjVMa",
	"K42a01WjuSssYy3Vk+4Tf9z0N/TjxjcUymWXGncQUDwH+iXwwFbQAGruk+K6abrxkquzi9cTK2AZFbX2",
	"ux+U/8UC+jmlxYnPOTjRHiVihwsdiwxitbhVM5qtaeDsZBl3m4c2dUanZJB21IUko/3zK7V/xvfC3RJA",
	"Z7PzHGS0tpdO3m8kUlgswenwETuKFN0mUylsA6ev3hwAS3kGGTr99fj8L8+foVQXXpiNDUmyNP5vUXN5",
	"RJo3zVI39hbprg6jY4/21JNxP2vYIGlbg4a91nqFNq4nSUDmyAQFc9CZKD0pkIXzFJ2XvS1oNxdqW4xp",
	"MTPOKyEa5nJvdO2LkDP5fWDczl3Z5/tw7cJguhWaz01FzyGPbHQmjvrcqM9VJcxK2U+Hs0VuV28zdcYB",
	"dJXUBM3m87iOHxwp1/MwaCexAnuExF8pJK7FSXwdb4G+C52+E+5KFwO7c2h4DtQHzBp+cyGkMVhyH/FW",
	"7ejyuCRs5ao63U/rHqgcJO4Hj800DPYVm9xtV7HDWEEOtMJreACfsR3MHaFcc/aCpDasouL5vSJGYqEq",
	"Pli/18eyHR0HlbgiMd6JB6Ho7ZPSITEsnaFfT9rLaknUma6h/b3AahUdn6gC6nd7kuq8gdTnqJSAsHS+",
	"JpYim3LJohEaRs6cwZp4sLCdsEH3OoUndlQ717OjSTef1mV6o3RudVqIaaXfnKtECbuG4eqID2NrpNKt",
	"DkWa+qNMlvOSqdM+TutZSTZBFjgdsM7qrJOgtZ0cUPc5Tr3mvtVFsCjHhV4EH2EzsViowERIe6YLC0BH",
	"b19qOPIqL9RmxkpKrbEd+Y1Ty3SVrrQwXhG27ApZk/x6f6P/9nGHtcYEUgVFokBTpzjEMAeJ/I5tRy03",
	"TK1AkbQO4kN5Ke2mM0GEpbTMNFDUqoM0eHuNBeGlrDY+0w05RUe1NNE7n9m1OKMbcwyQL9DnGgNMkO/Y",
	"dXSjUoSVMcOPSzH1z8GYJVx0VSlBmN9aycmJ8uE5rMznIEx8i97FkABVCgaZVR1qH1V1rM8cDRTGP5Vr",
	"HGpIhf3ZnSnSwtTyjobJBf69hEoLmZt+ZFqYEilNgjnyWLmhnDITQGVsN2+zpRNpFTTFdTcFgbU9Ysng",
	"k/ImmKonNd2PLVX0JGENESSRSm/mpi7dLYe2C26PU3mSuZHaPa90xxv1uNMVZkvIEBeWBGqFNa5YwBXK",
	"CSs1uczkFlhKvVwuzJ5ip96riAsCNKuoja5WwFAprcZBJKpm0pLyilCqu2ijjVIbRaBqStu5XBBhIhBk",
	"wZmECSoZBSnRhpe2PwJSIBUpFf8IzKonmCEIrWRRi6CAHBNG2PJEQX6shVLMYdbOU3kEKz6T5Vzq6dZp",
	"huVc7810WM+aFjV6UuzqMr7SYPr9AKfoZFGX9Czko+oyJ5q4cLSuZNREF2pzf9Vz3ymJSnva0XCvJa+u",
	"xk8FhYXWp82SYhniOVEaeGal0SQlCIIp+cMwTbOjZnbzgoIC9C0Qw/9zSLGGF8QkGyi7KtlHXROvUw0J",
	"HD3N+VaT6bt6PAIc6SxftsdkB6J10puPxGu5nGZGw8UMrZ9Pn/8dZdz0W9dSt2F5nzAFTE+jHkSFsWKc",
	"8j1IRXITH/W9XYPkD6cMpJzq+TOdODbac2Ud0e0KMIK0r27FvTzkwv2ATzhVgw4ix/B5oK91VkGdpsfU",
	"3E8wpajQMkBqGkf3FLsGHO9LU8LJMiPFXd5UQFSHNcYDXOkxN3Sr15ntye1NJRH7fOimP+5cvFQ4L3pa",
	"obA713LLwfMjZKVHWq3ehr0GI6MtLkiKgkPpVZSv1JDBqf/olBelVoCrQD8XSYjOAGcHemseeE79i6MY",
	"3ljc5cxQH2HjkQQt/d6bYhbun1wsMdOLQ+fTW/SSC/3zW5nywn61Au+7aiOMzVo8tC5Uhlze2DUBVwyi",
	"KDIwlWGF+BWT3uJpv2vYhC6N6Wemm7pMkCVyPGii0+kzLU0EZMNOZsRcWzc4cnAvRwqEG1lgZO6eqd3/",
	"2MFNDhA0tdNmtz5EJ6VfwT4LFerAbbYkCjU039HaPnrNnrzXrF4t+7nOgnK36z+rK4470ZrpTU9alUZG",
	"v/jD+9NEazYGWa4DyT661r5S11pL5kTs6lJecZHFjec+1R50KNUKXRG1Qr9cXJzaO5gKLlQIpavqJnFL",
	"fbyZb52FRi+/nCv4LrTUvz97rdduSjkDwxmxurX+1H+axKfuGsYgiNqSxVuE5k0cafXAB3vTgiJf7vtq",
	"VnYXDrDw0qIY9erU9pmbBQijHmotiUFlpVsQCtJ6AAO2Udw6c4xN0Ykhs904cow71ohJR0w6a1whticq",
	"DUreNi6tq/bIdFytD4svXdkNS/fAl4GkHxHmV4swWxKkN3Yjhi/VygX8EGp29IwI48zZeO9RCIhOzEUT",
	"Psfkkhnbb1WiXqMKE2ZdsLG936I/xi+ZLOe+uFac0CucrmxXWnVZI7OvQXfZIpBL5hwy/h6YeNTIgwep",
	"dJv0JnPhcnXpvTOk/kaxLS2G6QXR7Tz7wuhaXn0ZKMY3k31bLxLx9/Ae8zwnastlw6nJgFZYrqzN3dy4",
	"a276jM/80Bt+Te3ty31bld/IfXa+/WJIYpG8KgVzcl2rZCmm1HlDMs6+UT6HjSEI3BwDT4YcoVWZY3ZQ",
	"3Z7cChtVrfsUTECDI0WPizx+X/ERcldA9DZ1tdq0GtA0cGvtMvkJE1oKuExcf5xHmcg61ALyQm2cE9j4",
	"kJvsXwdoHKEze21ySrEgCwJSAxmj5LrBpjwDNC81lcF6o/kahCAZoJ4bGobd81kTD70zIS+H6DI5L809",
	"tpeJFuvBSO98p9Sw8gCz7KB5F/N2vd7fFfsyjMRsXM4cD37cEbm2JT5v2F3C0X5VXUl6Ot7oU1+msGfm",
	"WFTrvtyI5GhmaOrnDl9bmelDkEfL8Khnj3o2lrPW0tlP1W4Xvl1tu1V73BUUydT0B7UyjD6hB9fZYzMy",
	"CLu294FRdf9KVfeYUOpo74v4YekLf1AGXa24hGrH9+tzoadO8d3Xpdj6h3SvkpXDDgM07q3eIc9uomNW",
	"I3ZS6pHdVrnfLYofrvVH4m5PpCQFJo1mZb1qyVGB0xWgF9NnySQpBU0OE79Urq6uptgkT7lYzlxZOXt9",
	"cvzq7fmrgxfTZ9OVys31Boooqqt7VwBzN0OjN/VxrqPTk2SSrP0ukZTM7gaZu/OP4YIkh8nfps+mz52J",
	"wRBJr7rZ+vnMnSGz1KYQu0PBfm/EnQa3VNcX+XF2kpmbI3X2OtXHKJs2Xjx75uP2wUZN46Kg5n0ezmb/",
	"dSqjna1dc1lt6p0Ywne/6tH/8Oz5rbVlb1qINPWe4VKtTMBhZrkEL40aYglrtIRlTBoYFNBHQy246rQC",
	"C5yDMlF6v3VwAEO8sHGWqMqot+nfSxAbH/0sS6qCjcDG84cnFNxyMjXoCkxgrT3BotqZvvEh+d+48Gmn",
	"nBcC1ua4RzM2Xa9N3VPTIX9Yrj6hoYFWNQedVReLebXB685PqQRJVR1Sbizv7iSBDxW2Ia1EuOuwpugl",
	"LLAhiOII1iA21RGdWEdp46jQXr29MGcvP5G8zBsB9nY6qo6GYf91SP9FffDCxKfbePJ+8jeKI7Jozj18",
	"IlLZSlsnKoy3fAUmptZFDEOGsAzYybiKg9MKhkK99CI5UQ06hXaxv72I2sVilDNRtU1BL/satRG42ybn",
	"wx2KouC5hS3i6Nndi6MfcYaC+7AejQgseExFsoH7CDs52BGDxya9SnQQ9UeebW555uywaoylRAnXHX55",
	"fiettkCOGXL2hBhGN/qvu2/UooVjzhaU+Ivh23x6PWnjotlnLV+uB8GjHiYO8dCuzTz0alUljLgzvqFK",
	"2rkrfJsM+7DC71HhMN3oD3ff6FuufuIl2w/4CcD2EF291/ZwzhngbBjf2DvY0cg+XxX7FGWUfQqKUxjK",
	"QSbzYxA+D7t13x+7jjDhK1mTfwZcMvPH0cxFMLHdZumUxkWpNUh3HtTa6PxbwbUUyeJS5GdQkXOGO6RJ",
	"+DJmdpvSZNIbnWHPqLdP6MX1RZP3rJP1YbbACHW3yJcfIs+QcuQ7Mq7Ox7M6a19lPxJsvVIyHBOe+1iN",
	"UaMYIaGBhHuzUgAOHwM3PRWIOCK2+1sygXCG6lpu7+u+gdervtu7z/PVuf37CTvBOiTf4Q+raYcC4nV9",
	"Y1Eaj26y0U32lbvJ7hJ0xd/ZGd1ZO4RZ3LPlr2Cry9gImK2Oru6TNneDiiJP59yv+6unA70mrhfP/nm/",
	"bR9RrZttzJUdYnTH3a9iHVtnW2HcPk66LsIYCuP20Y2irTx2rXvQyniSCvgeMDbi3avpGrXm7M1o9gJO",
	"tgRRCGI3luirQyPLfXUst4dHcICgcwagW5J0d8B1jwb6PAjHPyTiGk1UD7LCh8CcWfhq3va4Ov/Odsci",
	"HFu1gzSS6uG9JyQi6scGH1hUNDvyVDfJSfLDixf3McpC8BSkxHMKr5gianM7y/dLnIK7120UUe7v3BnB",
	"5BMHk1/CgXFU+ciY8Gljy3EBhMLaHKi8iTfQPsrYY0GqEp+o888dU93q8Osh4GsiVZU0+vVGv96TP/62",
	"qJ9/fXSn3+pHhUdvYUT67Tj7Zl/qjevfPu0u4Ip7Ifh+PX9Bo6Pt6aEdbZ5FO0ho9tn8fz3zFza4+wX2",
	"8rS1L3voQUntq1N27Pcdwdju4jSuJCyClXTDOPNQNYkM7rGrx507akbdQIZvP/uZ3Me1t5PHzwBnfx4O",
	"fzty+NPg8IjEHy7Y44Al0Hn3sfH4Ao+dt3qBy5MyvN8HYNkKVYaL5jiXank8iEcjJ6pHVv0zCr9ADxse",
	"PNHHPCbvw8u4B1UG741RR71z3Ddua9/oAzxf5I3dscXs7/Aad5iveIfZl4vqveYRMNLT2HGeKOMGwjF8",
	"FfMG/tDwidMeDbGV5Yn6RoOHYLY7SMU2ir4mUrXoOTpLR2fpeAjyC25iabzvPPoz+yTWDqdm46GrmGfz",
	"LMxwF/gifKr5fn2c7ZZHhfOhHZ0N3u1BO/tYwLdwdwvkbPZB7Y1qH7sOuJ3LnySeHgLqIpbqLdx0Bjgb",
	"eWnkpX1s11vZyRR4TBz18Bv//bLxCDSewHptQIz6KdSbWVSCF6H7wEad5UmbVIIHbHcZVRpv3caMKg2q",
	"j0aV0agyGlW+YJ+qV9NoVtkhtXYaVraILm9aaQivu8FYQRP3bl5ptz3inoc3sDS4uA//7Gdj2cLoXeCz",
	"nybTqPrxa8fbGf6J6sdD0F7U2rKFr6y9ZeSqkav8bryP3WUrYznLy+PirceADO6bpUcs8kRWb4BC2kdo",
	"bmCIaZ+HkcPOs8nbO+7zqM78Pm5bUOxMV9uM0ZooRPmSpJjSDZoD5WxpjBPutIt92V5yRBTKyXJlnkZn",
	"WJUCU51thddwycw73kenJzpx4IHKKbrQha54SbMJWvErnTKpzCq6TkClxEs4vGQH6ETZrIhxhTCl/Mo+",
	"5a7FjH/VvzOw+QZp2m8IWyKM/ufozWuEKWcwuWQIzSHFpbR7GXxSArsnyrFYlubyQNceQKYHOgdUYCmt",
	"eeIKKJ32dIsSaR6v5wKZBaX/bi8Naw7LS6pIQf0Rd0SY7hdGkrAlBUNPPS1T9BMXCD7hvKAwqerHlHbr",
	"vSJqhTBakjUwa3PSVQpYYpFRkLK6umN6yZJthsLdi/41kWrfJT9aDEeL4VO4s+LPsZO1Vu9ooNx5ePR6",
	"klgmt8KtFDQ5TGbJ9Yfr/w8AAP//gHQxLdnoAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
