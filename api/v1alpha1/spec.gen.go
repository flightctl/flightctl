// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
