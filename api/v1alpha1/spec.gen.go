// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"+nz1/wEAAP//KzHZIV14AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
