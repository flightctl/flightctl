// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
