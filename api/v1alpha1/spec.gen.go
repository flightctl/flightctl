// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a3PbtpZ/BcO7M23vyFKS292562+uk7ae5uGxnc7s1PkAkUcSbkCABUA5asb/fQcv",
	"EiRBiXL8qs1PiYXXwcF5nwPwa5LyvOAMmJLJ4ddEpivIsfnvMWcZUYQz/UcGMhWksH/WTSjlTGHCJMpA",
	"YUIlWnCBOAOEZQGpQnyB1ApQWgoBTCGpsAL7I5Ho6PQEnYHkpUhhmkySQvAChCJg1qdYql8BCzUHrC5I",
	"DvpHtSkgOUykEoQtk+uJ6XUhMJMGHt+tCe7FCpDuhxTJwcJTbUBVYyFDC8FzA72Gs5RIcYQZVysQGrzO",
	"2jlIiZeRBX8tc8yQAJzhOQXk+iHCMpJiRdiyQhee81I54CpIoovxuQSxhuwXYCBw/Fz0Rqc5KJxhhafL",
	"qidSK6xaG7/CEklQaI4lZKgs7LILLnKsksOEMPU/P9ZwEKZgCUIDIgDL2OLfzwWBxQ/IthtCaKz4nRy0",
	"T4t6Pf1/CVgkh8k/ZjWJzhx9zioKPLfdr/1MA4dd6M7XZjd/lkRAlhz+4Zd2U32qgOPz/0Cq9BrtZQ+/",
	"JsDKXA++ECUkk+RnTKX+9yP7zPgVC2ZxW5wkXw70mIM1Fgznmtb/aM/r5mr96qdu/VytFMJ34ZDhoTsq",
	"CsHXkCWT5ChNQUoyp9D+w/PiKRbSdD3fsNT858MaBMVFQdjyHCikigtpBuBsk0yS10R+PhUgZSn0PO8g",
	"52IT/HB68jr46/j0Y/DX0RoTii0Ap4IvdYvF02tYCpyZ9X/HlGQDcfmGCU5pDkydwZ8lSBXs/QwKLoni",
	"YhPduN5vb0MHO2FjhamfKYDqQddrWJMUKqSZv1qosz92EGh/bqLR/tZEpv0tRKkb2UKsWblG7wXkBcUK",
	"fgchCWcO25aetHgHUdN7U0iTrCsITl5XYt8Pj3I6yaPC80T/PGwGfebdCd7jfOD4WtY0Z7C77cyBvofp",
	"cjpBomSMsOUEScWLArIJApVOf4gs0RIwRCPbbtsBX8EQkzb2nLrg2d+RgEKA1PINYVSsNpKkmKLMNHbV",
	"KS6IO97uhEenJ64NZbAgDKTZ+Nr+Bhmy8rNS3NXKVrvwBcIMWbin6FyrKSGRXPGSZhp7axAKCUj5kpG/",
	"qtmMelVGNSuQCmkVIximaI1pCROEWYZyvEEC9LyoZMEMpoucondcaLW64IdopVQhD2ezJVHTz/+WU8K1",
	"AshLRtRmpo9QkHmpGXGWwRroTJLlARbpiihIVSlghgtyYIBlelNymmf/EI7DZYx4PhMWIf7fCMsQ0Sdi",
	"e1pQa4zpn/Smz96cXyA/v8WqRWBwrDUuNR4IW4CwPY2domcBlhWcMKfbKTE2VjnPidKHZKSfRvMUHWPG",
	"uEJzQGWRYQXZFJ0wdIxzoMdYwp1jUmNPHmiUybglZW2WXfr7g0HRO1DYsG8B6a4RllfOdc/BxoUb4yyL",
	"Fg8HfORoIAC/n4vfEqn6OFm3WZqh+n98gezvcuTiO+dioiCPaIC33YOoeu4mndocTbAQeDOKi4cRF/oU",
	"rbDYh4n9Ufcz84fzcyd6WtZQ3KLhUgkAZFoRM9aJQB/P3g4wGMyE/YB4MDClHxbJ4R9DZSFZGEeUs+R6",
	"0t6EahqDcS+zZTF2CVZhsQTv8FtfkMjAOOnuu7XFT5OorNTQW4YJWo3scpN/JxtrT5vIqjfeObyUswVZ",
	"9osC214xYVMmZEQPyQnDiotg7s17Y6K6ya3XOUk4gwHH9QtRx2bYqeBrkoFwWmz7qN/KOQgGCuQ5pALU",
	"XoNPGCUMYqvGaLAt4ipDOeIo5Filq1OstHYwrOIxhzPrsWJ6GgxQooQI4zdXvI7AxAeKaMfC2ibYSAV5",
	"th1k2YB5b7iu+zm4xwUJW0NLX8tckVuNbYNHmttk5bB4NpgiN1brAiUwoaYjTlWJaR2H890nCLQ1RTCl",
	"G0Ss32Nb0ApLpJWBOd1UQWYac8zwEnKjQUCYjoQhjK5WhEa8jyoKFNnqcTc4CIGkGKR362DlTrqMuXog",
	"HYe7fnovN4Oi4S5HYLHUdsIWfKAVWvevafUjI2oIIl13pHWxRPxGewrBMAv3783ZCkcqyiPODh244O++",
	"9zbeaeAyyj9VD2dkgRHlJJOzsiSZMV5LRv4sQZN9pvXXYtPCUssADyyXuGo8CnpozuVC88y8PW0HP3PO",
	"1cnr7pw/ca7Qyet9pspxuiIMYrO98017zQdYlsJw+xaZHTnzLnZMIFkQtUHhpJ7rLcEGMASCvTDBbLa0",
	"ZxrH/QffCdlewzfZNhDDY67OJsRsF6IWnj7toNuQmaKbkY0oVMjLEbJMFVkbddFDlbZDU8a2p+wmVzjO",
	"tsypm/ecMR6x05OxIGrXnKZ9Ni5wVgM3aWy/H++/BxKoC4CXTxqINRaElxLV4qkrPZsHoCkk3Tqxntf0",
	"iqd3pOZzyOJTzE1bOJOGpSLALt+EE59xSuc4/RyfWrjWG05+rvCyD2pp2m4wcevAK9zEjrYT7u/C0unS",
	"DJ06z9d4KdjkCjDVigHMsNqiGoMxY0h1DKnKWYed9ouudoffINDqIB0kEI4cT3c9POwzgx2a8y0+Zw8S",
	"Xa1ArcAmtb3I0L7RHIAh3z8QZnPOKWDjkPjWI9W/0pEJAZvQCckBYaVdqXTVWO4Ky9hK9aH7xp82/Qv9",
	"tPELhSrXtcbzZBTPgX6L5WcnaNjg7ifF9dJ04yVXx0CrD1bAMipq7e9+U/4vFuDPebJOfM7BifYoEjtU",
	"6EhkEKnFo/zRbs2Af6fLqG0eOvQfPZJBLnPXJBnzAU80HxDXhbslwJYwdqdvJ6LdCa5J0V0ylcIucPrm",
	"3QGwlGeQodPfjs//8fIFSvVgEwoHJMmSabISNZVHpHkzVnnj7KkGdRgeexzjno77hUgHSdvaaNiL1ytr",
	"43qSBGiOHFBwBp2D0ocCWXhO0XPZO6x6c6G2JcIai9C9EaKRCPEx9b6SSdPfV0ru1Mq+36drV3HVndD8",
	"3HT0nOWRjcn10Z8b/blqhOGU/Xw4O+R2/TYzZ9yArpqaRrP5eeTjB7eU63MYpEmswB5N4idqEtfiJM7H",
	"W0zfhW7fae5KV1K9c2t4DtTXXxt6c0UrMbPk7usPg5qb9r2DuEhs9aqg70d6j80cNO5nJ5vzGFxJYHq3",
	"CwmcsRX0QCu8hgeoKLCbuSNz19zKIamtnKmIf6+ioFg1kr/G0ZtH224mB5O4ITHaidcZDa4q6269W1O2",
	"JOpMz9D+vcBqFd2fqC5q7M4W1n0D8c9RKQFh6fKJLEW25ZLFpKUVOGewJt5q2I7YALzO4Ind1U5+djjp",
	"9tNOTW8h1q0eCzGrDKzC6tmGmyO+ja3FaLe6FWnmjxJZzkumTvsorYeTbIMscDqAz+quk2C1nRRQwxzH",
	"XlOBdU1ZlONCM8Fn2EysUVRgIqS97YcFoKP3r7VdcsQQ5IXa2Jg78voTmQI3kAjWIDZqRdhyio4QKynt",
	"68m47daRxqbD2/3TBNsRFM4ak1yV8RI1TXWLszHmIJHX8RY9csPUChRJ64JOlJfSaqcJIiylZaZNS+1s",
	"SGOh+6IAryENGFKjrBI7WkUa9cYZ3ZibpHyBvtZWwwR5wK6jGk0RVsZCRa7FzD8HE8hwRXqlBGH+1m5R",
	"TpSvU2BlPgdhip20ukMCVCkYZNbZqLNa1c1Qc7tUmIxWri1Xgyrsb5JNkalkMESmDesC/1lC5bfMDRyZ",
	"lrpEStNgbs1WiSvn/gTGNbZa3uh+Iq1Lp7gGUxBY21u6DL4oH7SpIKnxfmyxog8Ja1tCEqm01jdzabCc",
	"fV5we5/Po8zt1CrH0t2Q1ftOV5gtIUOa4DUK1AprA2QBVygnrNToModbYCk1X5nyCXf03qlcEKBZhW10",
	"tQKGSml9FCJRdZIWlVeEUg2iLT1Lbd2BqjFtz3JBhKlZkAVnEiaoZBSkRBteWngEpEAqVCr+GZh1aDBD",
	"EMbVojFEATkmjLDliYL8WEuvWIqt3afKIVZ0Jsu51Met2wzJOejNcdhcnJZJ+lAsd5nsanD8foNTdLKo",
	"R3oS8sWZmZNNXDhceyElJ3pQm/oryD1QEpX2wqyhXotePY0/CgoL7YEblmIZ4jlR2kLNSuN7ShAEU/KX",
	"IZomoMSWC1FQgL4HYuh/DinWdggxzcbmXZXss56J160GBQ6f5oq06fRDvR8BDnWWLtt7shvRXuzNd+L9",
	"Yk4z4xNjhtYvpy//G2XcwK1nqdewtE+YAqaPUW+iMsZilPJPkIrkpurnn5YHyV/Oa0g51edngDg2/nYV",
	"T9HrCjCCtG9uxb085ML9AV9wqgbdZY8Z8oGH1+GCuk3vqalPMKWo0DJAahxHdYrlAUf70oxwssxIcdc3",
	"FRD1ek24AVcOzw0T8XVne/l/U0nEvqy7gcc9rSAVzoueVSjs7rXc8nbBEbLSI624txHhwUg6HxoF7xpU",
	"xeJSmwwuYIBOeVFqT7mq+nSFZugMcHagVfPApw6+ue7hnTXQXODqM2y8JUFLr3tTzEL9ycUSM80cup9W",
	"0Usu9J/fy5QX9lcr8H6oFGHs1OJ1lqHX5PrGivquGETNzSC4hhXiV0z6GKn9XZtN6NIEi2Z6qcsEWSQP",
	"uvAzSc60NBGQNe829d3SiSXD/obXTypsd2+n38PFlEnsuteOakwDcHfgp+iJ9rvxZ6HbHmTplkShhn89",
	"BvfHJN2zT9LV3LJfpi4Yd7vpunrieM6u2d5M3FVtZEzDP3z6TrROY1B8PJDsYybviWbyWjInEr2X8oqL",
	"ntsfvtXeqyjVCl0RtUK/Xlyc2jfACi5UaIdX003i+YD4Mt+78I5mv5wr+CHMB3w8e6t5N6WcgaGM2Nza",
	"+eq/l+Rbd21jkH3bksVbhOZN0nX1xgfn7IIh355ha052F2m28MmtGPbq1vYVnwUI41tqF4tBFeJbEArS",
	"5hkDslHcpoxMQNKJIaNuHDpGjTXapKNNOms8gLenVRqMvG27tJ7aW6Yjtz6sfenGbli6h30ZSPrRwnyy",
	"FmZLgvRWiMTsS7VyZUWEGo2eEWEyQRufegoNohPz2InvMblkJnBcjah5VGHCbP42pvut9cf4JZPl3A/X",
	"jhN6g9OVBaU1l41Q+xk0yNYCuWQum+MfFIrXpjx4KUx3SR9vF65XF99DDeKOGthq1N3MKK6lz7eZuPhm",
	"kmzr0zT+VedjnudEbXm6OjUd0ArLlQ2/m/ebzauz8XMc+l60mb39VHRr8htl0s63P65KrF2uSsGclNYO",
	"VoopdYmRjLPvlO9hywmCjMfAayVHaFXmmB1Ub3G3ak5V650NU9vgUNGTLY+/fn2E3NMgvUtdrTatBTQO",
	"HOdcJj9jQksBl4mDxyWXiayrLmwRj80Hm3Ryk/zrWo0jdGYf4U4pFmRBQGqzxLisbrMpzwDNS41lW9aD",
	"+BqEIBmgnpc7hr2VWyMPfTDVL4foMjkvzZvKl4kW0sFO71zvaSPxALPsoPmy93ah5J+2ex1Wbzae+o4X",
	"TO6odttS0zfsXesoXBUoSQ/gDZj6OoWQmTtVFzvfAOx7/09zdfDgB0Y+TTTGeUevefSasZy1WGc/x7k9",
	"+HZ959bs8cROpFMzu9PqMGZ4HtwDj53IINu1rQdGR/yJOuIxodTxxRfxm9YX/nINulpxCZXG9/y50Een",
	"+O63Vuz8Q8CrZOW3PXy8VbDdxNmstu7E1SN7CHXbA52RF5iv9Y/EPa9JSQpMGhfLJsuSowKnK0Cvpi+S",
	"SVIKmhwmnmeurq6m2DRPuVjO3Fg5e3ty/Ob9+ZuDV9MX05XKzSMJiiiqp/tQAHPvraN39V2wo9OTpHo8",
	"NDlMSmbVQuYehWS4IMlh8q/pi+lLd/fGIEmz32z9cuYuoFlsU4i9xGB/b9SiBm+/1y89cnaSmadFdfe6",
	"1dctmzVevXjha/nBVlLjoqCO6Gb/cb6jPa1dZ1lp905d4Yff9O5/fPHy1tay7zVElvrIcKlWpggxs1SC",
	"l8YfsYg17sIyJhaMOdCHQy3B6rYCC5yDMpV7f3QMAoZ4YUv0UNVR6+s/SxAbXxEtS6oCjWBr/MNbC46d",
	"6hlMta0ppQsq7l2v73yd/neuptq56YWAtbkD0ixY18ypQTUQ+at29bUNbXJVh9Bhu1ghrLt2Y/OPSpBU",
	"1XXmJqLurhf4+mFb50qEe1Vril7DAhuMKB5e7+kBlDYuGu0F7YW5ufmF5GXeqLq351EBGt4FqOv8L+rb",
	"GKZo3RaZ96O/MRyRRfPw4QuRyk7aumZhsuArMIW2rowYMoRlQA0mBRxcYTAY6sUXyYlq4CmMkP3rVTRC",
	"FsOcqaVsSnrZt6ivu+w/nE93KIuCr5hskUcv7l4e/YQzFDyr9WhkYMFjzpKt5kfYCcKOHDw27VWjM1Z/",
	"4tnmlk/Obqu2tpQo4bpDLy/vZNWWlWO2nD0jgtGL/u/dL2rNhWPOFpT4jw606fR60jaMZl+1fLkeZB/1",
	"EHFoEO3S5mG2qhphxJ3J9FXSzj3y3CTYhxV+j8oQ04v+ePeLvufqZ16y/Sw/AdjerKt1bQ/lnAHOhtGN",
	"faUfjeTzpMinKKPkU1CcwlAKMp0fg/B5WNV9f+Q6mglPhCf/DnbJTLa/2hVVOUvnOS5K7UaGQ6oPUdei",
	"JIuLkl9ARW4g7hAp4cdms9sUKZPeYg17e927gzFX0fT4sNNf3LVEO5q5bbV2puChdG3kBLcIsh8jXw/m",
	"yAMyioFHJAaqkH+/ydn6YM5w4/Pcl4eMrstoexrbc29SCqzQx0BNz8UWHU3D+2OZQDhD9Yy4T6/fIL9W",
	"v0Xel2PrvFb+jNNtHZTvyLzVuEMB8rpZuCiOx4TcmJB76gm5u7S64h8GGhNnO6RZPIfmX4Crx9him60p",
	"te43eO7GLIp86+d+E209APQG0169+Pf9rn1EtXO2MY9+iDHxd7+edYzPttpx+6QDuybGUDtuH+couspj",
	"d7sHccaz9MD3sGMjecQar9Fwzt6EZt//ZEsQhSBWsUQ/kzSS3JMjuT1yjwMEnYsA3ZKkuwOqezSmz4NQ",
	"/ENaXGOM6kE4fIiZMws/87e9gs9/GLwTEo5x7SCPpPpS4DMSEfXXER9YVDQBea5KcpL8+OrVfeyyEDwF",
	"KfGcwhumiNrcDvt+S1ZwN99GLcr9szujMfnMjclvocC4VfnIiPB525YjA4TC2lzivEk60H5FsieCVDU+",
	"0+yfuxq7NePXg8C3RKqqaUzsjYm98abdov5g7aO7aFd/BnlMF0bE345rdvbbwnEH3Lfdhb3ivml8v6m/",
	"YNEx+PTQmTZPoh1TaPbV/Hs98+XUrpp6r1RbpBQ7ZiZ1q7C3KvyOYGyDOI17CYuAk25YzR76Jn115o/Y",
	"P+48jDM6BzL8SLU/yX1yeztp/Axw9veh8PcjhT8PCo9I/OGCPW6wBE7vPkEeP+Cx01av4fKsIu/3YbBs",
	"NVWGi+Y4lWp5PIhGI5e3R1L9Owq/wA8bXj3RRzym78PLuAd1Bu+NUEe/c9Qbt6U3+gyeb0rH7lAx+2e8",
	"Rg3zhDXMvlRU65pHQEjPQ+M8U8INhGP4Yc0bJETDr6T2eIitLs80ORp8dmZ7hlRsw+hbIlULn2O2dMyW",
	"jtcgv+UxlsY3oseEZp/I2pHVbHxXK5baPAs73IWBEX7u+X6TnO2VR4/zoTOdDdrtMXf2CYFvoe6WlbPZ",
	"x2xvTPvYncDtVP4sDeohVl0kVL2Fms4AZyMtjbS0T/B6KzmZAY+Joh5e8d8vGY+GxjPg14aJUX+A9WYh",
	"leCr0n3GRt3lWcdUgs/m7oqqNL6wG4uqNLB+31GVMagyBlWeVFCl5qYxrLJDau0MrGwRXT600hBed2Nj",
	"BUvce3ilvfZo9zx8gKVBxX32z34xli2E3jV89vNkGlM/fu94O8E/U/94iLUXjbZsoSsbbxmpaqQqr433",
	"ibtsJSwXeXlctPUYLIP7JunRFnkm3BtYIe07NDcIxLQvxMhhF9rk7d33eVSXfh93LCh2qasdxmgdFKJ8",
	"SVJM6QbNgXK2NMEJd93Ffk9fckQUyslyZT7IzrAqBaa62wqv4ZKZr4cfnZ7oxoE3KqfoQg+64iXNJmjF",
	"r3TLpAqr6DkBlRIv4fCSHaATZbsixhXClPIr+wF5LWYcneLOxuYbpHG/IWyJMPq/o3dvEaacweSSITSH",
	"FJfS6jL4ogR2H0bHYlma5wPdegCZ3ugcUIGltOGJK6B02gMWJdJ8Mp8LZBhK/7/NGjYclpdUkYL6O+6I",
	"MA0XRpKwJQWDT30sU/QzFwi+4LygMKnmx5R2570iaoUwWpI1MBtz0lMKWGKRUZCyerxjesmSbYHC3Uz/",
	"lki1L8uPdVhjyPBZvFrx91BlLfYdI5S7demOIOXOe9HWLu7ejL4LjyR6Lfj+wpUDbiWPEcv7j1hGLkVf",
	"TxIruq3OLgVNDpNZcv3p+v8DAAD//5Vw93x07gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
