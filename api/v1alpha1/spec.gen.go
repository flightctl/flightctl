// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
