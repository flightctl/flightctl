// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
