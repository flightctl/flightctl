// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8Sp4Gu1Hs+jy0+X/BQAA///uqkSejvwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
