// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
