// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
