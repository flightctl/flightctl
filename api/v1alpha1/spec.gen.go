// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
