// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3PctpbgX8H0nS0nd1ot2zc3da+qUlO6sp1o44dKknNrNvJsQSS6GyMSYABQcier",
	"qv0b+/f2l0zh4EGQBNmkrJdtfkmsJp4HB+eF8/hjlvC84IwwJWd7f8xksiY5hn/uF0VGE6woZy/Z5S9Y",
	"wK+F4AURihL4i1QfcJpS3RZnR7UmalOQ2d5MKkHZanY9n6VEJoIWuu1sb/aSXVLBWU6YQpdYUHyeEXRB",
	"NjuXOCsJKjAVco4o+y+SKJKitNTDIFEyRXMym7vh+bluMLu+bv0yDzdyUpAEFptl75azvV//mP2rIMvZ",
	"3uxPuxUcdi0QdiMQuJ43QcBwTvT/69s6XROkvyC+RGpNEK6GqhbtYBJZ9B8zzsiAJR7meEWCdR4JfklT",
	"ImbXH64/bIGFwqqUp9BCn2SZz/Z+nR0JUmBY1nx2orBQ5p/HJWPmXy+F4GI2n71nF4xf6d0c8LzIiCLp",
	"7ENza/PZxx098s4lFhocUk/RWkM4Z+tjsIjWt2pVrU9uma0P1bpbn4KN1EElT8o8x2ITB9lPBGdqvZnN",
	"Zy/ISuCUpBEwjQZNfc5qjs4mweSdbSJQqTfwy9UAKNX6gLMlXbXxW39DCXxczOaNK4FLtXZAinQDOMzb",
	"hEF3e3/8uqOX/hK7OYL8VlJBUg0+P3E1WOwS/AOrZN2eBn5GVCLMEMkIkCTK0Dn8LMlvJWEJae82ozlV",
	"+h/DbuwREQlhCq8IXPOcMpprPHrmF0qZIitzheczSTKSKC70BH3DvsbnJDtxjXXHMkmIlKdrQeSaZ+m2",
	"AcJ1XXcB7cRCoQN47jNKyZIyIoH0ZVQqTQYBjvo3js4JIh9JUmqKTlkPbGUwH1Ukl9t2YY72eq7hemg6",
	"VIDFQuBNfHcHR++PieSlSMgbzqjiYhyriHWG8zvQm1nqu0ZO6EpTq2O9J6naIOxsigQpBJF6QoSRsD8u",
	"uUAYSbpiJEVJ1RctBc8B8gf77atZ0F+IkDBh65odHdpvtfO7NL+RFJnNGpZGZbUqoCP6Z8yQAekCnRCh",
	"OyK55mWWalJxSYTeScJXjP7uRwN8ADTBSu9KI79gOEPA/+cIsxTleIME0eOikgUjQBO5QG+4IIiyJd9D",
	"a6UKube7u6JqcfE3uaBcn1ZeMqo2uwlnStDzUnEhd1NySbJdSVc7WCRrqkiiSkF2cUF3YLEMiOMiT/8k",
	"7NnKGNG6oCxtg/JnylKgJMi0NEutIKZ/0ps+fnlyitz4BqoGgMGRV7DUcKBsSYRp6c+ZsLTglCn4I8mo",
	"JlyyPM+pkg5bNJgX6AAzxpW+fmWRYkXSBTpk6ADnJDvAktw5JDX05I4GWRSWOVE4xQpvu+TvAERviMJA",
	"6OxF7evRebXMRZ3PJHC/mw9jurf4UXXbLKYEm7QrjzGoznle01GEQzc3aOiIcDc5mijFHVMKz7/qsHy9",
	"7WQ0VxzE+7rP9rrJAie69RB0Sx+1oVrj6IQ5/VGEwkkv9eP9p8BFQQTCgpcsRRiVkoidRBANU3RwcjxH",
	"OU9JRlLEGbooz4lgRBGJKAdY4oIuAklDLi6fLfqX0KQq5GNBhVG5SMI1PFuLtN2Nsu8JxiXOaErVBsQe",
	"wJdq3tl8tuQix8oIz395PmvL0vMZ+agE7rNU+EvWOuDm5WmYMPTACCuDWUQ6nV8DF6k1VshBGIQyDeWC",
	"F2UGP51v4Nf9o0Mk4bpoyEN7vXFN02ielwqfZxFrh8GiqDB5uiboHEvy/Xc7hCU8JSk6evmm+vfPByd/",
	"evZUr2aB3jjJfE2Q5kkLL2JSkoGEjkNk6JNTDUUID+R8o6LaHgiu4m3UenLIUoNgsCThEcL0MaQeqNRv",
	"Jc7okpIUjC2xaUoaIXPvD1/c/SEFa5B4RSKY/h5+B5DrTQDZJcAMLsgGmV7B7imDVVApy7rEX+MQW5FX",
	"7zhutHobGKzuHi4NGii8HBJgxjia52W4LmzCRSH4Jc52U8IoznaXmGalIMhIf27rsEm9eM0tMGUyAnat",
	"Z1EtxmwQ+Uilki1KF9Kn6O20A7YVuHkFNcS1Nu0BPuReaaoK5C0CiQP/zRgk9any8I4t0M+MXzGUBA0F",
	"QfsAN5LO0QvCqP6/Bs8rTDNYk8e9YbqyX8Xs+oOmpUtcZpqCXV9HNPUQRYKtRRHDj9u98epMU6IwzSTw",
	"E84IwvoaKocDSSkEiCNKn7STYzWiO00/YgjCUp0KzCTMdEq77MK6HVI0J2YmvzTl+5LUCEl6XRY3FUeY",
	"cbUmYhFigZaGduqm8FAukZqGtFfxU5ljhgTBKSCZbYeouShayHPQwee8VHbFfnmL2GT8HEhA+iNhxLDt",
	"+O4XTrBZrHxLQ2jq0LjCEqihZmIpKgszbcjnv/8uyucFwTI2+TfngpLlt8h8r+QIN+MTOWifAzVFN6rT",
	"DN1IA7uBFbOJ/9ZwalcwjyGc3351+r1XpaKZzpp9Kko9zCucSTLaft0Y147V+NUN3fg5ND3X4RCszlEi",
	"Y8N2/zRUCVZtSdI+GD+pYTy1P9z9PcJCQtOTDUvgH+8uichwUVC2coZUDeVftOSpIaFVD/swUpDE/fym",
	"zBQtMvLuipGg/TB4vWSCZ1lOmLI8LNhUJ58b0sZDpLOFB9UxKbikiotNFE4aPJ0fWsAMP3rAvsoIUR3Q",
	"hW8Oli/IJU1IAGjzQwhu80sL6KckLzSLtGqUPQODSUu6cs9iTi0aZqr/kapI9+t5f6+fvaR8QhJB1KjO",
	"hyyjjNxg1p+UKmLdAAalVDy/ffv2vEliT4wkax6WgMLmpr1mKQmswusIctHWZ/RizQG3ybf5vW4KL9Yb",
	"SROcoRQ+LiYj1mTunszdcrcim8MlFtvnBobsmIBhRmu9sLc9SOKaaENA7fCkiMpnutOmwyGjzM+1jrp0",
	"WoDGsqs1Tdag5UBPp2Vvn0YqLFREyXrrZ3FtkJONvdAZHz0QYoedWdybo3l41jRiABOs3M8y6ADrfgLt",
	"g9TXaOtB6kZagDdEV6sYjjSA6C03UpE8hM7tSOP9rhxNeG2FiuGzXYAQhKVEkLST8TiuYxE6dYzNdAu8",
	"KrYZTOrz9K5X8oy0l7o6Pjp4aalp1HYktdjH2eGLyNfGcmpjhT271/UT5xfSySENxr1URByTc85BEmzj",
	"le5aORFAcyRce0QYoJsVOXBiTRmaS+k7ZrXOK6rWCHRqi3nyjHEBpiyqBRR0uiaS+O48SUphpwoObo2l",
	"nRkMI1nGr/QS9FUvuFQ75htSWF7IxRkb+ppjQGRAoHfrqHnTnAfr8SLzMECVtvndw8kgs7PjJ2vMVkSi",
	"Nb4k6JwQ1jRDWTluLJRg+6QPSudkyQUZjlCmfYBRcK5wqHcBLDtdgFW0Qqo7QBoz32CsscvzaHMvwIij",
	"jmbU94M015106xB2SFUnL5SGxwxbR2M0y5/aXMn+/mHosk6qRXwipzZGQM+lqZvndphz3+Jvxp97xgo9",
	"XbGUdaNR5Rr6nsmyKLgY7tQandlPEf3q541+rRbT8TlYod953D+k+lZ3BjG/y0ltfmjfj+AgRhCwya3j",
	"sbl1zMdR/k5af2N/EDPuu5O4UE3z6GsQl0oQguCrVbUFen/8ersKYgbsXUiXthhfSkM1endiVhXlLvDl",
	"BV11uj+k8K05FvqGLFYLJNf4+V+/38NPF4vFtwM3Wp+ze9sN+aut3CQd77N61U4WUviCMCcLafpmBGqr",
	"IhvZ0IhDzrqwQC9xsrYD6Ose+lhrEHCRGtVlA/0M+U4HUx29of3EPNxu8YmJqJLO0LPFgz/pft91wLUv",
	"DB2YlRTlUCk5HMhIGvNZSuXFp/TPSc6H3v/YCM0n76Kc+UHt6obCpjtO5Z9Y2LiZA0EVTXB244iV2MRh",
	"QEz7azV57GuwoNhnt8jYt/ABMbCAtq9fYA3q5slhq8FXpBlqFrknSUdEjZvXfEeFfcUZPnf00ag1/Vpr",
	"dsPQszLPXM9nfGAny3uMhdQKRG0ZUq/GWkiNrGHfiepK3/C9N56nYhs3hDNto0OOVbI+wkpLlHU/wBx/",
	"fE3YSq1ne8//+v18VphGs73Zf/6Kd37f3/lfT3f+vnd2tvO/F2dnZ2d//vDnf40xqm1qZbei2eXRFH4N",
	"X8TiSlvl3YSdroxsXy3CKYFpZqzSiSpxVvm84J53tSFXyJoyQnOuWctIQbf9jBCzg7VtvKNHb9i4h3tT",
	"+TMwfBYYMrY2DQ3HqEtRCN6hN9w5TvXRle1brhmwtSjldMsb6ep6hAxLdUIIsP5hzkkjCIqfpUZSxvLX",
	"0eJ5CxkMCTm05pMBA1Ttr+czq+OMMU6lHc9xAVbWVlW/BbP4pQjBGB69RyE4m2q9FdSCY+6WQe7hmcjS",
	"FecZd3tGqFt4G+qNFH4H3h3xQOHKNj2fHfErIkj6brm8oTxWW0Uwa+tbsJDI17q0VfsULjfyubaDyPeI",
	"rFa7XFF+51tYW4bxlaap3C1LmoKNqGT0t5JkG0RTregvN6GFuM3GAgNBXBvbD1poKg8GN+f3XA3bwjoN",
	"HPNq1giT5VyhwxdjhtILBrO72X98ne9cI3TiFMSBEzQVsBAkfh/tVXTfgIZd/YbaLwcFGF2tCfNxCcbT",
	"f0kzguxynIPyZ60Cz2ecvaLZ8CBn3fidA0BsIQVW6zh89RcNXCdvwxuOfVqhrPHmoiENbzRUmo4JZsia",
	"9jgiFN51sDuaxJ6MgPh5pqiGLxXg6bcZgHhbNf86T7z1Zw3LVQzbu02uUlv3zbhKe4iAq7wvTvkLEwb1",
	"rlTvlvbfgRvlTVhIbcpgisjXcNZo54Y/Z/1rixOE4ntDb0RWFKn7Tkh3u5cZIQoJokrBSGqIx5KoZA2P",
	"lkhStsoIApfTXp2mQrGuWLEBfuhBYMO8tY9zQfBFyq9Y707ON+gsXNfZLFCgWqgim5LXI1i8XVP/whVX",
	"OIvTK/gUOG7FZhoYF2Au9qOCjhWx+6DTDAEAUM0jyNo8/8aGo7SFyouH9gpOqbwwoW7tG9nNxjxfiTK0",
	"+pj9bAfm+BD3RKZSlDDrfpbxKxzNexJpVM9+Qi5JBtq+/kxSvTjbwdAnwbNM8yEKCFIIvhJERt5kV4KX",
	"xT823daWDJ+TDF2QDUhPBREakRF0c/5IgI3V/NiteFwAYY4/vmf4EtMMAvuiB2TT2gQ31wEd+Z7+Yrik",
	"XgYScYfInLL9LVPij40pS9aeyx/D1jmjZrmyL7TJrcDHLbvJvNunkUsVR4lNNbVAZwwQ2nWxL+HnocSL",
	"wdeda3HkkiC7QHTGltyOf75B2ESUlYyqBTpxrgHVjyAn752xHfREPoEFSROADT/l5qecslIR89Pa/LTm",
	"pTA/pOaHFG8kuNqE1tBnO3//cHaW/vlXma/TD1EraBXqUuWUaiaTcy12rIPQNvmqGvPEdriez1aiSHZy",
	"zPAKUjjtkG4HxwYtiCygZ7gYRW3F87QRpdWkJ7uPDVcFaRu69ZpkJ5+NKdThqwt1aF2ncVEP7e63m8mn",
	"I8DPiLst/cOE9bVwzn1xAbpEatEBtO8gdhsckZ1TLbQPuNo55xnBzD6UwNd91T3TPsgjenBgIFjZMIlw",
	"uissazMNM/u7HjFJpvrmZm8EfuivIqqPg/DzKXlIzQA1w6L9SXF4wdo03E23iur+PAfhRdxzL9qs7sTX",
	"ajKxhod254seySDLXlt+mHz8vtDUTXHGtZ0C6GbmnIOG5jm51faJRAqLFbGPzm3KkEjRnjKRwkwQSxgU",
	"JpqUJqDcJw+JAThtODIMD0G8BaK+3yTlLs2EFe/RFdUydUXdqXRmYNDNNTZXSgEApYq976f+GrLDjr3D",
	"x6Oj4Th3j0HMoRJIRpEmL8lcz/uT3YQo08KrdvqbxeisNu1cLeQTaHCPl8W4fDRt7bQt85VqrYlV4q0K",
	"o9Td/VJBsttAcS1pn8I7n91Us/YKdiTlcrCDaoLOVQ0CFeys7dsJjGYnQJYdR7zbGGPaXpBNV5vmaXYM",
	"3h5q0A46zzycQEOPC6o23fswibUGLL97WD9IdOHwxt/2iuvKHQTtXcqgreZVn4Tmej6rP1vGzf2bAm6w",
	"f941JFurGj6GmlszOs2AVLhXsANIUwaOFDm/9A9gxLtWDHz9qq3SD1r71c9Q+9VP12hr5rb7jz+Ja9mG",
	"sA439iLDlCFFPir0zfvTVzt/+xZx0cztZ0dw1M8BJ0ZHdbuXultH5N+VS4ukjElKaGkPZlmgN6UEWc6+",
	"/Z7NYHFnM72is5lZ09lsgV6YBxKQ832j8LTgp9ncdmkfDdjxeFnEQaK390Qa2/Y8MJS6J2nNZFwgAytz",
	"ImiCDl80lyU4V2ZVbbGQp6R76v//f/+fRAUROYUYZ8iZuUD/wUsQl81yjNdFroXbJc5pRrFAPFE4MzGR",
	"GGUE6xNAvxPBTUzCHD39/rvv4HSxPGNawEtobnto7h7v9N3zp99qgV2VNN2VRK30/xRNLjbo3Np9kY8V",
	"W6DDJdICuQfa/IzplTa2A/ZHeP9HaQA0vUATaNm20He/1uBzybNSVd4HDkXdXXZeqW+5IubG+8R68HSh",
	"m4Kodk4QvyTiSlClSPxlvpRE9GINv4IckreONbGHJX/hoqQXHqLba31lX7EDq7AVY9MpYG8y/k7G38oR",
	"St+UcQZf0+V2jbwwZtyA5z/VjXbw83SPH9xSV53DMMc7INiTSe4LNcnB8R4bj4DO8EJjbPAlhIZ4DVRk",
	"Kk4fekx64Cy01YxnvRiOeEaTrcENx7XGn1JiSNmkizHt8T5SmzW9KOP0uelB5RbdiQFdFrng4zgrnPFS",
	"GxpzBa3niICAirNsg2jl91a1MEl09EWGZGaJS9FduSp4KyckcL9aW52wpXqOM6x5l7tPD1lKW+6eY2Lm",
	"5w7tB1Ht+rUeacmDnMY0OSYF9w5yUYv0EmeSNEE8JPGvG9qFEZeiwyHym4JDJlbNcnOuyLfg6W/ytw6q",
	"kaZHtm2iW43mPG1nDqPqWO+mdfF5ydSR1wStm+Rsd9Y0zR9ZVdCGu1JmUTzGEZxmGUnC57a+vQJjAKaK",
	"1XJUSqI1P7iyG5Yg8+WMRQM5gQgfk0sq4y7+rQxtfnmtzvMuz8P5wIqSjTjhreduswDag4vNGwQ31FLk",
	"Nit4kMSm9B8cLPHS94kS7mDID+0Cm0Hg7rDZTIRKGucRdrB4dczYinuLnjYkdIZ4YYiCl/R/fvkfP/yy",
	"//r9S1PKVKOcVuaxRCRS+VR6V8EKJuOcM0XZYVrVYpuW1uvl9+aIsiQrwaiE2QZhsSpzYGul1L9JhVmK",
	"RYrkmmSZviIKf7QhIaY6iDUtSZTbnMxuJokKWkCWrhX4qsz1punSBN9cERHUACxZCpEk51iu0U5ijI8f",
	"4w+KV1xcvKBim18wZYHLSgVMb0YSJTOiM10iCtpZRpYKkbxQG/0DtPONXEUMidY8HxXWos9jKKqNc74O",
	"EH5QgugYboOfc2OgFr4rmhPLZief1xE+r9e9xx5SqU858/pZ6W2PppTvdaeWnKB/jDvGxwfYu1llZEuR",
	"4cAQD29thQxBtJ+7v9a/XSuvQIwqHDIXHieqNg0Mv6QZmSNZJmsgwB+xRsiFFZPBNO6dzqgE2bqqdeO/",
	"uBXgUnGUUpnwS8jb6gkFmKs1d+8L5+yMgPTRdA4wweYDv37eDIuEWxCyCvfU8pLZ+jsvqLT/gprK8H9e",
	"mKT99odjknEMwcCY5JzZP4c9nFlc8NPZv4NZLca7yd2fsAb7V7UU/4NdkRuutrAIA/zM+IMVywKsiHIL",
	"n91/pO6R4EUiVKxcryTff+ce9pDgXJlysRHhW8orLtKueFLz1firl2ptnrd+Oj09MiGUmiaHzqF+uFhQ",
	"5QUtjJXrFyJ8xFB74pMLWlj1x9Wdugw7xLxeVSYHQeL09Qk4oyBrLRq0cD34BdkMH1w3Hjo2vyBdr+X6",
	"061Avrsm2KnFbCB9W6Yawv/iZSpavGOtVBFVMDVxPeoPbw7ewNHVmti8uoLIgjMJlF0qLqqYcHjmNFHz",
	"tYi9RVwLvGelU5bLJf3YnuoIC//c//74ta3VxnMigxTV51jC1wU6VBC9baR9gn4rCQTPCZwTBQ8Bhinu",
	"nbFdDcRdxXedQfnfofEP0Di2xj6t1x/XvSu6DoO6yOkNjTnrGiUeVpFlaPWnwUYguHlw6BwlOMsQFyjJ",
	"ODO1v2NYBOUzTbhoBz7p4QyuafRMEWeZKbbpumoNEeoAVTXj3EEv0HtgfjldrRVgt8NKoyOCMA88xi76",
	"nJhJzjfueO0bDtJHofVOWInPPgDcdk2ywlAeePfyO3KIoo/Gv4IsxhjC5uGxxhDmMMerMFGUI16DE1se",
	"kyURUBrfAs9XoLBZKSOVIVCBk4shTlbdaTg7ywlFsidAkpgxKSi6Uszd6bW264xttrfw0g21k62rnM8k",
	"TLbdGjo8HQiI1AVOBuTLtFCpesyDSbe+hdje1Q5iYK0/+0RyMuS4sDVL5+aB01q6wI9HELT/9gVkZtGi",
	"8y4rs8yGKrt3J4kgBZ/Wt9aUrdpvFPD55cdCmJoSW5HzTbM9BC2rZP16vEP5gFx9/iEy+sysv9h3vXMi",
	"kXsZM+CRG6bWRNGkKouF8lKax53QNpdRqUx6/UssKC+lf2CCZcgF2g+SKeKNeR0CGq7ZAl+iP6q3tjly",
	"C7uOPggpysqYH7f9AuOfE7Bj0qBaLNg1UUZzo8irWsUdoCo+NYct4RuU+Q0c84mAUDbwnQNQ+ShuqBdg",
	"X9GpRLzAv5XE+yA4pqK4qa3qCmb6iDVLeoOHcmweyUC91yoeNa0EUYKSS8PGGPmonANWFU/u4X5goGIy",
	"jCScSSrBExPG0suyb+323YY4kNmd1jPu6H2bdDwpgjwJILxihjBakitnqzKHW0ByeQMSd/TOQcSw3Xoi",
	"FGPQhX36kzSgdDqvyZmVmIBjVUHaicnClHgGMXqOSpZpYWDDS7MeQRJCPSitbqKVY8wQCZ2GO+op5Zgy",
	"ylaHiuQHmoS1EbDdxscJejyT5bnUx62/AcrZ1cNxVLWe9KFYWdjqAe743Qa9Ocj+alDIse3U0jDwkgQz",
	"uCNmc92pif1+5W5REpUm7w1grwGvHsYdBRgbSgZXiqWI51SpKmuBJILijP5uCkjVFgqna+ys6Bvr2XhO",
	"EqyFMmPHgCfjdcku9Ei8+gogsPCEhEjQ6NtqP4JY0Bm8bO7JbMS/C9xoJ87HhWcmTRdm6PLZ4tlfUcqN",
	"1ypRwRwG9ylThOlj1JvwelcMU/5MpKI5iLJ/NneQ/m4f3ROe6fODRRyA74w3Kep5BQFC2jW2kWiBRgj/",
	"wIKTYZlpYiylwcHakoW1NnRYFw2fdgbAQ62zveUK/v/SVat+wYl8yxX8HfW/Nu5bYwrjN6QLY+TwK/rQ",
	"3pccLG82AWIyghyars/aMugbyJh9+8lt9CYCp5UWiaq+aYSrM3utqBWaQEM19yjDNwTKEiZIVuIYjTUv",
	"QltTkT3iPcgYV5Vt+YZBc1VjU395E0bMRfM3uYrvpzQnUuG8GJ4FNiUZuWHXVU+h6X1kmEDiiXDN6S7I",
	"WRcUofbGHwl5aoyvFTpqVrs3pqIFOiY43dES1sD8U58czfjGyNnWlxAS/RiBUN9Ta//BLBSDuFhhpmkc",
	"VLPHiqy40H9+IxNemF8N3/rWyzOzwXaaUE2ybWPPHVeMRLWGwN8RK8SvoMw+uK2a37X0i87Af29XT3U2",
	"QwbIXeUYQwGo420exEULP5jWZgml1pfWyGRPZODmWhWkqLxnh5k6jzTJCtLAVFXyh1ubeEcATBAf5Z+E",
	"wvAanKaQ57fIjE4oTMTShx7nmub5/M+Td2/REQdIdL9mAfLF12iER8URTkGYtatZtPgEvP90esM0KfsR",
	"EQlhKmplqb45QcYetsGcOhEoqsamVe0e/+c3z54+/T/wyPvvvz7d+fuHb/9HNK3Rsa3C2Mz8P5jNBB1f",
	"WseS9rNud/GMJryG1rbutGhdx11j3D7HFFYYmLo/DsDeFOexuDZX4nJQ+nNofM/lEFplQTup2OdbMuEm",
	"xQ/GFjWtmckjltbqq09iY8NK61brgF6uqLJG4CiNPO558jkOn3iCkK0fqQqff0xaXDDck6pK6hT9MUVx",
	"ffVRXNUNGhfKFfS73XiuauB4UFf9ez2yy3+jU5zmw8d3icZpDOSMntpPoV5faKhXg+bsDRWbm5EgW71u",
	"Q0+DbY1P5Lpqu2XVHTFKzRbjApXCF/2B0UpBl0+PLaoPdr/Zepw8vJ8RoY7LmON/o75DU2NelzlmO77U",
	"QCOWD8Cnx46nyepMLOxSDtcSMvJLIgL/RXxJhNZjIec1vIy5ZCmufqSeWKu46BWgwF7btTp0rG64S8+b",
	"ztLzuqv0ou4ZfXaW/tuvMl/H8wAXPfr7qUlE4dRyvrQ7Ms+Dgq5WRMgoJI2VzzzHX5Ihpaxq531iO8Wr",
	"M7gRg2Oq7aNuqNuKXLXJAjt9tCojFMQZ5oDbOUk1cGeTYMbONmYpwW6c6qjPkWoA5JS5x4ccF4VNMHNw",
	"9L7z9h69j5nZTWr6Ts26I229s/p3viF0vglce8q1eQuWlplVrp0n1jDm0LGbbWS/b11bbAwdkLiOnFKH",
	"ycZRuz6TAzRCooRqMO+cT4H5tYCHf4MkIAAZKjLaDFGR3VjG+eA0ojmycF5klK0OtfR6Gasl4anoOVFX",
	"hDBvPYGuel/3QBhrISMdESO15FnBtufhUUV23Ed1TjYsiYkK1ddmDvLAWQ3cR6wrgkkIBOHEgWlDcePF",
	"Co4TVrIFDcaXqJuUoMnMMZk5gvs21tAR9LxtU0c1tDN2TLf1YU0Wtu+GJaO5KFD6yWjxxRotGhSkdVmL",
	"rZEx2Ffpq8XCNf35D6E8sWthcwRWPao7qjBlxs80xvuNuz7jZ0yW56471TcQ6jTCUhpjGRcMNwIkAwUJ",
	"5IxZrzN7PR5HdE47JUQk6NA6lAjbqg3vcTE1wzNJRBhHrxh4M5tRRa8+zQKEb0b7elPMOEPIAc9z2hHC",
	"bpwdoQFaY7mucs7qdZA0fvJu5B973JD86IGXUWzwIT6CY0xZJteNfaon1rExqqY31F6pBFZktRmu80Ii",
	"rBPrbAVWy0b2Djfi1lAG37JnS1WGqwYSh5+dpcxVVivMr838RU3bHuSqMUl8T6uMB73qd1mVYE3bwB6Q",
	"hKt5RHqgeNW5LWaAVheIHIRwrdO1IHLNs60ZVALPmqhD0wkX6p1InTuXy+2zL5NWdh9b8s+5VXGhTOXd",
	"0EfJ9HtBZBJ9cz+R6xtFPBeCXmJFfiabIyxlsRZYku7YZfPd6PRyfeT7PoaQ5fqCtsUW232jk5OfhocX",
	"R485eIUYB3oZHtmWh447iozUu294Xrg4yZ74yL7IwGpTMbrUxVUtJ6XGnKJKwaxwDQWXceaKUaScPXEV",
	"a5GJVgk8MQemZB/y9FCxbCO/OwfCDm9KLONvHDlO1pSRzqmu1pvGBLawpV7D2ewVplkpSFXw1MQuUFkF",
	"9ZgMCybcAKIV6jJIFQq0j45hmSjJsDDExnnY2M3qi4HOSw1lYuIe+CURgqYEUbWlrHP0OJ23qwceegfB",
	"VXvobHZiqK3Lhe53eufqitbtdzBLd6Qr/Drgkp/aLIidqn2jQd1AGHrFIpdQcfJ2mAx9k6EPy93G1Rln",
	"62t2vl1zX2P0uHtTpFHdx6nRYPJzenCjYexEBinPTT4w2Q6/UNthjCi1k+vEC1Kc+qr1V2suief47n4u",
	"wSuDb0+5YcYfsryqSv+gIIowK/R8Cz27iZHL79hSqVvwdarKiH66lcviuqnoOiR6bow96cO1bq5hpEfP",
	"aEKY0ahNUMpsv8DJmqDni6czq5jN3M26urpaYPi84GK1a/vK3deHBy/fnrzceb54ulirHErIKaoyPdy7",
	"gjBkzhO9qXJZ7x8dzuazS8dUZiUzzCO1Ua8MF3S2N/vL4unimTWJAkz1Jd29fLaLS7XerQJIVjE8/5Eo",
	"k96qFlIRZmc7TPWGS+VUQgjZgHBxmOz506eNck5BSMzuf1mdyhzptgMPZoEDaMSZ/qz3/d2zv0X4awkm",
	"d+V3oWEEQ9RgYfPnkE5o/GIbGJCYNGQxULh2AHWXTwpuLNXDrAk2iVMcurQKxnlwNJH0Qxy8jdsNiQZg",
	"NwCSp8+62lBWtRoMuPnsr7d4qKbYWuQ8D608YhihbxYcWlDfzdbddIzP7CQjsdqL5vdagLsmQAfVYCdm",
	"MBeo2DzhFzBAZ3t5l1fAC79d6G/O+m5P5j2z1fR+h3s0nym8ko2Ce/UDAR+56JUCAboXlnXgazGgt3nj",
	"wnWno/YNtRxskr+55zQobeUlLWOcDBOtWH4FI+gBIATdZOxRzUZPXGaRJzYLhLX8FIJcQtaaeooNyOc0",
	"25vBgioS4VPQ9BGHeSzm2+TgsJ5IStBEVZkx4G3dJkRxQfUmpJsKWyC2XuuLXBKx8SmJYgvNaqmR7m+1",
	"AFs5r3JvP/nhyRw9+UH/V2syT/7lhycLKA+HLsjm2Q9wRs/mF2Tz/F/MH8+/7doTjH2zPYX5oMPcJwbF",
	"/HbCjCxVtpXTKicOpA4xqT66UarWHdFlHZ+hdpwZtJHsBhza14S10k1XVwQc3IJEMgChThygOQQPVnAK",
	"X/P+8jz6mvdH73uJ2afi5uHkHKa2yYpne17cX/iMaO1F6Y7/2Iw7vd43Gz+7ebXpmtM8D82H0nffo5PX",
	"3wpt7yShYP/oYS/3wPj/gVMU1Hp/zCyt4DKalMlkRgqAjCyUW/zMlFPtEz7saP/g6ebuj9/AplKElCjJ",
	"9UPgYTcOPr9FfBg1vTmq1Kzh+cOsYT9JSOEX8bfbuxjN2uDRyTNBcLqBgE5hFzFRhJAiDFJOdv/Q7OF6",
	"kI4SISHohnrJNtk4dAPrnxZYnS3majmdZbx1wnEDRfahiMoDoJSe9Lu7n/QtV694yT5ZUdNXv1FfIRms",
	"Mh8TnN4YMSvTYJWcSEQwtTXqp+PpfFYy+ltJbFY14IYT6j5i1C1cEcr6SAUWyhQONHbhBiIPt/1ABqtb",
	"IbHd+7hFAjtUctwBuP3buHOrZfO6toLjJCeGcuJXIh3dOz3QE/797ic84GyZUZfkehgBKqO8E/K83Zjq",
	"HJv+ty3a3QHDHEl3Jo11okQTJboLSjRGE93FRSG4DxLvUknZ5sYE7AVhm8+Aek3i/td6qTptueZq3Jx1",
	"75v+nw/rfkyYPrGsz/h2GVeF6o49GrcRW2P/Bj4itt5+h+W1+vqVun/YcvX9vh5dMHxNpaq+TV4ckxfH",
	"4/Hi2EdLmlkci+7IkhRXD6GGOqarrZ5QSr3wscdher6CgWorH55kenJMuS3HlE9CcKj9MPb4TcGIkRhr",
	"o2bRMsMrqP9ly5xCYgoNsjzHYlN3vZYL9E8NbjhPjkBerFeKheOu5bgA2moHC7zGbVY0wApY/xNzgWuU",
	"5UlYbhUL4u69q8/1xA6sh3oCMeyi7CSuQdsYrHwU8eRqdL+uRoapT35FVvL+y72I+i7pYJd8Fld2TRUl",
	"hK2Q1uGs5D/ehZ3XDj7IqPvsTmadTKgPoh7G8LSttI3xnelA4lBZG2N98T0eu6mlG5m/SoeBbVppxLGl",
	"A3OOCU6H4Y0xI6MJfb4o9OlwLgE/CCe4eRxK4zgEjccTn/TWseeLcQ3Zjq+TGfkLMiN3XM3hbhedxB0a",
	"Pwa54GGl6vu7mZMEP5GCe1MZdoN6iFE50J6ZLVnPM7BGMpuFsE0toLErm/jFi4O+PuTklvDI0dyVi+zE",
	"85U11i/LLPNFn02mjyUXw6TYH4mKVD/dcgve3pU8O+9MMnvB+BVDzQqacQsqtD1uNX2YWxeBbg8b/a59",
	"ym85cguZbufjuZ1VxrNuW4SsZVYcYZU4cdkOJ5vWV2SU6NN8RqNSoAM9Bmz6WjShSTG5vysTEGfio55N",
	"fqPgdaEzG5ZpCaKS6U7Zyj2fty5UFVbts2NtDXV0N8p6nqbo4OT4M6DQra1OyH5fyI7a2N7E7C68/4SE",
	"WdWBdzlEtpIKfMW+kS2Qb3GTrGCHenNhRWE8eU9O3pNTDqwpB9bkmDYq583kozaEZ/XnvKr6mDTBvZ5k",
	"7axDd6P0dWQ3uj//skHplWr5pabUTl+Pv1vsnvVK62O84NqC5FBpfYzpJzrL56OyTlG3N9ZWIu5zFVyj",
	"xurRiGaEH7YiohDUMJY6zk0o96Wi3Ai/ngGEztq3b4nSfRZ5U24o+jwIxj+kxDUZJb/UV9mbSle1rCj9",
	"8TK2YfudLUYsovkhvmqStO8A/dCkqb6Q6e3iXsnE8+f3sctC8IRIic8z8pIpqjYPnJjiFujUp/iUbCdQ",
	"UYl9vG/AJKx/5cL6p2BgXGp/ZEj4dcvu0wUIiTVU9bvJo/or0zFuofMfv9I3dFsrsffdvAOAr6lU/tP0",
	"PD49j0/P41MmnnvJxOPy7oBrnz9elzCKMkRwsja1ZDsmxan175YHvGRqSm7ziHwIgKdMfgNdfHpLmplX",
	"FutjvgHu210I1mbse/YBCCadrNAPbRR2KNqS2Xf/gP9f77r61ra+8k2E+WaJ7C65vlmqfpuIqvkzcCIn",
	"QLYmWsQV22Vwpx7evPK4lY3G+W9RO7YftWYSj/ig55MeNOlBkx40uQlPIn5jngbRnoT9bXxyuEw1xo+x",
	"yfqGyVKfzGHvjsGGDxMDZ31Ur2NNSE9PAyMFx4jn5FYkPyY4/XxQ/O2E4l8Jikdo/nDSHjcDBW9eY954",
	"X4WW1EeMW53moCmf0n3UTtvylhihzXEs1QR5EI5GcoDdJqp2vjt0pfp3mtCwl4cTM0b/28N0Xe6LAAcW",
	"9jE5aZdRFIa2o+ns8rbp7BeTkHYrqk4upF+mp3lwK4eHrXSxFWj78NLPgz6+3dudnN75JhpwWxJllyr0",
	"SX7aW4TP8a6wk5r0mct9N/G13s5rHgEifR0c5ytF3IA4ClJwSRUX9Ea1WI/D7nHbUaPJV+rI4OG82eLD",
	"IPog+ppK1YDn5EY9uQ9M7gOT+8DkPtCfyd2R38lzoJcxbfEVDlrHHYaPwwZ3IUYGE9yz63Bz5smu8NCm",
	"vhrudgi1Y55Ae7C7IctuxihntWEfu6rfj+Vfpdo0RHaPPFX2YNMxwemESxMujXs47EEo+7L2eDDqi3lH",
	"HIbD00PCl/aQ0Lyow98Se+k+dPgcL+rdSej3e1cnjWAiELdPIGrKh+SlSIjcsORmJnXT/2TDkk41pGry",
	"VdvUK0hvtaoHTeNW9RrUJ6v6ZFWfrOqfv1X9dF139q2ItsaOJc30stzezjvXUhO9bmxQn4z6ty3uVTR7",
	"Mutv4Y1bDfs9DNKZ9mss8m5Uh2CKezfvN+eexPmHN/DXsLhLyh5n4+9B9LZ4PU5Brw39+K2z/Qj/ldpn",
	"h+gUUWt/D14Ze/+EVRNWOW48zu7fg1rWFv64cOsLsv4Pw+bJvPflmfeaV3bMC0AvL7BvAJ/nlb1LYf6+",
	"7+2kPkzk4m7Ihf5kjG7mPpcim+3NdmfXH67/OwAA///MduVu2pQBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
