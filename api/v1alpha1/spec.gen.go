// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Zsn1h+v/DwAA//8aXxh4xuwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
