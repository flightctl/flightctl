// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
