// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
