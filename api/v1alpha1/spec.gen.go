// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
