// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
