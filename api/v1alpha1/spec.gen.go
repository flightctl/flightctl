// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/yK5IMLNCgEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
