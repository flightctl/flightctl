// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HnMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
