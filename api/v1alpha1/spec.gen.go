// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8QJKrF9w4BAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
