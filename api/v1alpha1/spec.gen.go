// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"F8nkaHI4uf18+/8DAAD//5L+WsPDcQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
