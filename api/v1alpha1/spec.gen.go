// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQAA//9IS3yGdhgBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
