// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"pzj3hdYsuvpw9b8AAAD//6gquAjgbwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
