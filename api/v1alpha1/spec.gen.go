// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a2/cOLLoXyF6F5jdPe12kp1d7Bo4uPA4mRnfycOwkzm4d517QEvV3TxWkxqSstM7",
	"8H+/YJGUKInqltrPxPoy47T4KBaLxXrz90kiVrngwLWaHPw+UckSVhT/PMzzjCVUM8HPNNUF/phLkYPU",
	"DPBfnK7A/D8FlUiWm6aTg8nPxYpyIoGm9CIDYhoRMSd6CYRWY84m04le5zA5mCgtGV9MbqYT02ndHvHj",
	"EggvVhcgzUCJ4JoyDlKR6yVLloRKwOnWhPGe0yhNpV1xfab35Sy+DREXCuQVpGQu5IbRGdewAGmGVyW6",
	"/ihhPjmY/GG/wvK+Q/F+C78fzUA3CN5vBZOQTg7+ZVHsERNAXs7yuYRAXPwPJNoAEB/64PcJ8GJlRj2R",
	"kFPExnRyZga0f54WnNu/3kgp5GQ6+cQvubjmk+nkSKzyDDSkwYwOo9PJlz0z8t4VlQZeZaZowRDO2foY",
	"ANH6VkHV+uTBbH2o4G59ChZSR5U6K1YrKtdd1M74XGyldtNIrnA8koKmLGN8gWSTUaWJWisNq5CEiJaU",
	"K9ZJq4OJqb6MKFH1I53IQAEJ/Qw000tDk69hIWkKaYRsBpNKfc5qjs4mweSdbSJUUm9QgmsQUOjlkeBz",
	"tmjvtflm2M+cLcxe1cmDFnrpkRTphniI7K/p9un0bUcv86XVqbGb5cTVYLGdPTr5dApKFDKBd4IzLeRZ",
	"DglCnmUf5pODf20msVjnG4OxI4ODuUEsnLGFOaqn8FsBSrfX1NmUSMglKDMhoUS6Hw3HpUSxBYeUJFVf",
	"MpdihYfq6LC9Dzn7FaTCCVs4PTl230gKc8ZB4ShX9jdIiV2sva6YqqCyR1XMCeXEonRGzsy1IBVRS1Fk",
	"qaGLK5BmJYlYcPbvcjRFtHAcQJtVmZtCcpqRK5oVMCWUp2RF10SCGZcUPBgBm6gZeSek5S0HZKl1rg72",
	"9xdMzy7/oWZMmN1aFZzp9b65GyW7KLSQaj+FK8j2FVvsUZksmYZEFxL2ac72EFiOJ2G2Sv8g3d6qGIVe",
	"Mp62UfkL4ylhZrdsSwtqhTHP9k7fnH0kfnyLVYvAYMsrXBo8MD4HaVuW+ww8zQXjGv+RZAy4Jqq4WDGt",
	"PLUYNM/IEeVcaHIBpMhTqiGdkWNOjugKsiOq4N4xabCn9gzKorhcgaYp1XQbP/+AKHoHmuId4A7qph6d",
	"R8se1L4XSfcwtnuL+VSnzVFKsEgHeZQbdc3zlg1iHKa5JcPM/CXmpJsdjZzinjkF07CKCNVvt+2MuUzL",
	"vjtRp5ndgUOlpOuRbz0O3zJbbbnWMD5hd38Qo/DSS317/0vSPAdJqBQFTwklhQK5l0gwOCVHZ6dTshIp",
	"ZJASwcllcQGSgwZFmEBc0pzNAklDza5ezjaD0OQq8CVn0uobkAiDzxaQrjukJC1kyTCuaMZSptelohnA",
	"MZlOrF5hNc2/vooqnvBFS9wimqaoUdDspK7C+EPW2uDm4akD/MYMTKi2lAXK6/MGuUQvqSYewyiUGSzn",
	"Ii8y/Olijb8enhwT1KSlwTy2Nws3PI2tVoU26tMkQgCyS5j8uARyQRX8/fs94IlIISUnb95Vf/9ydPaH",
	"ly8MNDPyjupk6Xi4uZNmpYjJIEsJ44SGxLBJTrUcIdyQi7WOivYouMr3USPJMU8tgSFIsiQI28eyeuRS",
	"vxU0Y3MGKXGmgNY0BYuwuU/Hr+9/kwIYFF1AhNI/4e+IcrMIZLuAl8ElrIntFaze2W+YUkVd4q/dEFuJ",
	"16w4bpt6Hxij7h8vDR4oSzkkoIxhPK+U4bqoiea5FFc020+BM5rtzynLCgnESn9+6bhIA7yzpakI2o2e",
	"xYwYsybwhSm0OdU5XcifoqfTDdhW4KYV1ojgCVQI73OuDFdF9hbBxFH5zRpZzK6K8IzNyC9G1ydJ0FAC",
	"OUS8QTolr4Ez83+Dnh8pyxCmkvb66colFJObz4aXzmmRGQ520yLWBokES4sSRjlu98KrPbX2J4X3ieBA",
	"qDmG2tNAUkiJ4og2O+3lWEPoXtNv2zgyqvTH0l71ka06Nh5tXZqtwM5UglbZuiC1QpKBy9GmFoRyoZcg",
	"ZyEVGGloz4wVl0uU4SFbzXKuHWH2oBghz2OHXohCO4g3m+K8Jfgn4GCv7fjqZ16wmS3KlpbR1LFxTRVy",
	"Q3OJpaTI7bThPf/376P3vASqYpP/6UIymP+Z2O+VHOFn/E71WmdPTdGP6jVDP1LPblHLpLOSOQimMYIr",
	"l1/t/sajUvFMb7r8KAszzI80UzDYWNkY143V+NUP3fg5tDPW8RBA5zmRNVj6Py1XQqgdSzpMElCK2Yun",
	"9g9/fk+oVNj0bM0T/OPDFciM5jnjizPIIDFKwmQ6+dVIngYTRvVwXoEcEv/zuyLTLM/gwzWHoH0/fL3h",
	"UmTZCrh2d1iwqM57rk+bEiOdLUpUnUIuFNNCrqN4Mujp/NBCZvixROyPGYDuwC5+87h8DVcsgQDR9ocQ",
	"3faXFtI/wio3V6RTo9weGEoqlBaru7ftTpvs5cxKcc5vYbjLyrY37DRBKEr5WM3asrwB1i6uzbrs73Uz",
	"cL5cK5bQjKT4cTYacEZT72jqVfsVy+h/W7s+OxhxY5erHa3mT+twmnoMdFkkBnnI24aJdzQ3RzXiVrVo",
	"ifKh6URZ79/OXtUWBr25243bjTPrWuzClgSegoS0k6t5luZk+NRzTdst8E1u00Tr82yEV4kM2qAuTk+O",
	"3rijGlXKlblPBT9+HfnaAKc2VtizG66fhbhU/pJr3ApzDfIULoTAK7atGpiuBL5AUhgNH5sT6dsT4Kgx",
	"uPuMJk5HNCzQSOBOnL9meklQWXHEp865kGgjYOb2Ix+XoKDsLpKkkG6qYOOWVLmZUePMMnFtQDBXay6U",
	"3rPfiKbqUs3OeV8zuUWRRYFZrWcVTTsJwlPKIv0QVbjm948nS8zeQJosKV+AIkt6BeQCgDf1eyckDMUS",
	"Lh82YekC5kJCf4Ky7QOKwn3FTb0PZLnpAqpiFVHdA9HY+XpTjQOvJJsHQUacdKiEByKam06+dYwrZLoz",
	"yqjn1RQdzd1R7XifrddSx0C3j4Gy1pUy/on5ee7GBrEJ+KGRT1vHCuPnqFJ1bbwKOPvEVZHnQvYPlYvO",
	"XE4R/VrOG/1aAdPxOYCwXHnc8V59q3vZ7e9q1Mke26kebMQABjb6y5+av3w6jPN38vqdHe123A9ncaGa",
	"raJmdqG0BCD41UV6S/Lp9O12FcQOuBGQrjjcOCgN1ejDmYXq9pA0RKK2vpF0+KI+LivxRNNL4F48MSzH",
	"yrhOcbXimpVQvJdhRt7QZOkGMCewFKmcl1TI1GoTa+xnOWramxGYBR0m1km1xf8f0e68e3VLaGrS7cvy",
	"yHXW1I7NTvKir+AaDmQv/+kkZeryNv1XsBJ9j2RshKZ7Ly8m5aAOur646Q7A/i8qXYD8kWSaJTTbORQ7",
	"NnEY6d3+Wk0e+xoAFPvsgYx9C50lgcWrTSEdwdr+grTf64bp6k5lpsuKcaqFDMZe26gNN7inBsGhhzH9",
	"J6atledEiiuWQmVO39TrlzL65AwSCXpQ52OeMQ47zPqz1nmsW4womyyiysNpb8qK6mR5QrURteqRR7n9",
	"cXIw+X//onv//mz+82Lvn3v/Pfv8lz/GrtLtmtXSaJz9zmhlNjLb2bOTuxNt4pAT1NqyrYHPJQ5ZGcg5",
	"R+rKaH9BreGTie2AvT3SIehf0S9vgS/0cnLw6m9/nza343Dv/77Y++fB+fnef8/Oz8/P/7LjpnQrwF0h",
	"LOHX0A0UVyarcBbqdXji+hrRUkvKMpusleiCZlWQA93gTKqMvf3oImL/7h+dUi7R3uV46VNnyjBgRkM0",
	"Quj7BcxWgSjRA+w45/a11uzWRivxKuVOKroZIaNKnwGgeNEv2GPAeS1nqZ3YoXf4YKm84STwJ/TYWU16",
	"DFC1v5lOnGozxCaVdjgoAqqsQTWt032IsHCTS2LBXaggq/ATbGi3RPMAGXbOBupjiu7OynSrtLquIQJ5",
	"7gPe4fF8usr4PJ2ciGuQkH6Yz3eU7mpQBLO2vgWARL7WZbfapxDcyOfaCiLfI5Jf7RhFL46yhTNW2ChT",
	"lqr9omApGoEKzn4rIFsTlhpNfr4OTcDt+yCwAMR1u8OgheHnaFHzEaPVsC2qM8ixbrH6mD8Iocnx6yFD",
	"GYDRrm7XH4fzg29Ezry62XOCpjoXoqRcRxuK7hPQMJzvqEsLVKfJ9RJ4GdFtY6TnLAPiwPGhnV+1Qm2U",
	"jh+ZdcD2gsI0/uAREAMkp0b4i+HXfDHI9YIrOmmc74TxhlPFYBqdMEzZjgnlxNnuBAGGjhvqtyZxOyMJ",
	"5cQcPoNfJjFGat2D8LbaEeq33537LdytYq+9u7xVanDvdqu0hwhulU/5R/HaJpB8KPSHufs7CEDb5Qqp",
	"TRlMEfkazhrt3IiEq39t3QSha6qhgBEnitSDI5Q/3fMMQBMJupAcUss85qCTJXoliWJ8kQHBYL32ZaCa",
	"gktXPEs7WLcJ5YUEepmKa74Rzos1Ofeznk+cOBONZdFC0yx+oPFTUDkjNlO8hIUl9AderhMqNy23GS6M",
	"a582tqcBfvTkMHX52BGTKVOXNgWmTW/dTLrkmlF2XR9zM1PFOT5HozRbQbttWFpNNqTwu5wUvBiw20Y1",
	"fPQfjjGdzy6ms3WchoV3trvfbbp+RxS/vXhadjQbu9+iOf/FZ+GAMrcwCopBghYGxfkAL2wfsLILITKg",
	"KNf6r4e6e6ZDjFowg2MyEtWuYlQ43TVVtZn62aJ8jx/W3bP/sPazN2pgma8yKjpm9AKyPjdu1aU+tx2g",
	"pgO7n7TA4Kd1I/Rp6x1b7mcvuohHkUSb1QNKWk3Gq+GxQ0uiW9JLCW3LD2O8yTdanyF+cW3nAKaZ3eeg",
	"ofVxtNp+p4imcgHOE9LmDImS7SkTJe0EsaoAYTUpZbPGygzhGILThvOqf67FHTD1wyYr97mkLhiWXDMj",
	"U1fcnSlvsUA111AzlEhFpFQJdpu5v8Fsv23v8Ot1NBzm4ut1OVQCySDWVEoyN9PNGe0hybToqp3jPhuc",
	"ut5OyIZb8OANrr9hSefW0N/2MXelXmN7n3G9VQstc3hvppO67TJu0ljniJvSxmsPgxHiykKdwlkWWIab",
	"4E1hR1jlAb0pK3FVWsGg9K/0NIHVoCwHrf1azlD7tZyu0dbOfeMyRdvr/tFZrgL12vGDdIzCHbXoUYuu",
	"nB/mpAzTnG2Xu9WWccy4JlR+qms/+PN4jh9d5an2oZ+zDRn2qNt8o7pNxU7i53iDDoNuja16i3JlIrYu",
	"zcj9vqYE0psrBhETyx4i7bzpo4xzwqa3xgPdjesOJSL4OExxsC6uvqGB2HpKAJ3WNMvWhFVOs6qFzUE1",
	"RwZDYBNfOmxFOV0AqlheMcPCctdLJ4m2ApeH6QKlv+72oX9py5l6i5STLfoDlktiiYsg9KdpUOB1LOLb",
	"e7p3TE0IBnFdNsB+Crko/YNRHX5OMwVNQPvUQ/JD+6UWssOZ+6dcYIEac7euhIY/YxiPLWvTq064Gdm1",
	"iS41Grbe2yHa3uWbaatmANOnZoTfO7ydkYca/Ao7HoUI7OoBNqqrU5BCAaGu8OOaJ8R+wYTfdlQzMutT",
	"uGIqHqbTKqNQgtfqPO3yrzZrH1icxP2wQUjRwe9B+kGz4igkrgRh7xClN2WfKEMPhvzc3scg7rzfbDYu",
	"LI3fHW6wz9GkgxjEbQICfvUrlbGofE5Ebk9rKWv/8ub//Oevh28/vSE5ZRIFWqNOU0WAXzEpOHLwKyqZ",
	"mUyVZdQqnAyrRimLDluGEZyMvKyFkb18NNqUMJ5kRYphKXxNqFwUK7zuCmV+U5rylMqUqCVkmSFqTb+4",
	"QCxbzdRl9yqycjWk/EyK5CzH5PcFut2mZtFsbkPerkFWQJCCpxi/dUHVkuwleNPBl7ht9FrIy9dMbotX",
	"YDzwvlXItMbLCyCy4FZ4ZXPCUD/KYK4JrHK9Nj9gu7KRr+CpyFKsBgWTmf3oS2rDeGBA8L2Sb2K03Tj3",
	"8TBJzVYgio6auCv6ha2KVVVbGEsuhA/Y2AhILQxd4FsoM3LOcbN8F6cGXoSxlRRrchmGx66AuJAfcs7n",
	"wo1/sSbUOlqNOjAjZz7LvPoRIzIPzvke+U59hwApWyQZf1rZn1aMFxrsT0v701IU0v6Q2h9SulbnjsuW",
	"CSwv9/75+fw8/cu/1GqZfv5jlBI2bHvIpW6z5/W9MssezCk/mU6tC9z8uO2iCAfo+WBT8yZ1HBk3jIjw",
	"1FbEEMTY+vObgzTiuFEfkRlVNGQPPE10bRocfs4ymBJVJEtkwF+oIciZE59n5Hhe+c+ZQpm7qs1bfvEQ",
	"0EILYiRLcYXlkEpGgcGn5j7eFETdGXdcxrB6xASL18Kv25udKxzhKQivCm+JfsNdveDXTLm/8AEk/L/I",
	"bZFB98MpZIJiCD6FleDun/0s1Y4Wyuncv4NZHcX7yf0/EQb3rwqU8gcHkR+uBljkAvzK7gdXZzugiuht",
	"UWZODlQKEjpLZIR1/4ClzIl3KEkhtH3epkWvOVXqWsi0K4rbfrWhd4Ve2ko6P3/8eGIDlw1PDuNcyuFi",
	"ocyXLLd2pl9BlpGM7YnPLlnu9BJfJ/sq7BAL4NGZ6oWJj2/P0K9GnL2mF+Bm8EtY9x/cNO47triELveU",
	"+XQnmO+uYf7RUTayvi1T9bn/4inAd6r4LbXOo5qfYcwnmxMSvPHDsPDrJbhSVxJULrjCW0FpIassDkxM",
	"sHkutYjjWVzne2AVUxXzOfvSnuqEyrIy96fTt64uvViBCqrGXVCFX2fkWGO+hdUUgPxWAAYES7oCjWZ8",
	"e6EenPN9g8R9Lfa9Ofh/YeP/xMYxGDfpuOV2bVVr/Y53iCv4dSebyrLGd/vltvetTd3bFoPnDLdJkIRm",
	"GRGSJJng9mWyIZaYabig2D3Tmdp/pweU2TTAzq3QsoBtW+7GiO/4xvIGd7oUheNHuc1KFFyfdBmbOjOw",
	"UJ7KadLDquhkh6rHNJh066GpQI8jse4GiGTArGw51EtYT61ryVk4DDPBVw7ev8Y8OCMy7fMiy2xEEfF+",
	"CEWwcoCRs5eMRx45xM9vh8czbV53OGrsDJSenajfznxxDpgLUMQ7QOyq1ZrrJWiWVAVAyKpQ1oYfmloy",
	"prQtQnhFJROFKv0ICIaakcOgtANdWyeA4Nka3zAQc/J75VKZEg/YTdTurxkvYhFG7guOb3Rv0M48Yx8r",
	"QTMVydjK6mW69iwuahllfpN7QSZ4ZSYIGQOJQdYrIQGFKkKvKMvQskUMe7O0wxQROf2tgNKpe4FwoMEK",
	"n/bw7zWUsdTONxx4Hqn1haC2ZiR2ZltJ0JLBlb3LOXzRPqKlhKTC+5HFik3TSgRXTGng2o5lwHLOS2cf",
	"B48yt9J62qJZt81pTAmm46A8QTmhZA7X3vRgNzfHEnwWJX7rvcfdWtrq2WTWPofrLHfSotKrMDbxOLGp",
	"MLrCtJdcpH1hCCWbKSl4BkqRtSgsPBISYCUqnahpdB3KCYRBVx2PHq8o44wvjjWsjgxTahNgu00ZwV7S",
	"mSoulNlu8w1JzkGP21E9yGw2xYknTjTz2+8XWGr37ldLQr6qTOpYk5Dequl51NR0alJ/CbkHSpHCJg8i",
	"9Vr0mmH8VqDuWHA8UjwlYsW0e5ALjawgGc3Yv+0rzzVAcXet2Yz8yeW5XkBCjRRo1VL0DC4LfmlGEtVX",
	"RIHDJ2aVYqM/V+uR4FBn6bK5JruQ0sy700p80IDIbK4z5eTq5ezl30gqEG4zSjWHpX3GNXCzjWYRpSgc",
	"o5S/gNJshQmdf7FnkP3b+VYTkZn9QyCOMBihtBCZeSUgI+0a25rIkUfI0l5OE93rwZSY1vMOa3Ddz4O4",
	"gWu9dcKqbwZf9bvKCJK54S/4Flb0vrLny50rhT0cn3TGDmxr37OKRBNxLnRl6doxGrlqbF+vWYehyNEU",
	"Vf9e1ke2AqXpKu9f8yWFDHbsutjwTM8hsTwsKXlILQgnyFsPnvAp1UllBBcX00FOmm+FWeVzRk6BpntG",
	"QOj5qs+tw8R9MXwbW3QJay/PZIWXAIzSGNziQi4oN0cU3wKjGhZCmn/+SSUit79atvvn8jqO7W/cThFq",
	"zq5tzPh6zSEqywbxT1QTcY2PlGEYm/3dCG/kHON59s1U5xNikdz15H94f3d4ClHacfjDaV2lEOafDkTu",
	"+Z0Kwt6qqpNVNF0/w8uJkXqD/NrqjbH+2rDI4wpqEB5dGqjDWGiapljrJ8+skiJtwPLnqLUxZp45JP/7",
	"7MN7ciIQE922dSS+OIxW9tGC0BRlMQfNrKUeoDW6w5vetjafurcN+tUMjEXo+wcPelXFwsY7V8N74tXu",
	"Wq9RdJ6rr7ci3i617Ya+pVEzLEWeg62+lvmqLs+hbnYMTvCCaWc8ip7a0w1mzdPQjBkkFfzEdGjitMVa",
	"0NQF1eMcY3zymGfw7PMMqhM0LNkg6He3GQfVwPG0g/r3eu5B+Y2NmUSPn4EgG7vR82Ysuf2YjPCNJiM0",
	"eE4tHrSHz6R0t/UpCd278ZlaVm23QN0R299sMSzAv5JXekf5B11uH5NfH+xhE3O9PHyYgdSnRSwwtlF1",
	"sKnDLYsV5XtlAbxGFguiz4wdz4gvuowrr72xPay9Iq5ABvE99AokXYCtVYWuBp+9699IMBMzvpiRH5EE",
	"DryhJgw3bAQRTpshhNN6AOG0Fj44q0cPnp+n/9EZODid5CATc3MtOrTZ6rtBnV2WdbpItliAVFF02jXZ",
	"5/KuoE895dqmn7lO8cKBfsRgr2rrqNuPtlJYbbIgmi36/ADWau0XpdY5STVwZ5Ngxs42FpRgNV5/jKWh",
	"rOz7vebPo5NPnUf45FPM+mvrynWq1x0157wxuqtft6m6yozxaTNOwx72YEHHarbx/k1wbTE0dGDiJrJL",
	"HXViPcvbZHfARkQWWKj0g/fU2l9zdKdaIkEpyDKVwbaIivdGBK9wN6JPZNJVnjG+ODYi7FWsimPJSi9A",
	"XwPw0oSCXc267o07kneFQjmsHfQ92yHuuubvD/AyDfcygpJNbOlszZOYQFF9bRYlnINEo78W1mvvPMAY",
	"M2aT9QIDiBY2ngv91U7+RT2nLKQ+qkqjMWQ0hoQP4g80hwQ979ogUg3tTSLjaX1cw4bru+bJ4GsWOf1o",
	"2vhmTRsNDtKZIdwdI07LCvO1jJKGjk6O8REd32J6znUtB6U6o5oybsP7Yne/Dbfn4pyr4sJ3Z+YE4hsD",
	"CEpjLBs64EfAGlYogZxzF+zj3yd7EnHq7VToSOqOC4SQrlUb38Oiy/tmUDcIptOu1Gwz1LJU8avb2Yno",
	"brxvYwEHby45EqsV60gEtTFm2IAsqVpWpdIMHJDGd96P/NOG8Jly9CA6JjZ4n9CsAQavM7XcKeUql+yK",
	"avgF1idUqXwpqYLu5Cn73WpOanlS9n0KOVN1gLYlN7l1k7Ozn/vnN93EEb9juoYKt2yLJfmekjXM6huu",
	"bZ+6sWPKRrWoKJV2MCTHhJjVRHUhuZNL8J0VmvnCnqng3/mHKtwD+EHwVc8ijH1suxW3s6KPjxnqCKCi",
	"Km5EXtFkyTh0TnW9XDcmMDhwd8U5PqFeSKhefbDRtkxVYeg2xdMGyGJ8bZ19V8Hrh+QUwSRJRqUN2/Ih",
	"DG6x5mCQi8JgGWykrrgCKVkKhOktr7lEt9MHuJXIIx8wHeCAnE/OiiQBpc4nRiwJVnrvkp5Ri/YoT/eU",
	"fxGjxyH/6MozvQ5torW85XiJmC3JPRtSmDqTD/sZjqMAlzBOOlZUA7arUQhyV5sgv+xzgL5OpbLRoG6a",
	"CuMIiS+UNXrjRxPTaGKiar9xdIZZmZqd79bQ1Bg9Hn4TaVSPwWk0GONwHt1cFduRXmpb8x4YrVbfqNUq",
	"xpTaBQ7iJb0/li+fXS+FgvLG9+dzjgEDYnuxEjt+H/Cqt9x6ZTeF1T6nW/jZLuaVcsWOS91BLM5dvo3t",
	"aN0+LtQn32iIJePzzQ0+oW3fpMxYAtwaJGwizeQwp8kSyKvZi4nTayf+ZF1fX88ofp4Judh3fdX+2+Oj",
	"N+/P3uy9mr2YLfUKXzPQTGdmuA85cGL3k7yrapQenhxPppMrf6lMCu5ePHU1kTjN2eRg8tfZi9lLZ4xD",
	"nJpDun/1cp8WerlfZVIsYnT+E2hbnqQW8h9W1zlOzYILvSyFbZ8fipO9evHC50yDzVgN3qve/x+nktot",
	"3bbhwSy4AY3MvF/Mur9/+Y/I/VqgsVeXqzA4wiFquLiiGUtdUd4oNn51DSxKbBmZGCp8O8S6r+mBJ5aZ",
	"YZZAU5C+bKntYvOKHXIrdDSJ9HMcvY3TjZnFuBpEyYuXXW0Yr1rthrjgwQz3DIu/fOxoGcSe4rC/17JK",
	"DRM4qgY7s4P59Komll/jAJ3t1X2SYSmAdpGgxfedzGXf7ohM9YkbGsRsv9SaA+gClerODUElN0rWKMRu",
	"xGUd+eYq3ti8QfTdJT3LhkYWtUVwvDOlyHQg7Vj7aljdwN0ZOIIZABNnbfUL3Wz0nU/n/86lXjvjVS7h",
	"CktF1PPa8eX8ycEEAaqOaVn3YdMBncYyVW3iu4tD0ZIlukpHR8+qq0LgU4FtIiqT7r2gGXkNc4oI0YLA",
	"Fch1Wd4jBmhWKzMyCNqw/mSYnG+3owQ0LBlQlQP4WBVtwNx2m4vejf5ad8Lm9b2HL0xpO2ijGgMGCC+B",
	"t8pbVuSEoUBBpQPEUCe+2AqTsSo8hX6Pv76K+T0+3yOD6TxbqJxu4Dsv7p/v/EBTErwJ95R5XS5UtESG",
	"rVMRIJk4LLcYnX0caNOt5Eb7QaTr+99+i5tKStWygJvHoMNuGnx1h/QwaHq7VamF4dXjwHCYJJCXQPzj",
	"7g5G+zXGyOSZBJquMRtMOiBGjhByhF5S6/7v5lK46SW8RlgI2VFg3SY0hdEhm6fFCw4DL8r7zRU1qzOO",
	"HbSMx2Iqj0BSZtLv73/S90L/KAp+awneHP1G8eKkty51CjTdmTAru01Va0NGKLU16u3pdDopOPutgGNr",
	"LMLbcCTdJ0y6udHO2sSbU6ntaz3WaNcg5P5GASzIcicstnsdd8hg+0qOe4i3/xi2b7XiNDdOcBzlxFBO",
	"fCbS0YPzAzPhP+9/wiPB5xlzBV16MqAiendi2aKduc6p7X/Xot09XJgD+c6osY6caORE98GJhmii++HD",
	"6N0qKV/vzMBeA19/BdxrFPef66HqtOXao7H71X1o+389V/dI6d8gpVt/ckjvwf3gHnrdwZnuHn3tsERW",
	"X5+pn9widotTvAuHb5nS1bfR3f21ursPyZxlbj+isPrHo11p6BqabVdXSLpQ5BLWQ0G3PX/EgWqQ969u",
	"Onrwd/Tg3y3pYhnsodtva2c/1q1vGdgYU+Bu+r8+iGjhCxV13UVxQdc+CECou5A6AhXKj/dh43GD9zLo",
	"vLyXWUfzyeOIoxE6bQuoQ/zmHUQcCqZDNK+yx1NXs7qJ+Vk6C7dJ4BGndgflnAJN+9GNNSGRkXy+KfLp",
	"cCyjD9S//FHSUBqnIWw8nPmkd04934xbeDu9jl6Pb8lsFT+a/V2uncwdGz8FueBxpeqHO5mjBD+yggdT",
	"GfaDF5uicqDbM/d4qMjQmsStoTvCLbCxf9jpmxcHyxesRkfNEydz/85UJ50vnLF1XmRZ+X6hTcGeC9lP",
	"iv0JdOT9tC2n4P19ybPTzrpz9mXX5tNbcSsptj1tNX2cUxfB7oZr9Pv2Lr8XxAMyns6nczqrUjTdtghV",
	"qxg2wCpx5qt4jTatZ2SU2KT5DCalQAd6CtT0XDShUTF5uCMTMGcoMx5vUU2iSpvsCoJpJVY+43iYFsq3",
	"hMZUuCMbC0VEcTxGzIwFIsYCEXeXED4GcfRhZpsLQlR9bIGzjaEW7ZT8+5GKOlL/Hy4Ao1ftgVrxhbHu",
	"wfMJCImds41i3JAwkbaE0VeMG6IbRWd56lp3r5PxLBXwAWJsJL6kwmvUmjOY0GyYMF+AzCWzF0ud5kaS",
	"+1ZJboDjuwejcwagO+J0X0VS8Y6iz6NQ/GNKXKOJ6lt1W+wqXdVShjcHlLuGbUN0jFlEkyefNUs69Ih+",
	"bNZUB2S0ZD8om3j16iFWmUuRgFL0IoM3XDONZc7/9hC7euxehrBPEvhmd8CnbuN03c6gohL7cOfZKKw/",
	"c2H9NhQYl9qfGBE+b9l9PAAhs8b3SHbxtv5oO8YtdOXHZ+pcda+8bHSodiDwLVO6/DT6TUe/6ZiW/22n",
	"5eNhHx26XQx0S4I8Yq/Daeu/3YfEY8d+YOdsMOloHnxsa50n0ZYwtf87/v9m3z+Z5p7s2kXKar661iVw",
	"NV8/3CY7mMsA2Z6/2VsTzeIaxzw4U4+v9z5tKbCx/1vkwe1bbS6JJ7zR01FAHQXUMbBvCE+JPUY8SoEb",
	"GGj/y3ZI5FGTJ/a7ZG/Neu+P84amxJ6zPil7dutN5tGYN0yiiMQ6bSXyU6Dp10Pi70cSfyYkHuH5/Vl7",
	"3D4QWKmHeGV8h6dOW512grFEwEM8BbDF+h/hzXEqNQy5F41GylrcJam2eC/jSVakgIL3akXlul5NQHmx",
	"fx4C0RDFaeqSpdWZHSOmvlwIkQHl43F5QAYcmF6HlFmbR0kY2w7ms/O75rPfTI21raQ6Bn19m7Ghwans",
	"H2jeda1g28eXfh7VK/NgZ3J0AI084K4kyi5V6FaRlVuEz+HBa6Oa9JXLfbtER26/a54AIT2PG+eZEm7A",
	"HCXkQjEtJNvpKaXTsHvcdtRo8kw93CWe11uc23ITRt8ypRv4HAMfR7/y6Fe+RdVKfy5Hl/JGjrUlujBo",
	"HQ8xPA0b3Id8EUzwwMGGzZlHhfOxbUA12u2Qdob4xjZQd0PIWQ+R2mvDPnUdcDOVP0t5uo9QF/FhbaCm",
	"U6DpSEsjLQ3zKG0gKOdyeToU9c04mPrR8Ghh/tYszM2D2t/JtJHvY4ev8aDen4T+sGd11AhGBnH3DKKm",
	"fChRyATUmie72Vpt/7M1TzrVkKrJsza2Vpjeam4NmsbNrTWsj+bW0dw6mltvcTFWp2k0uG7hWltNrhtY",
	"lze61pjX/Qh1wRQPbnhtzj0KWo9veq1RcZf8M8z6uoHQ24LPMNWpNvTTt5ttJvhnajnrI+1F7bAb6Mpa",
	"YkeqGqnK38bDLLIbSMtZKZ8WbX1Ddtl+1DwaXr49w0vzyA6xzW68C5x19us8svcpzD/0uR3Vh5Fd3A+7",
	"MJ+sicee50Jmk4PJ/uTm883/DwAA///xWFDJTGoBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
