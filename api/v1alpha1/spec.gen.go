// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7E9uPt/8/wAAAP//Yiq60/RpAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
