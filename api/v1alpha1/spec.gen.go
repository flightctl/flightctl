// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
