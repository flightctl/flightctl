// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P7n5fPP/AwAA//+vbtjsQHMBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
