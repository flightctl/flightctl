// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
