// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
