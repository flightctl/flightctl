// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3jPChHc7wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
