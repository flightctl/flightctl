// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
