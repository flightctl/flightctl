// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
