// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
