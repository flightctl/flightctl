// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
