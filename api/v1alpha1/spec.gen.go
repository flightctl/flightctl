// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
