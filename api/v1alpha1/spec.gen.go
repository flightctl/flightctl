// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"3xhmlQEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
