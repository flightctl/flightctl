// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"GQuTOc+lyCavJ/uT6y/X/z8AAP//e8IIEcJ2AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
