// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bnT16er/AgAA//9PybnOyxwBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
