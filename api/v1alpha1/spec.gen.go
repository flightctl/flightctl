// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P7n5fPP/AwAA///mq8OasnYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
