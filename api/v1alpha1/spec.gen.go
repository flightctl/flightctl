// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
