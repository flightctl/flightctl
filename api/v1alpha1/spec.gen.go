// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hdYsunl/858AAAD//0OlUBDRbAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
