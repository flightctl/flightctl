// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
