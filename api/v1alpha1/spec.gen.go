// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"55v/HwAA//8F2qOF4XIBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
