// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
