// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"encoding/json"
	"errors"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ApplicationStatusType.
const (
	ApplicationStatusCompleted ApplicationStatusType = "Completed"
	ApplicationStatusError     ApplicationStatusType = "Error"
	ApplicationStatusPreparing ApplicationStatusType = "Preparing"
	ApplicationStatusRunning   ApplicationStatusType = "Running"
	ApplicationStatusStarting  ApplicationStatusType = "Starting"
	ApplicationStatusUnknown   ApplicationStatusType = "Unknown"
)

// Defines values for ApplicationsSummaryStatusType.
const (
	ApplicationsSummaryStatusDegraded ApplicationsSummaryStatusType = "Degraded"
	ApplicationsSummaryStatusError    ApplicationsSummaryStatusType = "Error"
	ApplicationsSummaryStatusHealthy  ApplicationsSummaryStatusType = "Healthy"
	ApplicationsSummaryStatusUnknown  ApplicationsSummaryStatusType = "Unknown"
)

// Defines values for ConditionStatus.
const (
	ConditionStatusFalse   ConditionStatus = "False"
	ConditionStatusTrue    ConditionStatus = "True"
	ConditionStatusUnknown ConditionStatus = "Unknown"
)

// Defines values for ConditionType.
const (
	DeviceMultipleOwners       ConditionType = "MultipleOwners"
	DeviceSpecValid            ConditionType = "SpecValid"
	DeviceUpdating             ConditionType = "Updating"
	EnrollmentRequestApproved  ConditionType = "Approved"
	FleetOverlappingSelectors  ConditionType = "OverlappingSelectors"
	FleetValid                 ConditionType = "Valid"
	RepositoryAccessible       ConditionType = "Accessible"
	ResourceSyncAccessible     ConditionType = "Accessible"
	ResourceSyncResourceParsed ConditionType = "ResourceParsed"
	ResourceSyncSynced         ConditionType = "Synced"
	TemplateVersionValid       ConditionType = "Valid"
)

// Defines values for DeviceIntegrityStatusSummaryType.
const (
	DeviceIntegrityStatusFailed      DeviceIntegrityStatusSummaryType = "Failed"
	DeviceIntegrityStatusPassed      DeviceIntegrityStatusSummaryType = "Passed"
	DeviceIntegrityStatusUnknown     DeviceIntegrityStatusSummaryType = "Unknown"
	DeviceIntegrityStatusUnsupported DeviceIntegrityStatusSummaryType = "Unsupported"
)

// Defines values for DeviceResourceStatusType.
const (
	DeviceResourceStatusCritical DeviceResourceStatusType = "Critical"
	DeviceResourceStatusError    DeviceResourceStatusType = "Error"
	DeviceResourceStatusHealthy  DeviceResourceStatusType = "Healthy"
	DeviceResourceStatusUnknown  DeviceResourceStatusType = "Unknown"
	DeviceResourceStatusWarning  DeviceResourceStatusType = "Warning"
)

// Defines values for DeviceSummaryStatusType.
const (
	DeviceSummaryStatusDegraded   DeviceSummaryStatusType = "Degraded"
	DeviceSummaryStatusError      DeviceSummaryStatusType = "Error"
	DeviceSummaryStatusOnline     DeviceSummaryStatusType = "Online"
	DeviceSummaryStatusPoweredOff DeviceSummaryStatusType = "PoweredOff"
	DeviceSummaryStatusRebooting  DeviceSummaryStatusType = "Rebooting"
	DeviceSummaryStatusUnknown    DeviceSummaryStatusType = "Unknown"
)

// Defines values for DeviceUpdatedStatusType.
const (
	DeviceUpdatedStatusOutOfDate DeviceUpdatedStatusType = "OutOfDate"
	DeviceUpdatedStatusUnknown   DeviceUpdatedStatusType = "Unknown"
	DeviceUpdatedStatusUpToDate  DeviceUpdatedStatusType = "UpToDate"
	DeviceUpdatedStatusUpdating  DeviceUpdatedStatusType = "Updating"
)

// Defines values for PatchRequestOp.
const (
	Add     PatchRequestOp = "add"
	Remove  PatchRequestOp = "remove"
	Replace PatchRequestOp = "replace"
)

// Defines values for RepoSpecType.
const (
	Git  RepoSpecType = "git"
	Http RepoSpecType = "http"
)

// Defines values for ResourceAlertSeverityType.
const (
	ResourceAlertSeverityTypeCritical ResourceAlertSeverityType = "Critical"
	ResourceAlertSeverityTypeInfo     ResourceAlertSeverityType = "Info"
	ResourceAlertSeverityTypeWarning  ResourceAlertSeverityType = "Warning"
)

// Defines values for TemplateDiscriminators.
const (
	TemplateDiscriminatorGitConfig     TemplateDiscriminators = "GitConfigProviderSpec"
	TemplateDiscriminatorHttpConfig    TemplateDiscriminators = "HttpConfigProviderSpec"
	TemplateDiscriminatorInlineConfig  TemplateDiscriminators = "InlineConfigProviderSpec"
	TemplateDiscriminatorKubernetesSec TemplateDiscriminators = "KubernetesSecretProviderSpec"
)

// ApplicationStatus defines model for ApplicationStatus.
type ApplicationStatus struct {
	// Name Human readable name of the application.
	Name string `json:"name"`

	// Ready The number of containers which are ready in the application.
	Ready string `json:"ready"`

	// Restarts Number of restarts observed for the application.
	Restarts int                   `json:"restarts"`
	Status   ApplicationStatusType `json:"status"`
}

// ApplicationStatusType defines model for ApplicationStatusType.
type ApplicationStatusType string

// ApplicationsSummaryStatus defines model for ApplicationsSummaryStatus.
type ApplicationsSummaryStatus struct {
	// Info Human readable information detailing the last system application transition.
	Info   *string                       `json:"info,omitempty"`
	Status ApplicationsSummaryStatusType `json:"status"`
}

// ApplicationsSummaryStatusType defines model for ApplicationsSummaryStatusType.
type ApplicationsSummaryStatusType string

// CPUResourceMonitorSpec defines model for CPUResourceMonitorSpec.
type CPUResourceMonitorSpec = ResourceMonitorSpec

// Condition Condition contains details for one aspect of the current state of this API Resource.
type Condition struct {
	// LastTransitionTime The last time the condition transitioned from one status to another.
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Human readable message indicating details about last transition.
	Message string `json:"message"`

	// ObservedGeneration The .metadata.generation that the condition was set based upon.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	// Reason (brief) reason for the condition's last transition.
	Reason string          `json:"reason"`
	Status ConditionStatus `json:"status"`
	Type   ConditionType   `json:"type"`
}

// ConditionStatus defines model for ConditionStatus.
type ConditionStatus string

// ConditionType defines model for ConditionType.
type ConditionType string

// CustomResourceMonitorSpec defines model for CustomResourceMonitorSpec.
type CustomResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// SamplingInterval Duration between monitor samples. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days. Must be a positive integer.
	SamplingInterval string `json:"samplingInterval"`
}

// Device Device represents a physical device.
type Device struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta  `json:"metadata"`
	Spec     *DeviceSpec `json:"spec,omitempty"`

	// Status DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
	Status *DeviceStatus `json:"status,omitempty"`
}

// DeviceApplicationsStatus defines model for DeviceApplicationsStatus.
type DeviceApplicationsStatus struct {
	// Data Map of system application statuses.
	Data    map[string]ApplicationStatus `json:"data"`
	Summary ApplicationsSummaryStatus    `json:"summary"`
}

// DeviceConfigStatus defines model for DeviceConfigStatus.
type DeviceConfigStatus struct {
	// RenderedVersion Version of the device rendered config.
	RenderedVersion string `json:"renderedVersion"`
}

// DeviceConsole defines model for DeviceConsole.
type DeviceConsole struct {
	GRPCEndpoint string `json:"gRPCEndpoint"`
	SessionID    string `json:"sessionID"`
}

// DeviceIntegrityStatus defines model for DeviceIntegrityStatus.
type DeviceIntegrityStatus struct {
	Summary DeviceIntegrityStatusSummary `json:"summary"`
}

// DeviceIntegrityStatusSummary defines model for DeviceIntegrityStatusSummary.
type DeviceIntegrityStatusSummary struct {
	// Info Human readable information about the last integrity transition.
	Info   *string                          `json:"info,omitempty"`
	Status DeviceIntegrityStatusSummaryType `json:"status"`
}

// DeviceIntegrityStatusSummaryType defines model for DeviceIntegrityStatusSummaryType.
type DeviceIntegrityStatusSummaryType string

// DeviceList DeviceList is a list of Devices.
type DeviceList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Devices.
	Items []Device `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// DeviceOSSpec defines model for DeviceOSSpec.
type DeviceOSSpec struct {
	// Image ostree image name or URL.
	Image string `json:"image"`
}

// DeviceOSStatus defines model for DeviceOSStatus.
type DeviceOSStatus struct {
	// Image Version of the OS image.
	Image string `json:"image"`
}

// DeviceResourceStatus defines model for DeviceResourceStatus.
type DeviceResourceStatus struct {
	Cpu    DeviceResourceStatusType `json:"cpu"`
	Disk   DeviceResourceStatusType `json:"disk"`
	Memory DeviceResourceStatusType `json:"memory"`
}

// DeviceResourceStatusType defines model for DeviceResourceStatusType.
type DeviceResourceStatusType string

// DeviceSpec defines model for DeviceSpec.
type DeviceSpec struct {
	// Config List of config resources.
	Config     *[]DeviceSpec_Config_Item `json:"config,omitempty"`
	Containers *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"containers,omitempty"`
	Os *DeviceOSSpec `json:"os,omitempty"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
}

// DeviceSpec_Config_Item defines model for DeviceSpec.config.Item.
type DeviceSpec_Config_Item struct {
	union json.RawMessage
}

// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
type DeviceStatus struct {
	Applications DeviceApplicationsStatus `json:"applications"`

	// Conditions Conditions represent the observations of a the current state of a device.
	Conditions []Condition           `json:"conditions"`
	Config     DeviceConfigStatus    `json:"config"`
	Integrity  DeviceIntegrityStatus `json:"integrity"`
	Os         DeviceOSStatus        `json:"os"`
	Resources  DeviceResourceStatus  `json:"resources"`
	Summary    DeviceSummaryStatus   `json:"summary"`

	// SystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
	SystemInfo DeviceSystemInfo    `json:"systemInfo"`
	Updated    DeviceUpdatedStatus `json:"updated"`
	UpdatedAt  time.Time           `json:"updatedAt"`
}

// DeviceSummaryStatus defines model for DeviceSummaryStatus.
type DeviceSummaryStatus struct {
	// Info Human readable information detailing the last device status transition.
	Info   *string                 `json:"info,omitempty"`
	Status DeviceSummaryStatusType `json:"status"`
}

// DeviceSummaryStatusType defines model for DeviceSummaryStatusType.
type DeviceSummaryStatusType string

// DeviceSystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
type DeviceSystemInfo struct {
	// Architecture The Architecture reported by the device.
	Architecture string `json:"architecture"`

	// BootID Boot ID reported by the device.
	BootID string `json:"bootID"`

	// OperatingSystem The Operating System reported by the device.
	OperatingSystem string `json:"operatingSystem"`
}

// DeviceUpdatedStatus defines model for DeviceUpdatedStatus.
type DeviceUpdatedStatus struct {
	// Info Human readable information about the last device update transition.
	Info   *string                 `json:"info,omitempty"`
	Status DeviceUpdatedStatusType `json:"status"`
}

// DeviceUpdatedStatusType defines model for DeviceUpdatedStatusType.
type DeviceUpdatedStatusType string

// DiskResourceMonitorSpec defines model for DiskResourceMonitorSpec.
type DiskResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// Path The directory path to monitor for disk usage.
	Path string `json:"path"`

	// SamplingInterval Duration between monitor samples. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days. Must be a positive integer.
	SamplingInterval string `json:"samplingInterval"`
}

// EnrollmentRequest EnrollmentRequest represents a request for approval to enroll a device.
type EnrollmentRequest struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
	Spec EnrollmentRequestSpec `json:"spec"`

	// Status EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
	Status *EnrollmentRequestStatus `json:"status,omitempty"`
}

// EnrollmentRequestApproval defines model for EnrollmentRequestApproval.
type EnrollmentRequestApproval struct {
	// Approved approved indicates whether the request has been approved.
	Approved bool `json:"approved"`

	// ApprovedAt approvedAt is the time at which the request was approved.
	ApprovedAt *time.Time `json:"approvedAt,omitempty"`

	// ApprovedBy approvedBy is the name of the approver.
	ApprovedBy *string `json:"approvedBy,omitempty"`

	// Labels labels is a set of labels to apply to the device.
	Labels *map[string]string `json:"labels,omitempty"`
}

// EnrollmentRequestList EnrollmentRequestList is a list of EnrollmentRequest.
type EnrollmentRequestList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of EnrollmentRequest.
	Items []EnrollmentRequest `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// EnrollmentRequestSpec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
type EnrollmentRequestSpec struct {
	// Csr csr is a PEM-encoded PKCS#10 certificate signing request.
	Csr string `json:"csr"`

	// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
	DeviceStatus *DeviceStatus `json:"deviceStatus,omitempty"`

	// Labels A set of labels that the service will apply to this device when its enrollment is approved
	Labels *map[string]string `json:"labels,omitempty"`
}

// EnrollmentRequestStatus EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
type EnrollmentRequestStatus struct {
	Approval *EnrollmentRequestApproval `json:"approval,omitempty"`

	// Certificate certificate is a PEM-encoded signed certificate.
	Certificate *string `json:"certificate,omitempty"`

	// Conditions Current state of the EnrollmentRequest.
	Conditions []Condition `json:"conditions"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// Fleet Fleet represents a set of devices.
type Fleet struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec FleetSpec is a description of a fleet's target state.
	Spec FleetSpec `json:"spec"`

	// Status FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
	Status *FleetStatus `json:"status,omitempty"`
}

// FleetList FleetList is a list of Fleets.
type FleetList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Fleets.
	Items []Fleet `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// FleetSpec FleetSpec is a description of a fleet's target state.
type FleetSpec struct {
	// Selector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
	Selector *LabelSelector `json:"selector,omitempty"`
	Template struct {
		// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		Metadata *ObjectMeta `json:"metadata,omitempty"`
		Spec     DeviceSpec  `json:"spec"`
	} `json:"template"`
}

// FleetStatus FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
type FleetStatus struct {
	// Conditions Current state of the fleet.
	Conditions []Condition `json:"conditions"`
}

// GenericConfigSpec defines model for GenericConfigSpec.
type GenericConfigSpec struct {
	ConfigType string `json:"configType"`
	Name       string `json:"name"`
}

// GenericRepoSpec defines model for GenericRepoSpec.
type GenericRepoSpec struct {
	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The (possibly remote) repository URL
	Url string `json:"url"`
}

// GitConfigProviderSpec defines model for GitConfigProviderSpec.
type GitConfigProviderSpec struct {
	ConfigType string `json:"configType"`
	GitRef     struct {
		Path string `json:"path"`

		// Repository The name of the repository resource to use as the sync source
		Repository     string `json:"repository"`
		TargetRevision string `json:"targetRevision"`
	} `json:"gitRef"`
	Name string `json:"name"`
}

// HttpConfig defines model for HttpConfig.
type HttpConfig struct {
	// CaCrt Base64 encoded root CA
	CaCrt *string `json:"ca.crt,omitempty"`

	// Password The password for auth with HTTP transport
	Password *string `json:"password,omitempty"`

	// SkipServerVerification Skip remote server verification
	SkipServerVerification *bool `json:"skipServerVerification,omitempty"`

	// TlsCrt Base64 encoded TLS cert data
	TlsCrt *string `json:"tls.crt,omitempty"`

	// TlsKey Base64 encoded TLS cert key
	TlsKey *string `json:"tls.key,omitempty"`

	// Token The token for auth with HTTP transport
	Token *string `json:"token,omitempty"`

	// Username The username for auth with HTTP transport
	Username *string `json:"username,omitempty"`
}

// HttpConfigProviderSpec defines model for HttpConfigProviderSpec.
type HttpConfigProviderSpec struct {
	ConfigType string `json:"configType"`
	HttpRef    struct {
		// FilePath The path of the file where the response is stored in the filesystem of the device.
		FilePath string `json:"filePath"`

		// Repository The name of the repository resource to use as the sync source
		Repository string `json:"repository"`

		// Suffix Part of the URL that comes after the base URL. It can include query parameters such as:
		// /path/to/endpoint?query=param
		Suffix *string `json:"suffix,omitempty"`
	} `json:"httpRef"`
	Name string `json:"name"`
}

// HttpRepoSpec defines model for HttpRepoSpec.
type HttpRepoSpec struct {
	HttpConfig HttpConfig `json:"httpConfig"`

	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The HTTP URL to call or clone from
	Url string `json:"url"`
}

// InlineConfigProviderSpec defines model for InlineConfigProviderSpec.
type InlineConfigProviderSpec struct {
	ConfigType string                 `json:"configType"`
	Inline     map[string]interface{} `json:"inline"`
	Name       string                 `json:"name"`
}

// KubernetesSecretProviderSpec defines model for KubernetesSecretProviderSpec.
type KubernetesSecretProviderSpec struct {
	ConfigType string `json:"configType"`
	Name       string `json:"name"`
	SecretRef  struct {
		MountPath string `json:"mountPath"`
		Name      string `json:"name"`
		Namespace string `json:"namespace"`
	} `json:"secretRef"`
}

// LabelSelector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
type LabelSelector struct {
	MatchLabels map[string]string `json:"matchLabels"`
}

// ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`
}

// MemoryResourceMonitorSpec defines model for MemoryResourceMonitorSpec.
type MemoryResourceMonitorSpec = ResourceMonitorSpec

// ObjectMeta ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Annotations Properties set by the service.
	Annotations       *map[string]string `json:"annotations,omitempty"`
	CreationTimestamp *time.Time         `json:"creationTimestamp,omitempty"`
	DeletionTimestamp *time.Time         `json:"deletionTimestamp,omitempty"`

	// Generation A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int64 `json:"generation,omitempty"`

	// Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects.
	Labels *map[string]string `json:"labels,omitempty"`

	// Name name of the object
	Name *string `json:"name,omitempty"`

	// Owner A resource that owns this resource, in "kind/name" format.
	Owner *string `json:"owner,omitempty"`

	// ResourceVersion An opaque string that identifies the server's internal version of an object.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []struct {
	// Op The operation to perform.
	Op PatchRequestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add or replace.
	Value *interface{} `json:"value,omitempty"`
}

// PatchRequestOp The operation to perform.
type PatchRequestOp string

// RenderedDeviceSpec defines model for RenderedDeviceSpec.
type RenderedDeviceSpec struct {
	Config     *string        `json:"config,omitempty"`
	Console    *DeviceConsole `json:"console,omitempty"`
	Containers *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"containers,omitempty"`
	Os              *DeviceOSSpec `json:"os,omitempty"`
	RenderedVersion string        `json:"renderedVersion"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
}

// RepoSpecType RepoSpecType is the type of the repository
type RepoSpecType string

// Repository Repository represents a Git repository or an HTTP endpoint
type Repository struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta     `json:"metadata"`
	Spec     RepositorySpec `json:"spec"`

	// Status RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
	Status *RepositoryStatus `json:"status,omitempty"`
}

// RepositoryList RepositoryList is a list of Repositories.
type RepositoryList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of repositories.
	Items []Repository `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// RepositorySpec defines model for RepositorySpec.
type RepositorySpec struct {
	union json.RawMessage
}

// RepositoryStatus RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
type RepositoryStatus struct {
	// Conditions Current state of the repository.
	Conditions []Condition `json:"conditions"`
}

// ResourceAlertRule defines model for ResourceAlertRule.
type ResourceAlertRule struct {
	// Description A human-readable description of the alert.
	Description string `json:"description"`

	// Duration Duration is the time over which the average usage is observed before alerting. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days.
	Duration string `json:"duration"`

	// Percentage The percentage of usage that triggers the alert.
	Percentage float32                   `json:"percentage"`
	Severity   ResourceAlertSeverityType `json:"severity"`
}

// ResourceAlertSeverityType defines model for ResourceAlertSeverityType.
type ResourceAlertSeverityType string

// ResourceMonitor defines model for ResourceMonitor.
type ResourceMonitor struct {
	union json.RawMessage
}

// ResourceMonitorSpec defines model for ResourceMonitorSpec.
type ResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// SamplingInterval Duration between monitor samples. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days. Must be a positive integer.
	SamplingInterval string `json:"samplingInterval"`
}

// ResourceSync ResourceSync represents a reference to one or more files in a repository to sync to resource definitions
type ResourceSync struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta       `json:"metadata"`
	Spec     ResourceSyncSpec `json:"spec"`

	// Status ResourceSyncStatus represents information about the status of a resourcesync
	Status *ResourceSyncStatus `json:"status,omitempty"`
}

// ResourceSyncList defines model for ResourceSyncList.
type ResourceSyncList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of resourcesync.
	Items []ResourceSync `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// ResourceSyncSpec defines model for ResourceSyncSpec.
type ResourceSyncSpec struct {
	// Path The path of a file or directory in the repository. If a directory,
	// the directory should contain only resource definitions with no
	// subdirectories. Each file should contain the definition of one or
	// more resources.
	Path string `json:"path"`

	// Repository The name of the repository resource to use as the sync source
	Repository string `json:"repository"`

	// TargetRevision The desired revision in the repository
	TargetRevision string `json:"targetRevision"`
}

// ResourceSyncStatus ResourceSyncStatus represents information about the status of a resourcesync
type ResourceSyncStatus struct {
	// Conditions Current state of a resourcesync.
	Conditions []Condition `json:"conditions"`

	// ObservedCommit The last commit hash that was synced
	ObservedCommit *string `json:"observedCommit,omitempty"`

	// ObservedGeneration The last generation that was synced
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// SshConfig defines model for SshConfig.
type SshConfig struct {
	// PrivateKeyPassphrase The passphrase for sshPrivateKey
	PrivateKeyPassphrase *string `json:"privateKeyPassphrase,omitempty"`

	// SkipServerVerification Skip remote server verification
	SkipServerVerification *bool `json:"skipServerVerification,omitempty"`

	// SshPrivateKey Base64 encoded private SSH key
	SshPrivateKey *string `json:"sshPrivateKey,omitempty"`
}

// SshRepoSpec defines model for SshRepoSpec.
type SshRepoSpec struct {
	SshConfig SshConfig `json:"sshConfig"`

	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The SSH Git repository URL to clone from
	Url string `json:"url"`
}

// Status Status is a return value for calls that don't return other objects.
type Status struct {
	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// TemplateDiscriminators defines model for TemplateDiscriminators.
type TemplateDiscriminators string

// TemplateVersion TemplateVersion represents a version of a template.
type TemplateVersion struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta             `json:"metadata"`
	Spec     TemplateVersionSpec    `json:"spec"`
	Status   *TemplateVersionStatus `json:"status,omitempty"`
}

// TemplateVersionList TemplateVersionList is a list of TemplateVersions.
type TemplateVersionList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of TemplateVersions.
	Items []TemplateVersion `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// TemplateVersionSpec defines model for TemplateVersionSpec.
type TemplateVersionSpec struct {
	// Fleet The fleet whose template this refers to.
	Fleet string `json:"fleet"`
}

// TemplateVersionStatus defines model for TemplateVersionStatus.
type TemplateVersionStatus struct {
	// Conditions Current state of the device.
	Conditions []Condition `json:"conditions"`

	// Config List of config resources.
	Config     *[]TemplateVersionStatus_Config_Item `json:"config,omitempty"`
	Containers *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"containers,omitempty"`
	Os *DeviceOSSpec `json:"os,omitempty"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// TemplateVersionStatus_Config_Item defines model for TemplateVersionStatus.config.Item.
type TemplateVersionStatus_Config_Item struct {
	union json.RawMessage
}

// ListDevicesParams defines parameters for ListDevices.
type ListDevicesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// StatusFilter A filter to restrict the list of devices by the value of the filtered status key. Defaults to everything.
	StatusFilter *[]string `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner A selector to restrict the list of returned objects by their owner. Defaults to everything.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// GetRenderedDeviceSpecParams defines parameters for GetRenderedDeviceSpec.
type GetRenderedDeviceSpecParams struct {
	// KnownRenderedVersion The last known renderedVersion
	KnownRenderedVersion *string `form:"knownRenderedVersion,omitempty" json:"knownRenderedVersion,omitempty"`
}

// ListEnrollmentRequestsParams defines parameters for ListEnrollmentRequests.
type ListEnrollmentRequestsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListFleetsParams defines parameters for ListFleets.
type ListFleetsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner A selector to restrict the list of returned objects by their owner. Defaults to everything.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// ListTemplateVersionsParams defines parameters for ListTemplateVersions.
type ListTemplateVersionsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListResourceSyncParams defines parameters for ListResourceSync.
type ListResourceSyncParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// TokenValidateParams defines parameters for TokenValidate.
type TokenValidateParams struct {
	Authentication *string `json:"Authentication,omitempty"`
}

// CreateDeviceJSONRequestBody defines body for CreateDevice for application/json ContentType.
type CreateDeviceJSONRequestBody = Device

// PatchDeviceApplicationJSONPatchPlusJSONRequestBody defines body for PatchDevice for application/json-patch+json ContentType.
type PatchDeviceApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceDeviceJSONRequestBody defines body for ReplaceDevice for application/json ContentType.
type ReplaceDeviceJSONRequestBody = Device

// ReplaceDeviceStatusJSONRequestBody defines body for ReplaceDeviceStatus for application/json ContentType.
type ReplaceDeviceStatusJSONRequestBody = Device

// CreateEnrollmentRequestJSONRequestBody defines body for CreateEnrollmentRequest for application/json ContentType.
type CreateEnrollmentRequestJSONRequestBody = EnrollmentRequest

// ReplaceEnrollmentRequestJSONRequestBody defines body for ReplaceEnrollmentRequest for application/json ContentType.
type ReplaceEnrollmentRequestJSONRequestBody = EnrollmentRequest

// CreateEnrollmentRequestApprovalJSONRequestBody defines body for CreateEnrollmentRequestApproval for application/json ContentType.
type CreateEnrollmentRequestApprovalJSONRequestBody = EnrollmentRequestApproval

// ReplaceEnrollmentRequestStatusJSONRequestBody defines body for ReplaceEnrollmentRequestStatus for application/json ContentType.
type ReplaceEnrollmentRequestStatusJSONRequestBody = EnrollmentRequest

// CreateFleetJSONRequestBody defines body for CreateFleet for application/json ContentType.
type CreateFleetJSONRequestBody = Fleet

// PatchFleetApplicationJSONPatchPlusJSONRequestBody defines body for PatchFleet for application/json-patch+json ContentType.
type PatchFleetApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceFleetJSONRequestBody defines body for ReplaceFleet for application/json ContentType.
type ReplaceFleetJSONRequestBody = Fleet

// ReplaceFleetStatusJSONRequestBody defines body for ReplaceFleetStatus for application/json ContentType.
type ReplaceFleetStatusJSONRequestBody = Fleet

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = Repository

// PatchRepositoryApplicationJSONPatchPlusJSONRequestBody defines body for PatchRepository for application/json-patch+json ContentType.
type PatchRepositoryApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceRepositoryJSONRequestBody defines body for ReplaceRepository for application/json ContentType.
type ReplaceRepositoryJSONRequestBody = Repository

// CreateResourceSyncJSONRequestBody defines body for CreateResourceSync for application/json ContentType.
type CreateResourceSyncJSONRequestBody = ResourceSync

// PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody defines body for PatchResourceSync for application/json-patch+json ContentType.
type PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceResourceSyncJSONRequestBody defines body for ReplaceResourceSync for application/json ContentType.
type ReplaceResourceSyncJSONRequestBody = ResourceSync

// AsGitConfigProviderSpec returns the union data inside the DeviceSpec_Config_Item as a GitConfigProviderSpec
func (t DeviceSpec_Config_Item) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided GitConfigProviderSpec
func (t *DeviceSpec_Config_Item) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided GitConfigProviderSpec
func (t *DeviceSpec_Config_Item) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the DeviceSpec_Config_Item as a KubernetesSecretProviderSpec
func (t DeviceSpec_Config_Item) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided KubernetesSecretProviderSpec
func (t *DeviceSpec_Config_Item) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided KubernetesSecretProviderSpec
func (t *DeviceSpec_Config_Item) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the DeviceSpec_Config_Item as a InlineConfigProviderSpec
func (t DeviceSpec_Config_Item) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided InlineConfigProviderSpec
func (t *DeviceSpec_Config_Item) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided InlineConfigProviderSpec
func (t *DeviceSpec_Config_Item) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpConfigProviderSpec returns the union data inside the DeviceSpec_Config_Item as a HttpConfigProviderSpec
func (t DeviceSpec_Config_Item) AsHttpConfigProviderSpec() (HttpConfigProviderSpec, error) {
	var body HttpConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpConfigProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided HttpConfigProviderSpec
func (t *DeviceSpec_Config_Item) FromHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	v.ConfigType = "HttpConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpConfigProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided HttpConfigProviderSpec
func (t *DeviceSpec_Config_Item) MergeHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	v.ConfigType = "HttpConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeviceSpec_Config_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DeviceSpec_Config_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "GitConfigProviderSpec":
		return t.AsGitConfigProviderSpec()
	case "HttpConfigProviderSpec":
		return t.AsHttpConfigProviderSpec()
	case "InlineConfigProviderSpec":
		return t.AsInlineConfigProviderSpec()
	case "KubernetesSecretProviderSpec":
		return t.AsKubernetesSecretProviderSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DeviceSpec_Config_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeviceSpec_Config_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGenericRepoSpec returns the union data inside the RepositorySpec as a GenericRepoSpec
func (t RepositorySpec) AsGenericRepoSpec() (GenericRepoSpec, error) {
	var body GenericRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericRepoSpec overwrites any union data inside the RepositorySpec as the provided GenericRepoSpec
func (t *RepositorySpec) FromGenericRepoSpec(v GenericRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided GenericRepoSpec
func (t *RepositorySpec) MergeGenericRepoSpec(v GenericRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpRepoSpec returns the union data inside the RepositorySpec as a HttpRepoSpec
func (t RepositorySpec) AsHttpRepoSpec() (HttpRepoSpec, error) {
	var body HttpRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpRepoSpec overwrites any union data inside the RepositorySpec as the provided HttpRepoSpec
func (t *RepositorySpec) FromHttpRepoSpec(v HttpRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided HttpRepoSpec
func (t *RepositorySpec) MergeHttpRepoSpec(v HttpRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSshRepoSpec returns the union data inside the RepositorySpec as a SshRepoSpec
func (t RepositorySpec) AsSshRepoSpec() (SshRepoSpec, error) {
	var body SshRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSshRepoSpec overwrites any union data inside the RepositorySpec as the provided SshRepoSpec
func (t *RepositorySpec) FromSshRepoSpec(v SshRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSshRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided SshRepoSpec
func (t *RepositorySpec) MergeSshRepoSpec(v SshRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositorySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositorySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCPUResourceMonitorSpec returns the union data inside the ResourceMonitor as a CPUResourceMonitorSpec
func (t ResourceMonitor) AsCPUResourceMonitorSpec() (CPUResourceMonitorSpec, error) {
	var body CPUResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCPUResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided CPUResourceMonitorSpec
func (t *ResourceMonitor) FromCPUResourceMonitorSpec(v CPUResourceMonitorSpec) error {
	v.MonitorType = "CPU"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCPUResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided CPUResourceMonitorSpec
func (t *ResourceMonitor) MergeCPUResourceMonitorSpec(v CPUResourceMonitorSpec) error {
	v.MonitorType = "CPU"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMemoryResourceMonitorSpec returns the union data inside the ResourceMonitor as a MemoryResourceMonitorSpec
func (t ResourceMonitor) AsMemoryResourceMonitorSpec() (MemoryResourceMonitorSpec, error) {
	var body MemoryResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMemoryResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided MemoryResourceMonitorSpec
func (t *ResourceMonitor) FromMemoryResourceMonitorSpec(v MemoryResourceMonitorSpec) error {
	v.MonitorType = "Memory"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMemoryResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided MemoryResourceMonitorSpec
func (t *ResourceMonitor) MergeMemoryResourceMonitorSpec(v MemoryResourceMonitorSpec) error {
	v.MonitorType = "Memory"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiskResourceMonitorSpec returns the union data inside the ResourceMonitor as a DiskResourceMonitorSpec
func (t ResourceMonitor) AsDiskResourceMonitorSpec() (DiskResourceMonitorSpec, error) {
	var body DiskResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiskResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided DiskResourceMonitorSpec
func (t *ResourceMonitor) FromDiskResourceMonitorSpec(v DiskResourceMonitorSpec) error {
	v.MonitorType = "Disk"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiskResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided DiskResourceMonitorSpec
func (t *ResourceMonitor) MergeDiskResourceMonitorSpec(v DiskResourceMonitorSpec) error {
	v.MonitorType = "Disk"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceMonitor) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"monitorType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResourceMonitor) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CPU":
		return t.AsCPUResourceMonitorSpec()
	case "Disk":
		return t.AsDiskResourceMonitorSpec()
	case "Memory":
		return t.AsMemoryResourceMonitorSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResourceMonitor) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceMonitor) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGitConfigProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a GitConfigProviderSpec
func (t TemplateVersionStatus_Config_Item) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided GitConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided GitConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a KubernetesSecretProviderSpec
func (t TemplateVersionStatus_Config_Item) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided KubernetesSecretProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided KubernetesSecretProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a InlineConfigProviderSpec
func (t TemplateVersionStatus_Config_Item) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided InlineConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided InlineConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpConfigProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a HttpConfigProviderSpec
func (t TemplateVersionStatus_Config_Item) AsHttpConfigProviderSpec() (HttpConfigProviderSpec, error) {
	var body HttpConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpConfigProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided HttpConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	v.ConfigType = "HttpConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpConfigProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided HttpConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	v.ConfigType = "HttpConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TemplateVersionStatus_Config_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TemplateVersionStatus_Config_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "GitConfigProviderSpec":
		return t.AsGitConfigProviderSpec()
	case "HttpConfigProviderSpec":
		return t.AsHttpConfigProviderSpec()
	case "InlineConfigProviderSpec":
		return t.AsInlineConfigProviderSpec()
	case "KubernetesSecretProviderSpec":
		return t.AsKubernetesSecretProviderSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TemplateVersionStatus_Config_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TemplateVersionStatus_Config_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
