// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package v1alpha1

import (
	"encoding/json"
	"errors"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ConditionStatus.
const (
	ConditionStatusFalse   ConditionStatus = "False"
	ConditionStatusTrue    ConditionStatus = "True"
	ConditionStatusUnknown ConditionStatus = "Unknown"
)

// Defines values for ConditionType.
const (
	DeviceAvailable            ConditionType = "Available"
	DeviceCPUPressure          ConditionType = "CPUPressure"
	DeviceDegraded             ConditionType = "Degraded"
	DeviceDiskPressure         ConditionType = "DiskPressure"
	DeviceMemoryPressure       ConditionType = "MemoryPressure"
	DevicePIDPressure          ConditionType = "PIDPressure"
	DeviceProgressing          ConditionType = "Progressing"
	DeviceReady                ConditionType = "Ready"
	EnrollmentRequestApproved  ConditionType = "Approved"
	FleetOverlappingSelectors  ConditionType = "OverlappingSelectors"
	FleetValid                 ConditionType = "Valid"
	RepositoryAccessible       ConditionType = "Accessible"
	ResourceSyncAccessible     ConditionType = "Accessible"
	ResourceSyncResourceParsed ConditionType = "ResourceParsed"
	ResourceSyncSynced         ConditionType = "Synced"
	TemplateVersionValid       ConditionType = "Valid"
)

// Defines values for TemplateDiscriminators.
const (
	TemplateDiscriminatorGitConfig     TemplateDiscriminators = "GitConfigProviderSpec"
	TemplateDiscriminatorInlineConfig  TemplateDiscriminators = "InlineConfigProviderSpec"
	TemplateDiscriminatorKubernetesSec TemplateDiscriminators = "KubernetesSecretProviderSpec"
)

// Condition Condition contains details for one aspect of the current state of this API Resource.
type Condition struct {
	LastHeartbeatTime *string `json:"lastHeartbeatTime,omitempty"`

	// LastTransitionTime The last time the condition transitioned from one status to another.
	LastTransitionTime *string `json:"lastTransitionTime,omitempty"`

	// Message Human readable message indicating details about last transition.
	Message *string `json:"message,omitempty"`

	// ObservedGeneration The .metadata.generation that the condition was set based upon.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	// Reason (brief) reason for the condition's last transition.
	Reason *string         `json:"reason,omitempty"`
	Status ConditionStatus `json:"status"`
	Type   ConditionType   `json:"type"`
}

// ConditionStatus defines model for ConditionStatus.
type ConditionStatus string

// ConditionType defines model for ConditionType.
type ConditionType string

// ContainerStatus defines model for ContainerStatus.
type ContainerStatus struct {
	// Id ID of the container.
	Id string `json:"id"`

	// Image Image of the container.
	Image string `json:"image"`

	// Name Name of the container.
	Name string `json:"name"`

	// Status Status of the container (e.g., running, stopped, etc.).
	Status string `json:"status"`
}

// Device Device represents a physical device.
type Device struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec DeviceSpec is a description of a device's target state.
	Spec *DeviceSpec `json:"spec,omitempty"`

	// Status DeviceStatus represents information about the status of a device. Status may trail the actual state of a device, especially if the device has not contacted the management service in a while.
	Status *DeviceStatus `json:"status,omitempty"`
}

// DeviceList DeviceList is a list of Devices.
type DeviceList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Devices.
	Items []Device `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// DeviceOSSpec defines model for DeviceOSSpec.
type DeviceOSSpec struct {
	// Image ostree image name or URL.
	Image string `json:"image"`
}

// DeviceSpec defines model for DeviceSpec.
type DeviceSpec struct {
	// Config List of config resources.
	Config     *[]DeviceSpec_Config_Item `json:"config,omitempty"`
	Containers *struct {
		MatchPattern *[]string `json:"matchPattern,omitempty"`
	} `json:"containers,omitempty"`
	Os      *DeviceOSSpec `json:"os,omitempty"`
	Systemd *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`

	// TemplateVersion The TemplateVersion representing the target state for this device.
	TemplateVersion *string `json:"templateVersion,omitempty"`
}

// DeviceSpec_Config_Item defines model for DeviceSpec.config.Item.
type DeviceSpec_Config_Item struct {
	union json.RawMessage
}

// DeviceSpecification defines model for DeviceSpecification.
type DeviceSpecification struct {
	// Config List of config resources.
	Config     *[]DeviceSpecification_Config_Item `json:"config,omitempty"`
	Containers *struct {
		MatchPattern *[]string `json:"matchPattern,omitempty"`
	} `json:"containers,omitempty"`
	Os      *DeviceOSSpec `json:"os,omitempty"`
	Systemd *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
}

// DeviceSpecification_Config_Item defines model for DeviceSpecification.config.Item.
type DeviceSpecification_Config_Item struct {
	union json.RawMessage
}

// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device, especially if the device has not contacted the management service in a while.
type DeviceStatus struct {
	// Conditions Current state of the device.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// Containers Statuses of containers in the device.
	Containers *[]ContainerStatus `json:"containers,omitempty"`

	// SystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
	SystemInfo *DeviceSystemInfo `json:"systemInfo,omitempty"`

	// SystemdUnits Current state of systemd units on the device.
	SystemdUnits *[]DeviceSystemdUnitStatus `json:"systemdUnits,omitempty"`
	UpdatedAt    *string                    `json:"updatedAt,omitempty"`
}

// DeviceSystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
type DeviceSystemInfo struct {
	// Architecture The Architecture reported by the device.
	Architecture string `json:"architecture"`

	// BootID Boot ID reported by the device.
	BootID string `json:"bootID"`

	// MachineID MachineID reported by the device.
	MachineID string `json:"machineID"`

	// Measurements The integrity measurements of the system.
	Measurements map[string]string `json:"measurements"`

	// OperatingSystem The Operating System reported by the device.
	OperatingSystem string `json:"operatingSystem"`
}

// DeviceSystemdUnitStatus The status of the systemd unit.
type DeviceSystemdUnitStatus struct {
	// ActiveState The active state of the systemd unit.
	ActiveState string `json:"activeState"`

	// LoadState The load state of the systemd unit.
	LoadState string `json:"loadState"`

	// Name The name of the systemd unit.
	Name interface{} `json:"name"`
}

// EnrollmentRequest EnrollmentRequest represents a request for approval to enroll a device.
type EnrollmentRequest struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
	Spec EnrollmentRequestSpec `json:"spec"`

	// Status EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
	Status *EnrollmentRequestStatus `json:"status,omitempty"`
}

// EnrollmentRequestApproval defines model for EnrollmentRequestApproval.
type EnrollmentRequestApproval struct {
	// Approved approved indicates whether the request has been approved.
	Approved bool `json:"approved"`

	// ApprovedAt approvedAt is the time at which the request was approved.
	ApprovedAt *string `json:"approvedAt,omitempty"`

	// ApprovedBy approvedBy is the name of the approver.
	ApprovedBy *string `json:"approvedBy,omitempty"`

	// Labels labels is a set of labels to apply to the device.
	Labels *map[string]string `json:"labels,omitempty"`

	// Region region is the region in which the device should be enrolled.
	Region *string `json:"region,omitempty"`
}

// EnrollmentRequestList EnrollmentRequestList is a list of EnrollmentRequest.
type EnrollmentRequestList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of EnrollmentRequest.
	Items []EnrollmentRequest `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// EnrollmentRequestSpec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
type EnrollmentRequestSpec struct {
	// Csr csr is a PEM-encoded PKCS#10 certificate signing request.
	Csr string `json:"csr"`

	// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device, especially if the device has not contacted the management service in a while.
	DeviceStatus *DeviceStatus `json:"deviceStatus,omitempty"`
}

// EnrollmentRequestStatus EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
type EnrollmentRequestStatus struct {
	Approval *EnrollmentRequestApproval `json:"approval,omitempty"`

	// Certificate certificate is a PEM-encoded signed certificate.
	Certificate *string `json:"certificate,omitempty"`

	// Conditions Current state of the EnrollmentRequest.
	Conditions *[]Condition `json:"conditions,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// Fleet Fleet represents a set of devices.
type Fleet struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec FleetSpec is a description of a fleet's target state.
	Spec FleetSpec `json:"spec"`

	// Status FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
	Status *FleetStatus `json:"status,omitempty"`
}

// FleetList FleetList is a list of Fleets.
type FleetList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Fleets.
	Items []Fleet `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// FleetSpec FleetSpec is a description of a fleet's target state.
type FleetSpec struct {
	// Selector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
	Selector *LabelSelector `json:"selector,omitempty"`
	Template struct {
		// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		Metadata *ObjectMeta         `json:"metadata,omitempty"`
		Spec     DeviceSpecification `json:"spec"`
	} `json:"template"`
}

// FleetStatus FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
type FleetStatus struct {
	// Conditions Current state of the fleet.
	Conditions *[]Condition `json:"conditions,omitempty"`
}

// GenericConfigSpec defines model for GenericConfigSpec.
type GenericConfigSpec struct {
	ConfigType string `json:"configType"`
	Name       string `json:"name"`
}

// GitConfigProviderSpec defines model for GitConfigProviderSpec.
type GitConfigProviderSpec struct {
	ConfigType string `json:"configType"`
	GitRef     struct {
		Path string `json:"path"`

		// Repository The name of the repository resource to use as the sync source
		Repository     string `json:"repository"`
		TargetRevision string `json:"targetRevision"`
	} `json:"gitRef"`
	Name string `json:"name"`
}

// InlineConfigProviderSpec defines model for InlineConfigProviderSpec.
type InlineConfigProviderSpec struct {
	ConfigType string                 `json:"configType"`
	Inline     map[string]interface{} `json:"inline"`
	Name       string                 `json:"name"`
}

// KubernetesSecretProviderSpec defines model for KubernetesSecretProviderSpec.
type KubernetesSecretProviderSpec struct {
	ConfigType string `json:"configType"`
	Name       string `json:"name"`
	SecretRef  struct {
		MountPath string  `json:"mountPath"`
		Name      *string `json:"name,omitempty"`
		Namespace string  `json:"namespace"`
	} `json:"secretRef"`
}

// LabelSelector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
type LabelSelector struct {
	MatchLabels map[string]string `json:"matchLabels"`
}

// ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`
}

// ObjectMeta ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Annotations Properties set by the service.
	Annotations       *map[string]string `json:"annotations,omitempty"`
	CreationTimestamp *string            `json:"creationTimestamp,omitempty"`
	DeletionTimestamp *string            `json:"deletionTimestamp,omitempty"`

	// Generation A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int64 `json:"generation,omitempty"`

	// Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects.
	Labels *map[string]string `json:"labels,omitempty"`

	// Name name of the object
	Name *string `json:"name,omitempty"`

	// Owner A resource that owns this resource, in "kind/name" format.
	Owner *string `json:"owner,omitempty"`
}

// RenderedDeviceSpec defines model for RenderedDeviceSpec.
type RenderedDeviceSpec struct {
	Config     *string `json:"config,omitempty"`
	Containers *struct {
		MatchPattern *[]string `json:"matchPattern,omitempty"`
	} `json:"containers,omitempty"`
	Os      *DeviceOSSpec `json:"os,omitempty"`
	Owner   string        `json:"owner"`
	Systemd *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
	TemplateVersion string `json:"templateVersion"`
}

// Repository Repository represents a git repository
type Repository struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta     `json:"metadata"`
	Spec     RepositorySpec `json:"spec"`

	// Status RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
	Status *RepositoryStatus `json:"status,omitempty"`
}

// RepositoryList RepositoryList is a list of Repositories.
type RepositoryList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of repositories.
	Items []Repository `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// RepositorySpec defines model for RepositorySpec.
type RepositorySpec struct {
	// Password The password for auth with HTTP transport
	Password *string `json:"password,omitempty"`

	// Repo The (possibly remote) repository URL to clone from
	Repo *string `json:"repo,omitempty"`

	// Username The username for auth with HTTP transport
	Username *string `json:"username,omitempty"`
}

// RepositoryStatus RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
type RepositoryStatus struct {
	// Conditions Current state of the repository.
	Conditions *[]Condition `json:"conditions,omitempty"`
}

// ResourceSync ResourceSync represents a reference to one or more files in a repository to sync to resource definitions
type ResourceSync struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta       `json:"metadata"`
	Spec     ResourceSyncSpec `json:"spec"`

	// Status ResourceSyncStatus represents information about the status of a resourcesync
	Status *ResourceSyncStatus `json:"status,omitempty"`
}

// ResourceSyncList defines model for ResourceSyncList.
type ResourceSyncList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of resourcesync.
	Items []ResourceSync `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// ResourceSyncSpec defines model for ResourceSyncSpec.
type ResourceSyncSpec struct {
	// Path The path of a file or directory in the repository. If a directory,
	// the directory should contain only resource definitions with no
	// subdirectories. Each file should contain the definition of one or
	// more resources.
	Path *string `json:"path,omitempty"`

	// Repository The name of the repository resource to use as the sync source
	Repository *string `json:"repository,omitempty"`

	// TargetRevision The desired revision in the repository
	TargetRevision *string `json:"targetRevision,omitempty"`
}

// ResourceSyncStatus ResourceSyncStatus represents information about the status of a resourcesync
type ResourceSyncStatus struct {
	// Conditions Current state of a resourcesync.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// ObservedCommit The last commit hash that was synced
	ObservedCommit *string `json:"observedCommit,omitempty"`

	// ObservedGeneration The last generation that was synced
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// Status Status is a return value for calls that don't return other objects.
type Status struct {
	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// TemplateDiscriminators defines model for TemplateDiscriminators.
type TemplateDiscriminators string

// TemplateVersion TemplateVersion represents a version of a template.
type TemplateVersion struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta             `json:"metadata"`
	Spec     TemplateVersionSpec    `json:"spec"`
	Status   *TemplateVersionStatus `json:"status,omitempty"`
}

// TemplateVersionList TemplateVersionList is a list of TemplateVersions.
type TemplateVersionList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of TemplateVersions.
	Items []TemplateVersion `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// TemplateVersionSpec defines model for TemplateVersionSpec.
type TemplateVersionSpec struct {
	// Fleet The fleet whose template this refers to.
	Fleet string `json:"fleet"`
}

// TemplateVersionStatus defines model for TemplateVersionStatus.
type TemplateVersionStatus struct {
	// Conditions Current state of the device.
	Conditions *[]Condition `json:"conditions,omitempty"`

	// Config List of config resources.
	Config     *[]TemplateVersionStatus_Config_Item `json:"config,omitempty"`
	Containers *struct {
		MatchPattern *[]string `json:"matchPattern,omitempty"`
	} `json:"containers,omitempty"`
	Os      *DeviceOSSpec `json:"os,omitempty"`
	Systemd *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
}

// TemplateVersionStatus_Config_Item defines model for TemplateVersionStatus.config.Item.
type TemplateVersionStatus_Config_Item struct {
	union json.RawMessage
}

// ListDevicesParams defines parameters for ListDevices.
type ListDevicesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner The owner of the devices.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// GetRenderedDeviceSpecParams defines parameters for GetRenderedDeviceSpec.
type GetRenderedDeviceSpecParams struct {
	// KnownOwner The last known owner
	KnownOwner *string `form:"knownOwner,omitempty" json:"knownOwner,omitempty"`

	// KnownTemplateVersion The last known template version
	KnownTemplateVersion *string `form:"knownTemplateVersion,omitempty" json:"knownTemplateVersion,omitempty"`
}

// ListEnrollmentRequestsParams defines parameters for ListEnrollmentRequests.
type ListEnrollmentRequestsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListFleetsParams defines parameters for ListFleets.
type ListFleetsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner The owner of the fleets.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListResourceSyncParams defines parameters for ListResourceSync.
type ListResourceSyncParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// DeleteTemplateVersionsParams defines parameters for DeleteTemplateVersions.
type DeleteTemplateVersionsParams struct {
	// Owner The owner of the templateversions.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// ListTemplateVersionsParams defines parameters for ListTemplateVersions.
type ListTemplateVersionsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner The owner of the templateversions.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`
}

// CreateDeviceJSONRequestBody defines body for CreateDevice for application/json ContentType.
type CreateDeviceJSONRequestBody = Device

// ReplaceDeviceJSONRequestBody defines body for ReplaceDevice for application/json ContentType.
type ReplaceDeviceJSONRequestBody = Device

// ReplaceDeviceStatusJSONRequestBody defines body for ReplaceDeviceStatus for application/json ContentType.
type ReplaceDeviceStatusJSONRequestBody = Device

// CreateEnrollmentRequestJSONRequestBody defines body for CreateEnrollmentRequest for application/json ContentType.
type CreateEnrollmentRequestJSONRequestBody = EnrollmentRequest

// ReplaceEnrollmentRequestJSONRequestBody defines body for ReplaceEnrollmentRequest for application/json ContentType.
type ReplaceEnrollmentRequestJSONRequestBody = EnrollmentRequest

// CreateEnrollmentRequestApprovalJSONRequestBody defines body for CreateEnrollmentRequestApproval for application/json ContentType.
type CreateEnrollmentRequestApprovalJSONRequestBody = EnrollmentRequestApproval

// ReplaceEnrollmentRequestStatusJSONRequestBody defines body for ReplaceEnrollmentRequestStatus for application/json ContentType.
type ReplaceEnrollmentRequestStatusJSONRequestBody = EnrollmentRequest

// CreateFleetJSONRequestBody defines body for CreateFleet for application/json ContentType.
type CreateFleetJSONRequestBody = Fleet

// ReplaceFleetJSONRequestBody defines body for ReplaceFleet for application/json ContentType.
type ReplaceFleetJSONRequestBody = Fleet

// ReplaceFleetStatusJSONRequestBody defines body for ReplaceFleetStatus for application/json ContentType.
type ReplaceFleetStatusJSONRequestBody = Fleet

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = Repository

// ReplaceRepositoryJSONRequestBody defines body for ReplaceRepository for application/json ContentType.
type ReplaceRepositoryJSONRequestBody = Repository

// CreateResourceSyncJSONRequestBody defines body for CreateResourceSync for application/json ContentType.
type CreateResourceSyncJSONRequestBody = ResourceSync

// ReplaceResourceSyncJSONRequestBody defines body for ReplaceResourceSync for application/json ContentType.
type ReplaceResourceSyncJSONRequestBody = ResourceSync

// CreateTemplateVersionJSONRequestBody defines body for CreateTemplateVersion for application/json ContentType.
type CreateTemplateVersionJSONRequestBody = TemplateVersion

// AsGitConfigProviderSpec returns the union data inside the DeviceSpec_Config_Item as a GitConfigProviderSpec
func (t DeviceSpec_Config_Item) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided GitConfigProviderSpec
func (t *DeviceSpec_Config_Item) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided GitConfigProviderSpec
func (t *DeviceSpec_Config_Item) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the DeviceSpec_Config_Item as a KubernetesSecretProviderSpec
func (t DeviceSpec_Config_Item) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided KubernetesSecretProviderSpec
func (t *DeviceSpec_Config_Item) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided KubernetesSecretProviderSpec
func (t *DeviceSpec_Config_Item) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the DeviceSpec_Config_Item as a InlineConfigProviderSpec
func (t DeviceSpec_Config_Item) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the DeviceSpec_Config_Item as the provided InlineConfigProviderSpec
func (t *DeviceSpec_Config_Item) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the DeviceSpec_Config_Item, using the provided InlineConfigProviderSpec
func (t *DeviceSpec_Config_Item) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeviceSpec_Config_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DeviceSpec_Config_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "GitConfigProviderSpec":
		return t.AsGitConfigProviderSpec()
	case "InlineConfigProviderSpec":
		return t.AsInlineConfigProviderSpec()
	case "KubernetesSecretProviderSpec":
		return t.AsKubernetesSecretProviderSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DeviceSpec_Config_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeviceSpec_Config_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGitConfigProviderSpec returns the union data inside the DeviceSpecification_Config_Item as a GitConfigProviderSpec
func (t DeviceSpecification_Config_Item) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the DeviceSpecification_Config_Item as the provided GitConfigProviderSpec
func (t *DeviceSpecification_Config_Item) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the DeviceSpecification_Config_Item, using the provided GitConfigProviderSpec
func (t *DeviceSpecification_Config_Item) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the DeviceSpecification_Config_Item as a KubernetesSecretProviderSpec
func (t DeviceSpecification_Config_Item) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the DeviceSpecification_Config_Item as the provided KubernetesSecretProviderSpec
func (t *DeviceSpecification_Config_Item) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the DeviceSpecification_Config_Item, using the provided KubernetesSecretProviderSpec
func (t *DeviceSpecification_Config_Item) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the DeviceSpecification_Config_Item as a InlineConfigProviderSpec
func (t DeviceSpecification_Config_Item) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the DeviceSpecification_Config_Item as the provided InlineConfigProviderSpec
func (t *DeviceSpecification_Config_Item) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the DeviceSpecification_Config_Item, using the provided InlineConfigProviderSpec
func (t *DeviceSpecification_Config_Item) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DeviceSpecification_Config_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DeviceSpecification_Config_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "GitConfigProviderSpec":
		return t.AsGitConfigProviderSpec()
	case "InlineConfigProviderSpec":
		return t.AsInlineConfigProviderSpec()
	case "KubernetesSecretProviderSpec":
		return t.AsKubernetesSecretProviderSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DeviceSpecification_Config_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DeviceSpecification_Config_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGitConfigProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a GitConfigProviderSpec
func (t TemplateVersionStatus_Config_Item) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided GitConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided GitConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	v.ConfigType = "GitConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a KubernetesSecretProviderSpec
func (t TemplateVersionStatus_Config_Item) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided KubernetesSecretProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided KubernetesSecretProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	v.ConfigType = "KubernetesSecretProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the TemplateVersionStatus_Config_Item as a InlineConfigProviderSpec
func (t TemplateVersionStatus_Config_Item) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the TemplateVersionStatus_Config_Item as the provided InlineConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the TemplateVersionStatus_Config_Item, using the provided InlineConfigProviderSpec
func (t *TemplateVersionStatus_Config_Item) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	v.ConfigType = "InlineConfigProviderSpec"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TemplateVersionStatus_Config_Item) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"configType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TemplateVersionStatus_Config_Item) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "GitConfigProviderSpec":
		return t.AsGitConfigProviderSpec()
	case "InlineConfigProviderSpec":
		return t.AsInlineConfigProviderSpec()
	case "KubernetesSecretProviderSpec":
		return t.AsKubernetesSecretProviderSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TemplateVersionStatus_Config_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TemplateVersionStatus_Config_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
