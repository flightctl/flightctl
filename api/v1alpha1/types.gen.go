// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ApplicationStatusType.
const (
	ApplicationStatusCompleted ApplicationStatusType = "Completed"
	ApplicationStatusError     ApplicationStatusType = "Error"
	ApplicationStatusPreparing ApplicationStatusType = "Preparing"
	ApplicationStatusRunning   ApplicationStatusType = "Running"
	ApplicationStatusStarting  ApplicationStatusType = "Starting"
	ApplicationStatusUnknown   ApplicationStatusType = "Unknown"
)

// Defines values for ApplicationsSummaryStatusType.
const (
	ApplicationsSummaryStatusDegraded ApplicationsSummaryStatusType = "Degraded"
	ApplicationsSummaryStatusError    ApplicationsSummaryStatusType = "Error"
	ApplicationsSummaryStatusHealthy  ApplicationsSummaryStatusType = "Healthy"
	ApplicationsSummaryStatusUnknown  ApplicationsSummaryStatusType = "Unknown"
)

// Defines values for ConditionStatus.
const (
	ConditionStatusFalse   ConditionStatus = "False"
	ConditionStatusTrue    ConditionStatus = "True"
	ConditionStatusUnknown ConditionStatus = "Unknown"
)

// Defines values for ConditionType.
const (
	CertificateSigningRequestApproved ConditionType = "Approved"
	CertificateSigningRequestDenied   ConditionType = "Denied"
	CertificateSigningRequestFailed   ConditionType = "Failed"
	DeviceMultipleOwners              ConditionType = "MultipleOwners"
	DeviceSpecValid                   ConditionType = "SpecValid"
	DeviceUpdating                    ConditionType = "Updating"
	EnrollmentRequestApproved         ConditionType = "Approved"
	FleetOverlappingSelectors         ConditionType = "OverlappingSelectors"
	FleetValid                        ConditionType = "Valid"
	RepositoryAccessible              ConditionType = "Accessible"
	ResourceSyncAccessible            ConditionType = "Accessible"
	ResourceSyncResourceParsed        ConditionType = "ResourceParsed"
	ResourceSyncSynced                ConditionType = "Synced"
)

// Defines values for DeviceDecommissionDecommissionTarget.
const (
	FactoryReset DeviceDecommissionDecommissionTarget = "FactoryReset"
	Unenroll     DeviceDecommissionDecommissionTarget = "Unenroll"
)

// Defines values for DeviceIntegrityStatusSummaryType.
const (
	DeviceIntegrityStatusFailed      DeviceIntegrityStatusSummaryType = "Failed"
	DeviceIntegrityStatusPassed      DeviceIntegrityStatusSummaryType = "Passed"
	DeviceIntegrityStatusUnknown     DeviceIntegrityStatusSummaryType = "Unknown"
	DeviceIntegrityStatusUnsupported DeviceIntegrityStatusSummaryType = "Unsupported"
)

// Defines values for DeviceResourceStatusType.
const (
	DeviceResourceStatusCritical DeviceResourceStatusType = "Critical"
	DeviceResourceStatusError    DeviceResourceStatusType = "Error"
	DeviceResourceStatusHealthy  DeviceResourceStatusType = "Healthy"
	DeviceResourceStatusUnknown  DeviceResourceStatusType = "Unknown"
	DeviceResourceStatusWarning  DeviceResourceStatusType = "Warning"
)

// Defines values for DeviceSummaryStatusType.
const (
	DeviceSummaryStatusDegraded   DeviceSummaryStatusType = "Degraded"
	DeviceSummaryStatusError      DeviceSummaryStatusType = "Error"
	DeviceSummaryStatusOnline     DeviceSummaryStatusType = "Online"
	DeviceSummaryStatusPoweredOff DeviceSummaryStatusType = "PoweredOff"
	DeviceSummaryStatusRebooting  DeviceSummaryStatusType = "Rebooting"
	DeviceSummaryStatusUnknown    DeviceSummaryStatusType = "Unknown"
)

// Defines values for DeviceUpdatedStatusType.
const (
	DeviceUpdatedStatusOutOfDate DeviceUpdatedStatusType = "OutOfDate"
	DeviceUpdatedStatusUnknown   DeviceUpdatedStatusType = "Unknown"
	DeviceUpdatedStatusUpToDate  DeviceUpdatedStatusType = "UpToDate"
	DeviceUpdatedStatusUpdating  DeviceUpdatedStatusType = "Updating"
)

// Defines values for FileOperation.
const (
	FileOperationCreate FileOperation = "Create"
	FileOperationReboot FileOperation = "Reboot"
	FileOperationRemove FileOperation = "Remove"
	FileOperationUpdate FileOperation = "Update"
)

// Defines values for FileSpecContentEncoding.
const (
	Base64 FileSpecContentEncoding = "base64"
	Plain  FileSpecContentEncoding = "plain"
)

// Defines values for HookActionSystemdUnitOperations.
const (
	SystemdDaemonReload HookActionSystemdUnitOperations = "DaemonReload"
	SystemdDisable      HookActionSystemdUnitOperations = "Disable"
	SystemdEnable       HookActionSystemdUnitOperations = "Enable"
	SystemdReload       HookActionSystemdUnitOperations = "Reload"
	SystemdRestart      HookActionSystemdUnitOperations = "Restart"
	SystemdStart        HookActionSystemdUnitOperations = "Start"
	SystemdStop         HookActionSystemdUnitOperations = "Stop"
)

// Defines values for MatchExpressionOperator.
const (
	DoesNotExist MatchExpressionOperator = "DoesNotExist"
	Exists       MatchExpressionOperator = "Exists"
	In           MatchExpressionOperator = "In"
	NotIn        MatchExpressionOperator = "NotIn"
)

// Defines values for PatchRequestOp.
const (
	Add     PatchRequestOp = "add"
	Remove  PatchRequestOp = "remove"
	Replace PatchRequestOp = "replace"
)

// Defines values for RepoSpecType.
const (
	Git  RepoSpecType = "git"
	Http RepoSpecType = "http"
)

// Defines values for ResourceAlertSeverityType.
const (
	ResourceAlertSeverityTypeCritical ResourceAlertSeverityType = "Critical"
	ResourceAlertSeverityTypeInfo     ResourceAlertSeverityType = "Info"
	ResourceAlertSeverityTypeWarning  ResourceAlertSeverityType = "Warning"
)

// Defines values for SortOrder.
const (
	Asc  SortOrder = "Asc"
	Desc SortOrder = "Desc"
)

// ApplicationEnvVars defines model for ApplicationEnvVars.
type ApplicationEnvVars struct {
	// EnvVars Environment variable key-value pairs, injected during runtime
	EnvVars *map[string]string `json:"envVars,omitempty"`
}

// ApplicationSpec defines model for ApplicationSpec.
type ApplicationSpec struct {
	// EnvVars Environment variable key-value pairs, injected during runtime
	EnvVars *map[string]string `json:"envVars,omitempty"`

	// Name The name of the application
	Name  *string `json:"name,omitempty"`
	union json.RawMessage
}

// ApplicationStatusType defines model for ApplicationStatusType.
type ApplicationStatusType string

// ApplicationsSummaryStatusType defines model for ApplicationsSummaryStatusType.
type ApplicationsSummaryStatusType string

// AuthConfig Auth config.
type AuthConfig struct {
	// AuthType Auth type
	AuthType string `json:"authType"`

	// AuthURL Auth URL
	AuthURL string `json:"authURL"`
}

// Batch Batch is an element in batch sequence.
type Batch struct {
	Limit *Batch_Limit `json:"limit,omitempty"`

	// Selector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
	Selector *LabelSelector `json:"selector,omitempty"`

	// SuccessThreshold Percentage is the string format representing percentage string.
	SuccessThreshold *Percentage `json:"successThreshold,omitempty"`
}

// BatchLimit1 defines model for .
type BatchLimit1 = int

// Batch_Limit defines model for Batch.Limit.
type Batch_Limit struct {
	union json.RawMessage
}

// BatchSequence BatchSequence defines the list of batches to be executed in sequence.
type BatchSequence struct {
	Sequence *[]Batch `json:"sequence,omitempty"`
}

// CPUResourceMonitorSpec defines model for CPUResourceMonitorSpec.
type CPUResourceMonitorSpec = ResourceMonitorSpec

// CertificateSigningRequest CertificateSigningRequest represents a request for a signed certificate from the CA
type CertificateSigningRequest struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec Wrapper around a user-created CSR, modeled on kubernetes io.k8s.api.certificates.v1.CertificateSigningRequestSpec
	Spec CertificateSigningRequestSpec `json:"spec"`

	// Status Indicates approval/denial/failure status of the CSR, and contains the issued certifiate if any exists
	Status *CertificateSigningRequestStatus `json:"status,omitempty"`
}

// CertificateSigningRequestList CertificateSigningRequestList is a list of CertificateSigningRequest
type CertificateSigningRequestList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of CertificateSigningRequest.
	Items []CertificateSigningRequest `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// CertificateSigningRequestSpec Wrapper around a user-created CSR, modeled on kubernetes io.k8s.api.certificates.v1.CertificateSigningRequestSpec
type CertificateSigningRequestSpec struct {
	// ExpirationSeconds Requested duration of validity for the certificate
	ExpirationSeconds *int32 `json:"expirationSeconds,omitempty"`

	// Extra Extra attributes of the user that created the CSR, populated by the API server on creation and immutable
	Extra *map[string][]string `json:"extra,omitempty"`

	// Request The base64-encoded PEM-encoded PKCS#10 CSR. Matches the spec.request field in a kubernetes CertificateSigningRequest resource
	Request []byte `json:"request"`

	// SignerName Indicates the requested signer, and is a qualified name
	SignerName string `json:"signerName"`

	// Uid UID of the user that created the CSR, populated by the API server on creation and immutable
	Uid *string `json:"uid,omitempty"`

	// Usages Usages specifies a set of key usages requested in the issued certificate.
	Usages *[]string `json:"usages,omitempty"`

	// Username Name of the user that created the CSR, populated by the API server on creation and immutable
	Username *string `json:"username,omitempty"`
}

// CertificateSigningRequestStatus Indicates approval/denial/failure status of the CSR, and contains the issued certifiate if any exists
type CertificateSigningRequestStatus struct {
	// Certificate The issued signed certificate, immutable once populated
	Certificate *[]byte `json:"certificate,omitempty"`

	// Conditions Conditions applied to the request. Known conditions are Approved, Denied, and Failed
	Conditions []Condition `json:"conditions"`
}

// Condition Condition contains details for one aspect of the current state of this API Resource.
type Condition struct {
	// LastTransitionTime The last time the condition transitioned from one status to another.
	LastTransitionTime time.Time `json:"lastTransitionTime"`

	// Message Human readable message indicating details about last transition.
	Message string `json:"message"`

	// ObservedGeneration The .metadata.generation that the condition was set based upon.
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`

	// Reason (brief) reason for the condition's last transition.
	Reason string          `json:"reason"`
	Status ConditionStatus `json:"status"`
	Type   ConditionType   `json:"type"`
}

// ConditionStatus defines model for ConditionStatus.
type ConditionStatus string

// ConditionType defines model for ConditionType.
type ConditionType string

// ConfigProviderSpec defines model for ConfigProviderSpec.
type ConfigProviderSpec struct {
	union json.RawMessage
}

// CronExpression "Cron expression format for scheduling times. The format is `* * * * *`: - Minutes: `*` matches 0-59. - Hours: `*` matches 0-23. - Day of Month: `*` matches 1-31. - Month: `*` matches 1-12. - Day of Week: `*` matches 0-6."
// Supported operators: - `*`: Matches any value (e.g., `*` in hours matches every hour). - `-`: Range (e.g., `0-8` for 12 AM to 8 AM). - `,`: List (e.g., `1,12` for 1st and 12th minute). - `/`: Step (e.g., `*/12` for every 12th minute). - Single value (e.g., `8` matches the 8th minute)." example: "* 0-8,16-23 * * *"
type CronExpression = string

// CustomResourceMonitorSpec defines model for CustomResourceMonitorSpec.
type CustomResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// SamplingInterval Duration between monitor samples. Format: positive integer followed by 's' for seconds, 'm' for minutes, 'h' for hours.
	SamplingInterval string `json:"samplingInterval"`
}

// Device Device represents a physical device.
type Device struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta  `json:"metadata"`
	Spec     *DeviceSpec `json:"spec,omitempty"`

	// Status DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
	Status *DeviceStatus `json:"status,omitempty"`
}

// DeviceApplicationStatus defines model for DeviceApplicationStatus.
type DeviceApplicationStatus struct {
	// Name Human readable name of the application.
	Name string `json:"name"`

	// Ready The number of containers which are ready in the application.
	Ready string `json:"ready"`

	// Restarts Number of restarts observed for the application.
	Restarts int                   `json:"restarts"`
	Status   ApplicationStatusType `json:"status"`
}

// DeviceApplicationsSummaryStatus defines model for DeviceApplicationsSummaryStatus.
type DeviceApplicationsSummaryStatus struct {
	// Info Human readable information detailing the last system application transition.
	Info   *string                       `json:"info,omitempty"`
	Status ApplicationsSummaryStatusType `json:"status"`
}

// DeviceConfigStatus defines model for DeviceConfigStatus.
type DeviceConfigStatus struct {
	// RenderedVersion Version of the device rendered config.
	RenderedVersion string `json:"renderedVersion"`
}

// DeviceConsole defines model for DeviceConsole.
type DeviceConsole struct {
	GRPCEndpoint string `json:"gRPCEndpoint"`
	SessionID    string `json:"sessionID"`
}

// DeviceDecommission defines model for DeviceDecommission.
type DeviceDecommission struct {
	// DecommissionTarget Specifies the desired decommissioning method of the device
	DecommissionTarget DeviceDecommissionDecommissionTarget `json:"decommissionTarget"`
}

// DeviceDecommissionDecommissionTarget Specifies the desired decommissioning method of the device
type DeviceDecommissionDecommissionTarget string

// DeviceHooksSpec defines model for DeviceHooksSpec.
type DeviceHooksSpec struct {
	// AfterRebooting Hooks executed after rebooting enable custom actions and integration with other systems
	// or services. These actions occur after the device has rebooted, allowing for post-reboot tasks.
	AfterRebooting *[]DeviceRebootHookSpec `json:"afterRebooting,omitempty"`

	// AfterUpdating Hooks executed after updating enable custom actions and integration with other systems
	// or services. These actions occur after configuration changes have been applied to the device.
	AfterUpdating *[]DeviceUpdateHookSpec `json:"afterUpdating,omitempty"`

	// BeforeRebooting Hooks executed before rebooting allow for custom actions and integration with other systems
	// or services. These actions occur before the device is rebooted.
	BeforeRebooting *[]DeviceRebootHookSpec `json:"beforeRebooting,omitempty"`

	// BeforeUpdating Hooks executed before updating allow for custom actions and integration with other systems
	// or services. These actions occur before configuration changes are applied to the device.
	BeforeUpdating *[]DeviceUpdateHookSpec `json:"beforeUpdating,omitempty"`
}

// DeviceIntegrityStatus defines model for DeviceIntegrityStatus.
type DeviceIntegrityStatus struct {
	Summary DeviceIntegrityStatusSummary `json:"summary"`
}

// DeviceIntegrityStatusSummary defines model for DeviceIntegrityStatusSummary.
type DeviceIntegrityStatusSummary struct {
	// Info Human readable information about the last integrity transition.
	Info   *string                          `json:"info,omitempty"`
	Status DeviceIntegrityStatusSummaryType `json:"status"`
}

// DeviceIntegrityStatusSummaryType defines model for DeviceIntegrityStatusSummaryType.
type DeviceIntegrityStatusSummaryType string

// DeviceList DeviceList is a list of Devices.
type DeviceList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Devices.
	Items []Device `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`

	// Summary A summary of the devices in the fleet returned when fetching a single Fleet.
	Summary *DevicesSummary `json:"summary,omitempty"`
}

// DeviceOSSpec defines model for DeviceOSSpec.
type DeviceOSSpec struct {
	// Image ostree image name or URL.
	Image string `json:"image"`
}

// DeviceOSStatus defines model for DeviceOSStatus.
type DeviceOSStatus struct {
	// Image Version of the OS image.
	Image string `json:"image"`

	// ImageDigest The digest of the OS image (e.g. sha256:a0...)
	ImageDigest string `json:"imageDigest"`
}

// DeviceRebootHookSpec defines model for DeviceRebootHookSpec.
type DeviceRebootHookSpec struct {
	// Actions The actions taken before and after system reboots are observed. Each action is executed in the order they are defined.
	Actions     []HookAction `json:"actions"`
	Description *string      `json:"description,omitempty"`
	Name        *string      `json:"name,omitempty"`
}

// DeviceResourceStatus defines model for DeviceResourceStatus.
type DeviceResourceStatus struct {
	Cpu    DeviceResourceStatusType `json:"cpu"`
	Disk   DeviceResourceStatusType `json:"disk"`
	Memory DeviceResourceStatusType `json:"memory"`
}

// DeviceResourceStatusType defines model for DeviceResourceStatusType.
type DeviceResourceStatusType string

// DeviceSpec defines model for DeviceSpec.
type DeviceSpec struct {
	// Applications List of applications.
	Applications *[]ApplicationSpec `json:"applications,omitempty"`

	// Config List of config providers.
	Config *[]ConfigProviderSpec `json:"config,omitempty"`
	Hooks  *DeviceHooksSpec      `json:"hooks,omitempty"`
	Os     *DeviceOSSpec         `json:"os,omitempty"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`

	// UpdatePolicy Specifies the policy for managing device updates, including when updates should be downloaded and applied.
	UpdatePolicy *DeviceUpdatePolicySpec `json:"updatePolicy,omitempty"`
}

// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
type DeviceStatus struct {
	// Applications List of device application status.
	Applications        []DeviceApplicationStatus       `json:"applications"`
	ApplicationsSummary DeviceApplicationsSummaryStatus `json:"applicationsSummary"`

	// Conditions Conditions represent the observations of a the current state of a device.
	Conditions []Condition           `json:"conditions"`
	Config     DeviceConfigStatus    `json:"config"`
	Integrity  DeviceIntegrityStatus `json:"integrity"`
	LastSeen   time.Time             `json:"lastSeen"`
	Os         DeviceOSStatus        `json:"os"`
	Resources  DeviceResourceStatus  `json:"resources"`
	Summary    DeviceSummaryStatus   `json:"summary"`

	// SystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
	SystemInfo DeviceSystemInfo    `json:"systemInfo"`
	Updated    DeviceUpdatedStatus `json:"updated"`
}

// DeviceSummaryStatus defines model for DeviceSummaryStatus.
type DeviceSummaryStatus struct {
	// Info Human readable information detailing the last device status transition.
	Info   *string                 `json:"info,omitempty"`
	Status DeviceSummaryStatusType `json:"status"`
}

// DeviceSummaryStatusType defines model for DeviceSummaryStatusType.
type DeviceSummaryStatusType string

// DeviceSystemInfo DeviceSystemInfo is a set of ids/uuids to uniquely identify the device.
type DeviceSystemInfo struct {
	// Architecture The Architecture reported by the device.
	Architecture string `json:"architecture"`

	// BootID Boot ID reported by the device.
	BootID string `json:"bootID"`

	// OperatingSystem The Operating System reported by the device.
	OperatingSystem string `json:"operatingSystem"`
}

// DeviceUpdateHookSpec defines model for DeviceUpdateHookSpec.
type DeviceUpdateHookSpec struct {
	// Actions The actions to take when the specified file operations are observed. Each action is executed in the order they are defined.
	Actions     []HookAction     `json:"actions"`
	Description *string          `json:"description,omitempty"`
	Name        *string          `json:"name,omitempty"`
	OnFile      *[]FileOperation `json:"onFile,omitempty"`

	// Path The path to monitor for changes in configuration files. This path can point to either a specific file or an entire directory.
	Path *string `json:"path,omitempty"`
}

// DeviceUpdatePolicySpec Specifies the policy for managing device updates, including when updates should be downloaded and applied.
type DeviceUpdatePolicySpec struct {
	// DownloadSchedule Defines the schedule for automatic updates, including timing and optional timeout.
	DownloadSchedule *UpdateSchedule `json:"downloadSchedule,omitempty"`

	// UpdateSchedule Defines the schedule for automatic updates, including timing and optional timeout.
	UpdateSchedule *UpdateSchedule `json:"updateSchedule,omitempty"`
}

// DeviceUpdatedStatus defines model for DeviceUpdatedStatus.
type DeviceUpdatedStatus struct {
	// Info Human readable information about the last device update transition.
	Info   *string                 `json:"info,omitempty"`
	Status DeviceUpdatedStatusType `json:"status"`
}

// DeviceUpdatedStatusType defines model for DeviceUpdatedStatusType.
type DeviceUpdatedStatusType string

// DevicesSummary A summary of the devices in the fleet returned when fetching a single Fleet.
type DevicesSummary struct {
	// ApplicationStatus A breakdown of the devices in the fleet by "application" status.
	ApplicationStatus map[string]int64 `json:"applicationStatus"`

	// SummaryStatus A breakdown of the devices in the fleet by "summary" status.
	SummaryStatus map[string]int64 `json:"summaryStatus"`

	// Total The total number of devices in the fleet.
	Total int64 `json:"total"`

	// UpdateStatus A breakdown of the devices in the fleet by "updated" status.
	UpdateStatus map[string]int64 `json:"updateStatus"`
}

// DiskResourceMonitorSpec defines model for DiskResourceMonitorSpec.
type DiskResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// Path The directory path to monitor for disk usage.
	Path string `json:"path"`

	// SamplingInterval Duration between monitor samples. Format: positive integer followed by 's' for seconds, 'm' for minutes, 'h' for hours.
	SamplingInterval string `json:"samplingInterval"`
}

// DisruptionAllowance DisruptionAllowance defines the level of allowed disruption when rollout is in progress.
type DisruptionAllowance struct {
	// GroupBy List of label keys to perform grouping for the disruption allowance.
	GroupBy *[]string `json:"groupBy,omitempty"`

	// MaxUnavailable The minimum number of required available devices during rollout.
	MaxUnavailable *int `json:"maxUnavailable,omitempty"`

	// MinAvailable The maximum number of unavailable devices allowed during rollout.
	MinAvailable *int `json:"minAvailable,omitempty"`
}

// Duration The maximum duration allowed for the action to complete.
// The duration should be specified as a positive integer
// followed by a time unit. Supported time units are:
// - 's' for seconds
// - 'm' for minutes
// - 'h' for hours
// - 'd' for days
type Duration = string

// EnrollmentConfig defines model for EnrollmentConfig.
type EnrollmentConfig struct {
	EnrollmentService      EnrollmentService `json:"enrollment-service"`
	GrpcManagementEndpoint string            `json:"grpc-management-endpoint"`
}

// EnrollmentRequest EnrollmentRequest represents a request for approval to enroll a device.
type EnrollmentRequest struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
	Spec EnrollmentRequestSpec `json:"spec"`

	// Status EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
	Status *EnrollmentRequestStatus `json:"status,omitempty"`
}

// EnrollmentRequestApproval defines model for EnrollmentRequestApproval.
type EnrollmentRequestApproval struct {
	// Approved approved indicates whether the request has been approved.
	Approved bool `json:"approved"`

	// ApprovedAt approvedAt is the time at which the request was approved.
	ApprovedAt *time.Time `json:"approvedAt,omitempty"`

	// ApprovedBy approvedBy is the name of the approver.
	ApprovedBy *string `json:"approvedBy,omitempty"`

	// Labels labels is a set of labels to apply to the device.
	Labels *map[string]string `json:"labels,omitempty"`
}

// EnrollmentRequestList EnrollmentRequestList is a list of EnrollmentRequest.
type EnrollmentRequestList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of EnrollmentRequest.
	Items []EnrollmentRequest `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// EnrollmentRequestSpec EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
type EnrollmentRequestSpec struct {
	// Csr csr is a PEM-encoded PKCS#10 certificate signing request.
	Csr string `json:"csr"`

	// DeviceStatus DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
	DeviceStatus *DeviceStatus `json:"deviceStatus,omitempty"`

	// Labels A set of labels that the service will apply to this device when its enrollment is approved
	Labels *map[string]string `json:"labels,omitempty"`
}

// EnrollmentRequestStatus EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.
type EnrollmentRequestStatus struct {
	Approval *EnrollmentRequestApproval `json:"approval,omitempty"`

	// Certificate certificate is a PEM-encoded signed certificate.
	Certificate *string `json:"certificate,omitempty"`

	// Conditions Current state of the EnrollmentRequest.
	Conditions []Condition `json:"conditions"`
}

// EnrollmentService defines model for EnrollmentService.
type EnrollmentService struct {
	Authentication       EnrollmentServiceAuth    `json:"authentication"`
	EnrollmentUiEndpoint string                   `json:"enrollment-ui-endpoint"`
	Service              EnrollmentServiceService `json:"service"`
}

// EnrollmentServiceAuth defines model for EnrollmentServiceAuth.
type EnrollmentServiceAuth struct {
	ClientCertificateData string `json:"client-certificate-data"`
	ClientKeyData         string `json:"client-key-data"`
}

// EnrollmentServiceService defines model for EnrollmentServiceService.
type EnrollmentServiceService struct {
	CertificateAuthorityData string `json:"certificate-authority-data"`
	Server                   string `json:"server"`
}

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// FileOperation The type of operation that was observed on the file.
type FileOperation string

// FileSpec defines model for FileSpec.
type FileSpec struct {
	// Content The plain text (UTF-8) or base64-encoded content of the file.
	Content string `json:"content"`

	// ContentEncoding How the contents are encoded. Must be either "plain" or "base64". Defaults to "plain".
	ContentEncoding *FileSpecContentEncoding `json:"contentEncoding,omitempty"`

	// Group The file's group, specified either as a name or numeric ID. Defaults to "root".
	Group *string `json:"group,omitempty"`

	// Mode The file’s permission mode. You may specify the more familiar octal with a leading zero (e.g., 0644) or as
	// a decimal without a leading zero (e.g., 420). Setuid/setgid/sticky bits are supported. If not specified,
	// the permission mode for files defaults to 0644.
	Mode *int `json:"mode,omitempty"`

	// Path The absolute path to the file on the device. Note that any existing file will be overwritten.
	Path string `json:"path"`

	// User The file's owner, specified either as a name or numeric ID. Defaults to "root".
	User *string `json:"user,omitempty"`
}

// FileSpecContentEncoding How the contents are encoded. Must be either "plain" or "base64". Defaults to "plain".
type FileSpecContentEncoding string

// Fleet Fleet represents a set of devices.
type Fleet struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta `json:"metadata"`

	// Spec FleetSpec is a description of a fleet's target state.
	Spec FleetSpec `json:"spec"`

	// Status FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
	Status *FleetStatus `json:"status,omitempty"`
}

// FleetList FleetList is a list of Fleets.
type FleetList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of Fleets.
	Items []Fleet `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// FleetRolloutStatus defines model for FleetRolloutStatus.
type FleetRolloutStatus struct {
	CurrentBatch *int `json:"currentBatch,omitempty"`
}

// FleetSpec FleetSpec is a description of a fleet's target state.
type FleetSpec struct {
	// RolloutPolicy RolloutPolicy is the rollout policy of the fleet.
	RolloutPolicy *RolloutPolicy `json:"rolloutPolicy,omitempty"`

	// Selector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
	Selector *LabelSelector `json:"selector,omitempty"`
	Template struct {
		// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
		Metadata *ObjectMeta `json:"metadata,omitempty"`
		Spec     DeviceSpec  `json:"spec"`
	} `json:"template"`
}

// FleetStatus FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
type FleetStatus struct {
	// Conditions Current state of the fleet.
	Conditions []Condition `json:"conditions"`

	// DevicesSummary A summary of the devices in the fleet returned when fetching a single Fleet.
	DevicesSummary *DevicesSummary     `json:"devicesSummary,omitempty"`
	Rollout        *FleetRolloutStatus `json:"rollout,omitempty"`
}

// GenericRepoSpec defines model for GenericRepoSpec.
type GenericRepoSpec struct {
	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The (possibly remote) repository URL
	Url string `json:"url"`
}

// GitConfigProviderSpec defines model for GitConfigProviderSpec.
type GitConfigProviderSpec struct {
	GitRef struct {
		// MountPath Path to config in device
		MountPath *string `json:"mountPath,omitempty"`
		Path      string  `json:"path"`

		// Repository The name of the repository resource to use as the sync source
		Repository     string `json:"repository"`
		TargetRevision string `json:"targetRevision"`
	} `json:"gitRef"`

	// Name The name of the config provider
	Name string `json:"name"`
}

// HookAction defines model for HookAction.
type HookAction struct {
	union json.RawMessage
}

// HookAction0 defines model for .
type HookAction0 struct {
	Executable HookActionExecutableSpec `json:"executable"`
}

// HookAction1 defines model for .
type HookAction1 struct {
	Systemd HookActionSystemdSpec `json:"systemd"`
}

// HookActionExecutable defines model for HookActionExecutable.
type HookActionExecutable struct {
	// EnvVars An optional list of KEY=VALUE pairs to set as environment variables for the executable.
	EnvVars *[]string `json:"envVars,omitempty"`

	// Run The command to be executed, including any arguments using standard shell syntax. This field supports multiple commands piped together, as if they were executed under a bash -c context.
	Run string `json:"run"`

	// WorkDir The directory in which the executable will be run from if it is left empty it will run from the users home directory.
	WorkDir *string `json:"workDir,omitempty"`
}

// HookActionExecutableSpec defines model for HookActionExecutableSpec.
type HookActionExecutableSpec struct {
	// EnvVars An optional list of KEY=VALUE pairs to set as environment variables for the executable.
	EnvVars *[]string `json:"envVars,omitempty"`

	// Run The command to be executed, including any arguments using standard shell syntax. This field supports multiple commands piped together, as if they were executed under a bash -c context.
	Run string `json:"run"`

	// Timeout The maximum duration allowed for the action to complete.
	// The duration should be specified as a positive integer
	// followed by a time unit. Supported time units are:
	// - 's' for seconds
	// - 'm' for minutes
	// - 'h' for hours
	// - 'd' for days
	Timeout *string `json:"timeout,omitempty"`

	// WorkDir The directory in which the executable will be run from if it is left empty it will run from the users home directory.
	WorkDir *string `json:"workDir,omitempty"`
}

// HookActionSpec defines model for HookActionSpec.
type HookActionSpec struct {
	// Timeout The maximum duration allowed for the action to complete.
	// The duration should be specified as a positive integer
	// followed by a time unit. Supported time units are:
	// - 's' for seconds
	// - 'm' for minutes
	// - 'h' for hours
	// - 'd' for days
	Timeout *string `json:"timeout,omitempty"`
}

// HookActionSystemdSpec defines model for HookActionSystemdSpec.
type HookActionSystemdSpec struct {
	// Timeout The maximum duration allowed for the action to complete.
	// The duration should be specified as a positive integer
	// followed by a time unit. Supported time units are:
	// - 's' for seconds
	// - 'm' for minutes
	// - 'h' for hours
	// - 'd' for days
	Timeout *string               `json:"timeout,omitempty"`
	Unit    HookActionSystemdUnit `json:"unit"`
}

// HookActionSystemdUnit defines model for HookActionSystemdUnit.
type HookActionSystemdUnit struct {
	// Name The name of the systemd unit on which the specified operations will be performed. This should be the exact name of the unit file, such as example.service. If the name is not populated the name will be auto discovered from the file path.
	Name string `json:"name"`

	// Operations The specific systemd operations to perform on the specified unit.
	Operations []HookActionSystemdUnitOperations `json:"operations"`

	// WorkDir The directory in which the executable will be run from if it is left empty it will run from the users home directory.
	WorkDir *string `json:"workDir,omitempty"`
}

// HookActionSystemdUnitOperations defines model for HookActionSystemdUnit.Operations.
type HookActionSystemdUnitOperations string

// HttpConfig defines model for HttpConfig.
type HttpConfig struct {
	// CaCrt Base64 encoded root CA
	CaCrt *string `json:"ca.crt,omitempty"`

	// Password The password for auth with HTTP transport
	Password *string `json:"password,omitempty"`

	// SkipServerVerification Skip remote server verification
	SkipServerVerification *bool `json:"skipServerVerification,omitempty"`

	// TlsCrt Base64 encoded TLS cert data
	TlsCrt *string `json:"tls.crt,omitempty"`

	// TlsKey Base64 encoded TLS cert key
	TlsKey *string `json:"tls.key,omitempty"`

	// Token The token for auth with HTTP transport
	Token *string `json:"token,omitempty"`

	// Username The username for auth with HTTP transport
	Username *string `json:"username,omitempty"`
}

// HttpConfigProviderSpec defines model for HttpConfigProviderSpec.
type HttpConfigProviderSpec struct {
	HttpRef struct {
		// FilePath The path of the file where the response is stored in the filesystem of the device.
		FilePath string `json:"filePath"`

		// Repository The name of the repository resource to use as the sync source
		Repository string `json:"repository"`

		// Suffix Part of the URL that comes after the base URL. It can include query parameters such as:
		// /path/to/endpoint?query=param
		Suffix *string `json:"suffix,omitempty"`
	} `json:"httpRef"`

	// Name The name of the config provider
	Name string `json:"name"`
}

// HttpRepoSpec defines model for HttpRepoSpec.
type HttpRepoSpec struct {
	HttpConfig HttpConfig `json:"httpConfig"`

	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The HTTP URL to call or clone from
	Url string `json:"url"`

	// ValidationSuffix URL suffix used only for validating access to the repository. Users might use the URL field as a root URL to be used by config sources adding suffixes. This will help with the validation of the http endpoint.
	ValidationSuffix *string `json:"validationSuffix,omitempty"`
}

// ImageApplicationProvider defines model for ImageApplicationProvider.
type ImageApplicationProvider struct {
	// Image Reference to the container image for the application package
	Image string `json:"image"`
}

// InlineConfigProviderSpec defines model for InlineConfigProviderSpec.
type InlineConfigProviderSpec struct {
	Inline []FileSpec `json:"inline"`

	// Name The name of the config provider
	Name string `json:"name"`
}

// KubernetesSecretProviderSpec defines model for KubernetesSecretProviderSpec.
type KubernetesSecretProviderSpec struct {
	// Name The name of the config provider
	Name      string `json:"name"`
	SecretRef struct {
		MountPath string `json:"mountPath"`
		Name      string `json:"name"`
		Namespace string `json:"namespace"`
	} `json:"secretRef"`
}

// LabelSelector A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
type LabelSelector struct {
	MatchExpressions *MatchExpressions  `json:"matchExpressions,omitempty"`
	MatchLabels      *map[string]string `json:"matchLabels,omitempty"`
}

// ListMeta ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
type ListMeta struct {
	// Continue continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
	Continue *string `json:"continue,omitempty"`

	// RemainingItemCount remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
	RemainingItemCount *int64 `json:"remainingItemCount,omitempty"`
}

// MatchExpression defines model for MatchExpression.
type MatchExpression struct {
	Key      string                  `json:"key"`
	Operator MatchExpressionOperator `json:"operator"`
	Values   *[]string               `json:"values,omitempty"`
}

// MatchExpressionOperator defines model for MatchExpression.Operator.
type MatchExpressionOperator string

// MatchExpressions defines model for MatchExpressions.
type MatchExpressions = []MatchExpression

// MemoryResourceMonitorSpec defines model for MemoryResourceMonitorSpec.
type MemoryResourceMonitorSpec = ResourceMonitorSpec

// ObjectMeta ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
type ObjectMeta struct {
	// Annotations Properties set by the service.
	Annotations       *map[string]string `json:"annotations,omitempty"`
	CreationTimestamp *time.Time         `json:"creationTimestamp,omitempty"`
	DeletionTimestamp *time.Time         `json:"deletionTimestamp,omitempty"`

	// Generation A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
	Generation *int64 `json:"generation,omitempty"`

	// Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects.
	Labels *map[string]string `json:"labels,omitempty"`

	// Name name of the object
	Name *string `json:"name,omitempty"`

	// Owner A resource that owns this resource, in "kind/name" format.
	Owner *string `json:"owner,omitempty"`

	// ResourceVersion An opaque string that identifies the server's internal version of an object.
	ResourceVersion *string `json:"resourceVersion,omitempty"`
}

// PatchRequest defines model for PatchRequest.
type PatchRequest = []struct {
	// Op The operation to perform.
	Op PatchRequestOp `json:"op"`

	// Path A JSON Pointer path.
	Path string `json:"path"`

	// Value The value to add or replace.
	Value *interface{} `json:"value,omitempty"`
}

// PatchRequestOp The operation to perform.
type PatchRequestOp string

// Percentage Percentage is the string format representing percentage string.
type Percentage = string

// RenderedApplicationSpec defines model for RenderedApplicationSpec.
type RenderedApplicationSpec struct {
	// EnvVars Environment variable key-value pairs, injected during runtime
	EnvVars *map[string]string `json:"envVars,omitempty"`
	Name    *string            `json:"name,omitempty"`
	union   json.RawMessage
}

// RenderedDeviceSpec defines model for RenderedDeviceSpec.
type RenderedDeviceSpec struct {
	Applications    *[]RenderedApplicationSpec `json:"applications,omitempty"`
	Config          *string                    `json:"config,omitempty"`
	Console         *DeviceConsole             `json:"console,omitempty"`
	Hooks           *DeviceHooksSpec           `json:"hooks,omitempty"`
	Os              *DeviceOSSpec              `json:"os,omitempty"`
	RenderedVersion string                     `json:"renderedVersion"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`

	// UpdatePolicy Specifies the policy for managing device updates, including when updates should be downloaded and applied.
	UpdatePolicy *DeviceUpdatePolicySpec `json:"updatePolicy,omitempty"`
}

// RepoSpecType RepoSpecType is the type of the repository
type RepoSpecType string

// Repository Repository represents a Git repository or an HTTP endpoint
type Repository struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta     `json:"metadata"`
	Spec     RepositorySpec `json:"spec"`

	// Status RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
	Status *RepositoryStatus `json:"status,omitempty"`
}

// RepositoryList RepositoryList is a list of Repositories.
type RepositoryList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of repositories.
	Items []Repository `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// RepositorySpec defines model for RepositorySpec.
type RepositorySpec struct {
	union json.RawMessage
}

// RepositoryStatus RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
type RepositoryStatus struct {
	// Conditions Current state of the repository.
	Conditions []Condition `json:"conditions"`
}

// ResourceAlertRule defines model for ResourceAlertRule.
type ResourceAlertRule struct {
	// Description A human-readable description of the alert.
	Description string `json:"description"`

	// Duration Duration is the time over which the average usage is observed before alerting. Format: positive integer followed by 's' for seconds, 'm' for minutes, 'h' for hours.
	Duration string `json:"duration"`

	// Percentage The percentage of usage that triggers the alert.
	Percentage float32                   `json:"percentage"`
	Severity   ResourceAlertSeverityType `json:"severity"`
}

// ResourceAlertSeverityType defines model for ResourceAlertSeverityType.
type ResourceAlertSeverityType string

// ResourceMonitor defines model for ResourceMonitor.
type ResourceMonitor struct {
	union json.RawMessage
}

// ResourceMonitorSpec defines model for ResourceMonitorSpec.
type ResourceMonitorSpec struct {
	// AlertRules Array of alert rules. Only one alert per severity is allowed.
	AlertRules  []ResourceAlertRule `json:"alertRules"`
	MonitorType string              `json:"monitorType"`

	// SamplingInterval Duration between monitor samples. Format: positive integer followed by 's' for seconds, 'm' for minutes, 'h' for hours.
	SamplingInterval string `json:"samplingInterval"`
}

// ResourceSync ResourceSync represents a reference to one or more files in a repository to sync to resource definitions
type ResourceSync struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta       `json:"metadata"`
	Spec     ResourceSyncSpec `json:"spec"`

	// Status ResourceSyncStatus represents information about the status of a resourcesync
	Status *ResourceSyncStatus `json:"status,omitempty"`
}

// ResourceSyncList defines model for ResourceSyncList.
type ResourceSyncList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of resourcesync.
	Items []ResourceSync `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// ResourceSyncSpec defines model for ResourceSyncSpec.
type ResourceSyncSpec struct {
	// Path The path of a file or directory in the repository. If a directory,
	// the directory should contain only resource definitions with no
	// subdirectories. Each file should contain the definition of one or
	// more resources.
	Path string `json:"path"`

	// Repository The name of the repository resource to use as the sync source
	Repository string `json:"repository"`

	// TargetRevision The desired revision in the repository
	TargetRevision string `json:"targetRevision"`
}

// ResourceSyncStatus ResourceSyncStatus represents information about the status of a resourcesync
type ResourceSyncStatus struct {
	// Conditions Current state of a resourcesync.
	Conditions []Condition `json:"conditions"`

	// ObservedCommit The last commit hash that was synced
	ObservedCommit *string `json:"observedCommit,omitempty"`

	// ObservedGeneration The last generation that was synced
	ObservedGeneration *int64 `json:"observedGeneration,omitempty"`
}

// RolloutDeviceSelection defines model for RolloutDeviceSelection.
type RolloutDeviceSelection struct {
	Strategy string `json:"strategy"`
	union    json.RawMessage
}

// RolloutPolicy RolloutPolicy is the rollout policy of the fleet.
type RolloutPolicy struct {
	// DefaultUpdateTimeout The maximum duration allowed for the action to complete.
	// The duration should be specified as a positive integer
	// followed by a time unit. Supported time units are:
	// - 's' for seconds
	// - 'm' for minutes
	// - 'h' for hours
	// - 'd' for days
	DefaultUpdateTimeout *Duration               `json:"defaultUpdateTimeout,omitempty"`
	DeviceSelection      *RolloutDeviceSelection `json:"deviceSelection,omitempty"`

	// DisruptionAllowance DisruptionAllowance defines the level of allowed disruption when rollout is in progress.
	DisruptionAllowance *DisruptionAllowance `json:"disruptionAllowance,omitempty"`

	// SuccessThreshold Percentage is the string format representing percentage string.
	SuccessThreshold *Percentage `json:"successThreshold,omitempty"`
}

// SortOrder Specifies the sort order.
type SortOrder string

// SshConfig defines model for SshConfig.
type SshConfig struct {
	// PrivateKeyPassphrase The passphrase for sshPrivateKey
	PrivateKeyPassphrase *string `json:"privateKeyPassphrase,omitempty"`

	// SkipServerVerification Skip remote server verification
	SkipServerVerification *bool `json:"skipServerVerification,omitempty"`

	// SshPrivateKey Base64 encoded private SSH key
	SshPrivateKey *string `json:"sshPrivateKey,omitempty"`
}

// SshRepoSpec defines model for SshRepoSpec.
type SshRepoSpec struct {
	SshConfig SshConfig `json:"sshConfig"`

	// Type RepoSpecType is the type of the repository
	Type RepoSpecType `json:"type"`

	// Url The SSH Git repository URL to clone from
	Url string `json:"url"`
}

// Status Status is a return value for calls that don't return other objects.
type Status struct {
	// Message A human-readable description of the status of this operation.
	Message *string `json:"message,omitempty"`

	// Reason A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
	Reason *string `json:"reason,omitempty"`

	// Status Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Status *string `json:"status,omitempty"`
}

// TemplateVersion TemplateVersion represents a version of a template.
type TemplateVersion struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
	Metadata ObjectMeta             `json:"metadata"`
	Spec     TemplateVersionSpec    `json:"spec"`
	Status   *TemplateVersionStatus `json:"status,omitempty"`
}

// TemplateVersionList TemplateVersionList is a list of TemplateVersions.
type TemplateVersionList struct {
	// ApiVersion APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion string `json:"apiVersion"`

	// Items List of TemplateVersions.
	Items []TemplateVersion `json:"items"`

	// Kind Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind string `json:"kind"`

	// Metadata ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
	Metadata ListMeta `json:"metadata"`
}

// TemplateVersionSpec defines model for TemplateVersionSpec.
type TemplateVersionSpec struct {
	// Fleet The fleet whose template this refers to.
	Fleet string `json:"fleet"`
}

// TemplateVersionStatus defines model for TemplateVersionStatus.
type TemplateVersionStatus struct {
	// Applications List of applications.
	Applications *[]ApplicationSpec `json:"applications,omitempty"`

	// Conditions Current state of the device.
	Conditions []Condition `json:"conditions"`

	// Config List of config providers.
	Config *[]ConfigProviderSpec `json:"config,omitempty"`
	Hooks  *DeviceHooksSpec      `json:"hooks,omitempty"`
	Os     *DeviceOSSpec         `json:"os,omitempty"`

	// Resources Array of resource monitor configurations.
	Resources *[]ResourceMonitor `json:"resources,omitempty"`
	Systemd   *struct {
		MatchPatterns *[]string `json:"matchPatterns,omitempty"`
	} `json:"systemd,omitempty"`

	// UpdatePolicy Specifies the policy for managing device updates, including when updates should be downloaded and applied.
	UpdatePolicy *DeviceUpdatePolicySpec `json:"updatePolicy,omitempty"`
	UpdatedAt    *time.Time              `json:"updatedAt,omitempty"`
}

// TimeZone Time zone identifiers follow the IANA format AREA/LOCATION, where AREA represents a continent or ocean, and LOCATION specifies a particular site within that area.  e.g., America/New_York, Europe/Paris. Only unambiguous 3-character time zones are supported ("GMT", "UTC").
type TimeZone = string

// UpdateSchedule Defines the schedule for automatic updates, including timing and optional timeout.
type UpdateSchedule struct {
	// At "Cron expression format for scheduling times. The format is `* * * * *`: - Minutes: `*` matches 0-59. - Hours: `*` matches 0-23. - Day of Month: `*` matches 1-31. - Month: `*` matches 1-12. - Day of Week: `*` matches 0-6."
	// Supported operators: - `*`: Matches any value (e.g., `*` in hours matches every hour). - `-`: Range (e.g., `0-8` for 12 AM to 8 AM). - `,`: List (e.g., `1,12` for 1st and 12th minute). - `/`: Step (e.g., `*/12` for every 12th minute). - Single value (e.g., `8` matches the 8th minute)." example: "* 0-8,16-23 * * *"
	At CronExpression `json:"at"`

	// StartGraceDuration The maximum duration allowed for the action to complete.
	// The duration should be specified as a positive integer
	// followed by a time unit. Supported time units are:
	// - 's' for seconds
	// - 'm' for minutes
	// - 'h' for hours
	// - 'd' for days
	StartGraceDuration *Duration `json:"startGraceDuration,omitempty"`

	// TimeZone Time zone identifiers follow the IANA format AREA/LOCATION, where AREA represents a continent or ocean, and LOCATION specifies a particular site within that area.  e.g., America/New_York, Europe/Paris. Only unambiguous 3-character time zones are supported ("GMT", "UTC").
	TimeZone *TimeZone `json:"timeZone,omitempty"`
}

// AuthValidateParams defines parameters for AuthValidate.
type AuthValidateParams struct {
	Authentication *string `json:"Authentication,omitempty"`
}

// ListCertificateSigningRequestsParams defines parameters for ListCertificateSigningRequests.
type ListCertificateSigningRequestsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ListDevicesParams defines parameters for ListDevices.
type ListDevicesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// StatusFilter A filter to restrict the list of devices by the value of the filtered status key. Defaults to everything.
	StatusFilter *[]string `form:"statusFilter,omitempty" json:"statusFilter,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner A selector to restrict the list of returned objects by their owner. Defaults to everything.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// SummaryOnly A boolean flag to include only a summary of the devices. When set to true, the response will contain only the summary information. Only the 'owner' and 'labelSelector' parameters are supported when 'summaryOnly' is true.
	SummaryOnly *bool `form:"summaryOnly,omitempty" json:"summaryOnly,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// GetRenderedDeviceSpecParams defines parameters for GetRenderedDeviceSpec.
type GetRenderedDeviceSpecParams struct {
	// KnownRenderedVersion The last known renderedVersion
	KnownRenderedVersion *string `form:"knownRenderedVersion,omitempty" json:"knownRenderedVersion,omitempty"`
}

// ListEnrollmentRequestsParams defines parameters for ListEnrollmentRequests.
type ListEnrollmentRequestsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ListFleetsParams defines parameters for ListFleets.
type ListFleetsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Owner A selector to restrict the list of returned objects by their owner. Defaults to everything.
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// AddDevicesCount include the number of devices in each fleet
	AddDevicesCount *bool `form:"addDevicesCount,omitempty" json:"addDevicesCount,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ListTemplateVersionsParams defines parameters for ListTemplateVersions.
type ListTemplateVersionsParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ReadFleetParams defines parameters for ReadFleet.
type ReadFleetParams struct {
	// AddDevicesSummary include a summary of the devices in the fleet
	AddDevicesSummary *bool `form:"addDevicesSummary,omitempty" json:"addDevicesSummary,omitempty"`
}

// ListRepositoriesParams defines parameters for ListRepositories.
type ListRepositoriesParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supports '=', '==', and '!='.(e.g. key1=value1,key2!=value2).
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// ListResourceSyncParams defines parameters for ListResourceSync.
type ListResourceSyncParams struct {
	// Continue An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
	Continue *string `form:"continue,omitempty" json:"continue,omitempty"`

	// LabelSelector A selector to restrict the list of returned objects by their labels. Defaults to everything.
	LabelSelector *string `form:"labelSelector,omitempty" json:"labelSelector,omitempty"`

	// FieldSelector A selector to restrict the list of returned objects by their fields, supporting operators like '=', '==', and '!=' (e.g., "key1=value1,key2!=value2"). For a full list of operators and examples, refer to the documentation.
	FieldSelector *string `form:"fieldSelector,omitempty" json:"fieldSelector,omitempty"`

	// Limit The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`

	// Repository The name of the repository to filter results by.
	Repository *string `form:"repository,omitempty" json:"repository,omitempty"`

	// SortBy Specifies the field to sort by.
	SortBy *string `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// SortOrder Specifies the sort order.
	SortOrder *SortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// CreateCertificateSigningRequestJSONRequestBody defines body for CreateCertificateSigningRequest for application/json ContentType.
type CreateCertificateSigningRequestJSONRequestBody = CertificateSigningRequest

// PatchCertificateSigningRequestApplicationJSONPatchPlusJSONRequestBody defines body for PatchCertificateSigningRequest for application/json-patch+json ContentType.
type PatchCertificateSigningRequestApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceCertificateSigningRequestJSONRequestBody defines body for ReplaceCertificateSigningRequest for application/json ContentType.
type ReplaceCertificateSigningRequestJSONRequestBody = CertificateSigningRequest

// CreateDeviceJSONRequestBody defines body for CreateDevice for application/json ContentType.
type CreateDeviceJSONRequestBody = Device

// PatchDeviceApplicationJSONPatchPlusJSONRequestBody defines body for PatchDevice for application/json-patch+json ContentType.
type PatchDeviceApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceDeviceJSONRequestBody defines body for ReplaceDevice for application/json ContentType.
type ReplaceDeviceJSONRequestBody = Device

// DecommissionDeviceJSONRequestBody defines body for DecommissionDevice for application/json ContentType.
type DecommissionDeviceJSONRequestBody = DeviceDecommission

// ReplaceDeviceStatusJSONRequestBody defines body for ReplaceDeviceStatus for application/json ContentType.
type ReplaceDeviceStatusJSONRequestBody = Device

// CreateEnrollmentRequestJSONRequestBody defines body for CreateEnrollmentRequest for application/json ContentType.
type CreateEnrollmentRequestJSONRequestBody = EnrollmentRequest

// ReplaceEnrollmentRequestJSONRequestBody defines body for ReplaceEnrollmentRequest for application/json ContentType.
type ReplaceEnrollmentRequestJSONRequestBody = EnrollmentRequest

// ApproveEnrollmentRequestJSONRequestBody defines body for ApproveEnrollmentRequest for application/json ContentType.
type ApproveEnrollmentRequestJSONRequestBody = EnrollmentRequestApproval

// ReplaceEnrollmentRequestStatusJSONRequestBody defines body for ReplaceEnrollmentRequestStatus for application/json ContentType.
type ReplaceEnrollmentRequestStatusJSONRequestBody = EnrollmentRequest

// CreateFleetJSONRequestBody defines body for CreateFleet for application/json ContentType.
type CreateFleetJSONRequestBody = Fleet

// PatchFleetApplicationJSONPatchPlusJSONRequestBody defines body for PatchFleet for application/json-patch+json ContentType.
type PatchFleetApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceFleetJSONRequestBody defines body for ReplaceFleet for application/json ContentType.
type ReplaceFleetJSONRequestBody = Fleet

// ReplaceFleetStatusJSONRequestBody defines body for ReplaceFleetStatus for application/json ContentType.
type ReplaceFleetStatusJSONRequestBody = Fleet

// CreateRepositoryJSONRequestBody defines body for CreateRepository for application/json ContentType.
type CreateRepositoryJSONRequestBody = Repository

// PatchRepositoryApplicationJSONPatchPlusJSONRequestBody defines body for PatchRepository for application/json-patch+json ContentType.
type PatchRepositoryApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceRepositoryJSONRequestBody defines body for ReplaceRepository for application/json ContentType.
type ReplaceRepositoryJSONRequestBody = Repository

// CreateResourceSyncJSONRequestBody defines body for CreateResourceSync for application/json ContentType.
type CreateResourceSyncJSONRequestBody = ResourceSync

// PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody defines body for PatchResourceSync for application/json-patch+json ContentType.
type PatchResourceSyncApplicationJSONPatchPlusJSONRequestBody = PatchRequest

// ReplaceResourceSyncJSONRequestBody defines body for ReplaceResourceSync for application/json ContentType.
type ReplaceResourceSyncJSONRequestBody = ResourceSync

// AsImageApplicationProvider returns the union data inside the ApplicationSpec as a ImageApplicationProvider
func (t ApplicationSpec) AsImageApplicationProvider() (ImageApplicationProvider, error) {
	var body ImageApplicationProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImageApplicationProvider overwrites any union data inside the ApplicationSpec as the provided ImageApplicationProvider
func (t *ApplicationSpec) FromImageApplicationProvider(v ImageApplicationProvider) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImageApplicationProvider performs a merge with any union data inside the ApplicationSpec, using the provided ImageApplicationProvider
func (t *ApplicationSpec) MergeImageApplicationProvider(v ImageApplicationProvider) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ApplicationSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.EnvVars != nil {
		object["envVars"], err = json.Marshal(t.EnvVars)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'envVars': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *ApplicationSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["envVars"]; found {
		err = json.Unmarshal(raw, &t.EnvVars)
		if err != nil {
			return fmt.Errorf("error reading 'envVars': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	return err
}

// AsPercentage returns the union data inside the Batch_Limit as a Percentage
func (t Batch_Limit) AsPercentage() (Percentage, error) {
	var body Percentage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPercentage overwrites any union data inside the Batch_Limit as the provided Percentage
func (t *Batch_Limit) FromPercentage(v Percentage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePercentage performs a merge with any union data inside the Batch_Limit, using the provided Percentage
func (t *Batch_Limit) MergePercentage(v Percentage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsBatchLimit1 returns the union data inside the Batch_Limit as a BatchLimit1
func (t Batch_Limit) AsBatchLimit1() (BatchLimit1, error) {
	var body BatchLimit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBatchLimit1 overwrites any union data inside the Batch_Limit as the provided BatchLimit1
func (t *Batch_Limit) FromBatchLimit1(v BatchLimit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBatchLimit1 performs a merge with any union data inside the Batch_Limit, using the provided BatchLimit1
func (t *Batch_Limit) MergeBatchLimit1(v BatchLimit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Batch_Limit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Batch_Limit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGitConfigProviderSpec returns the union data inside the ConfigProviderSpec as a GitConfigProviderSpec
func (t ConfigProviderSpec) AsGitConfigProviderSpec() (GitConfigProviderSpec, error) {
	var body GitConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitConfigProviderSpec overwrites any union data inside the ConfigProviderSpec as the provided GitConfigProviderSpec
func (t *ConfigProviderSpec) FromGitConfigProviderSpec(v GitConfigProviderSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitConfigProviderSpec performs a merge with any union data inside the ConfigProviderSpec, using the provided GitConfigProviderSpec
func (t *ConfigProviderSpec) MergeGitConfigProviderSpec(v GitConfigProviderSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsKubernetesSecretProviderSpec returns the union data inside the ConfigProviderSpec as a KubernetesSecretProviderSpec
func (t ConfigProviderSpec) AsKubernetesSecretProviderSpec() (KubernetesSecretProviderSpec, error) {
	var body KubernetesSecretProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromKubernetesSecretProviderSpec overwrites any union data inside the ConfigProviderSpec as the provided KubernetesSecretProviderSpec
func (t *ConfigProviderSpec) FromKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeKubernetesSecretProviderSpec performs a merge with any union data inside the ConfigProviderSpec, using the provided KubernetesSecretProviderSpec
func (t *ConfigProviderSpec) MergeKubernetesSecretProviderSpec(v KubernetesSecretProviderSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInlineConfigProviderSpec returns the union data inside the ConfigProviderSpec as a InlineConfigProviderSpec
func (t ConfigProviderSpec) AsInlineConfigProviderSpec() (InlineConfigProviderSpec, error) {
	var body InlineConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInlineConfigProviderSpec overwrites any union data inside the ConfigProviderSpec as the provided InlineConfigProviderSpec
func (t *ConfigProviderSpec) FromInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInlineConfigProviderSpec performs a merge with any union data inside the ConfigProviderSpec, using the provided InlineConfigProviderSpec
func (t *ConfigProviderSpec) MergeInlineConfigProviderSpec(v InlineConfigProviderSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpConfigProviderSpec returns the union data inside the ConfigProviderSpec as a HttpConfigProviderSpec
func (t ConfigProviderSpec) AsHttpConfigProviderSpec() (HttpConfigProviderSpec, error) {
	var body HttpConfigProviderSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpConfigProviderSpec overwrites any union data inside the ConfigProviderSpec as the provided HttpConfigProviderSpec
func (t *ConfigProviderSpec) FromHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpConfigProviderSpec performs a merge with any union data inside the ConfigProviderSpec, using the provided HttpConfigProviderSpec
func (t *ConfigProviderSpec) MergeHttpConfigProviderSpec(v HttpConfigProviderSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfigProviderSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfigProviderSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsHookAction0 returns the union data inside the HookAction as a HookAction0
func (t HookAction) AsHookAction0() (HookAction0, error) {
	var body HookAction0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHookAction0 overwrites any union data inside the HookAction as the provided HookAction0
func (t *HookAction) FromHookAction0(v HookAction0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHookAction0 performs a merge with any union data inside the HookAction, using the provided HookAction0
func (t *HookAction) MergeHookAction0(v HookAction0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHookAction1 returns the union data inside the HookAction as a HookAction1
func (t HookAction) AsHookAction1() (HookAction1, error) {
	var body HookAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHookAction1 overwrites any union data inside the HookAction as the provided HookAction1
func (t *HookAction) FromHookAction1(v HookAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHookAction1 performs a merge with any union data inside the HookAction, using the provided HookAction1
func (t *HookAction) MergeHookAction1(v HookAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t HookAction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *HookAction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsImageApplicationProvider returns the union data inside the RenderedApplicationSpec as a ImageApplicationProvider
func (t RenderedApplicationSpec) AsImageApplicationProvider() (ImageApplicationProvider, error) {
	var body ImageApplicationProvider
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromImageApplicationProvider overwrites any union data inside the RenderedApplicationSpec as the provided ImageApplicationProvider
func (t *RenderedApplicationSpec) FromImageApplicationProvider(v ImageApplicationProvider) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeImageApplicationProvider performs a merge with any union data inside the RenderedApplicationSpec, using the provided ImageApplicationProvider
func (t *RenderedApplicationSpec) MergeImageApplicationProvider(v ImageApplicationProvider) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RenderedApplicationSpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.EnvVars != nil {
		object["envVars"], err = json.Marshal(t.EnvVars)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'envVars': %w", err)
		}
	}

	if t.Name != nil {
		object["name"], err = json.Marshal(t.Name)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'name': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *RenderedApplicationSpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["envVars"]; found {
		err = json.Unmarshal(raw, &t.EnvVars)
		if err != nil {
			return fmt.Errorf("error reading 'envVars': %w", err)
		}
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &t.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
	}

	return err
}

// AsGenericRepoSpec returns the union data inside the RepositorySpec as a GenericRepoSpec
func (t RepositorySpec) AsGenericRepoSpec() (GenericRepoSpec, error) {
	var body GenericRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenericRepoSpec overwrites any union data inside the RepositorySpec as the provided GenericRepoSpec
func (t *RepositorySpec) FromGenericRepoSpec(v GenericRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenericRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided GenericRepoSpec
func (t *RepositorySpec) MergeGenericRepoSpec(v GenericRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHttpRepoSpec returns the union data inside the RepositorySpec as a HttpRepoSpec
func (t RepositorySpec) AsHttpRepoSpec() (HttpRepoSpec, error) {
	var body HttpRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHttpRepoSpec overwrites any union data inside the RepositorySpec as the provided HttpRepoSpec
func (t *RepositorySpec) FromHttpRepoSpec(v HttpRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHttpRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided HttpRepoSpec
func (t *RepositorySpec) MergeHttpRepoSpec(v HttpRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSshRepoSpec returns the union data inside the RepositorySpec as a SshRepoSpec
func (t RepositorySpec) AsSshRepoSpec() (SshRepoSpec, error) {
	var body SshRepoSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSshRepoSpec overwrites any union data inside the RepositorySpec as the provided SshRepoSpec
func (t *RepositorySpec) FromSshRepoSpec(v SshRepoSpec) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSshRepoSpec performs a merge with any union data inside the RepositorySpec, using the provided SshRepoSpec
func (t *RepositorySpec) MergeSshRepoSpec(v SshRepoSpec) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RepositorySpec) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RepositorySpec) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCPUResourceMonitorSpec returns the union data inside the ResourceMonitor as a CPUResourceMonitorSpec
func (t ResourceMonitor) AsCPUResourceMonitorSpec() (CPUResourceMonitorSpec, error) {
	var body CPUResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCPUResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided CPUResourceMonitorSpec
func (t *ResourceMonitor) FromCPUResourceMonitorSpec(v CPUResourceMonitorSpec) error {
	v.MonitorType = "CPU"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCPUResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided CPUResourceMonitorSpec
func (t *ResourceMonitor) MergeCPUResourceMonitorSpec(v CPUResourceMonitorSpec) error {
	v.MonitorType = "CPU"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMemoryResourceMonitorSpec returns the union data inside the ResourceMonitor as a MemoryResourceMonitorSpec
func (t ResourceMonitor) AsMemoryResourceMonitorSpec() (MemoryResourceMonitorSpec, error) {
	var body MemoryResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMemoryResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided MemoryResourceMonitorSpec
func (t *ResourceMonitor) FromMemoryResourceMonitorSpec(v MemoryResourceMonitorSpec) error {
	v.MonitorType = "Memory"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMemoryResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided MemoryResourceMonitorSpec
func (t *ResourceMonitor) MergeMemoryResourceMonitorSpec(v MemoryResourceMonitorSpec) error {
	v.MonitorType = "Memory"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiskResourceMonitorSpec returns the union data inside the ResourceMonitor as a DiskResourceMonitorSpec
func (t ResourceMonitor) AsDiskResourceMonitorSpec() (DiskResourceMonitorSpec, error) {
	var body DiskResourceMonitorSpec
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiskResourceMonitorSpec overwrites any union data inside the ResourceMonitor as the provided DiskResourceMonitorSpec
func (t *ResourceMonitor) FromDiskResourceMonitorSpec(v DiskResourceMonitorSpec) error {
	v.MonitorType = "Disk"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiskResourceMonitorSpec performs a merge with any union data inside the ResourceMonitor, using the provided DiskResourceMonitorSpec
func (t *ResourceMonitor) MergeDiskResourceMonitorSpec(v DiskResourceMonitorSpec) error {
	v.MonitorType = "Disk"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResourceMonitor) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"monitorType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ResourceMonitor) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "CPU":
		return t.AsCPUResourceMonitorSpec()
	case "Disk":
		return t.AsDiskResourceMonitorSpec()
	case "Memory":
		return t.AsMemoryResourceMonitorSpec()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ResourceMonitor) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResourceMonitor) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBatchSequence returns the union data inside the RolloutDeviceSelection as a BatchSequence
func (t RolloutDeviceSelection) AsBatchSequence() (BatchSequence, error) {
	var body BatchSequence
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBatchSequence overwrites any union data inside the RolloutDeviceSelection as the provided BatchSequence
func (t *RolloutDeviceSelection) FromBatchSequence(v BatchSequence) error {
	t.Strategy = "BatchSequence"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBatchSequence performs a merge with any union data inside the RolloutDeviceSelection, using the provided BatchSequence
func (t *RolloutDeviceSelection) MergeBatchSequence(v BatchSequence) error {
	t.Strategy = "BatchSequence"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RolloutDeviceSelection) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"strategy"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RolloutDeviceSelection) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "BatchSequence":
		return t.AsBatchSequence()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RolloutDeviceSelection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["strategy"], err = json.Marshal(t.Strategy)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'strategy': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *RolloutDeviceSelection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["strategy"]; found {
		err = json.Unmarshal(raw, &t.Strategy)
		if err != nil {
			return fmt.Errorf("error reading 'strategy': %w", err)
		}
	}

	return err
}
