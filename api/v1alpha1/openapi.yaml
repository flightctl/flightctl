openapi: 3.0.1
info:
  title: Open Device Management API
  version: undefined
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: /
paths:
  /api/v1/token/request:
    get:
      description: token request
      operationId: tokenRequest
      responses:
        "301":
          description: Redirect
          headers:
            Location:
              schema:
                type: string
        "418":
          description: Auth not configured
  /api/v1/token/validate:
    get:
      description: token validation
      operationId: tokenValidate
      parameters:
        - in: header
          name: Authentication
          schema:
            type: string
      responses:
        "200":
          description: Token valid
        "401":
          description: Token invalid
        "418":
          description: Auth not configured
  /api/v1/resourcesyncs:
    get:
      tags:
        - resourcesync
      description: list resourcesync
      operationId: listResourceSync
      parameters:
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSyncList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - resourcesync
      description: create a resourcesync
      operationId: createResourceSync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceSync'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - resourcesync
      description: delete a collection of ResourceSync
      operationId: deleteResourceSyncs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/resourcesyncs/{name}:
    get:
      tags:
        - resourcesync
      description: read the specified resourcesync
      operationId: readResourceSync
      parameters:
        - name: name
          in: path
          description: name of the resourcesync
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - resourcesync
      description: replace the specified resourcesync
      operationId: replaceResourceSync
      parameters:
        - name: name
          in: path
          description: name of the resourcesync
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceSync'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - resourcesync
      description: Patches the specified resourcesync
      operationId: patchResourceSync
      parameters:
        - name: name
          in: path
          description: name of the resourcesync
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - resourcesync
      description: delete a resourcesync
      operationId: deleteResourceSync
      parameters:
        - name: name
          in: path
          description: name of the resourcesync
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceSync'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/repositories:
    get:
      tags:
        - repository
      description: list repositories
      operationId: listRepositories
      parameters:
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - repository
      description: create a repository
      operationId: createRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - repository
      description: delete a collection of Repositories
      operationId: deleteRepositories
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/repositories/{name}:
    get:
      tags:
        - repository
      description: read the specified repository
      operationId: readRepository
      parameters:
        - name: name
          in: path
          description: name of the repository
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - repository
      description: replace the specified repository
      operationId: replaceRepository
      parameters:
        - name: name
          in: path
          description: name of the repository
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - repository
      description: delete a repository
      operationId: deleteRepository
      parameters:
        - name: name
          in: path
          description: name of the repository
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - repository
      description: Patches the specified repository
      operationId: patchRepository
      parameters:
        - name: name
          in: path
          description: name of the repository
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/devices:
    get:
      tags:
        - device
      description: list Devices
      operationId: listDevices
      parameters:
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: statusFilter
          in: query
          description: A filter to restrict the list of devices by the value of the filtered status key. Defaults to everything.
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
        - name: owner
          in: query
          description: A selector to restrict the list of returned objects by their owner. Defaults to everything.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - device
      description: create a Device
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - device
      description: delete a collection of Devices
      operationId: deleteDevices
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/devices/{name}:
    get:
      tags:
        - device
      description: read the specified Device
      operationId: readDevice
      parameters:
        - name: name
          in: path
          description: unique name of the Device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - device
      description: replace the specified Device
      operationId: replaceDevice
      parameters:
        - name: name
          in: path
          description: name of the Device
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - device
      description: delete a Device
      operationId: deleteDevice
      parameters:
        - name: name
          in: path
          description: name of the Device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - device
      description: Patches the specified device
      operationId: patchDevice
      parameters:
        - name: name
          in: path
          description: name of the device
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/devices/{name}/status:
    get:
      tags:
        - device
      description: read status of the specified Device
      operationId: readDeviceStatus
      parameters:
        - name: name
          in: path
          description: name of the Device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - device
      description: replace status of the specified Device
      operationId: replaceDeviceStatus
      parameters:
        - name: name
          in: path
          description: name of the Device
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/devices/{name}/console:
    get:
      tags:
        - device
      description: Request a console connection
      operationId: requestConsole
      parameters:
        - name: name
          in: path
          description: unique name of the Device
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceConsole'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/devices/{name}/rendered:
    get:
      tags:
        - device
      description: get the full specification for the specified device
      operationId: getRenderedDeviceSpec
      parameters:
        - name: name
          in: path
          description: Name of the device
          required: true
          schema:
            type: string
        - name: knownRenderedVersion
          in: query
          description: The last known renderedVersion
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RenderedDeviceSpec'
        "204":
          description: No content
          content: {}
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/enrollmentrequests:
    get:
      tags:
        - enrollmentrequest
      description: list Enrollment Requests
      operationId: listEnrollmentRequests
      parameters:
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequestList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - enrollmentrequest
      description: request enrollment of a Device
      operationId: createEnrollmentRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "208":
          description: Already Reported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - enrollmentrequest
      description: delete a collection of Enrollments
      operationId: deleteEnrollmentRequests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/enrollmentrequests/{name}:
    get:
      tags:
        - enrollmentrequest
      description: read the specified Enrollment
      operationId: readEnrollmentRequest
      parameters:
        - name: name
          in: path
          description: the fingerprint of the EnrollmentRequest
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - enrollmentrequest
      description: replace the specified Enrollment Request
      operationId: replaceEnrollmentRequest
      parameters:
        - name: name
          in: path
          description: name of the EnrollmentRequest
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - enrollmentrequest
      description: delete a Enrollment Request
      operationId: deleteEnrollmentRequest
      parameters:
        - name: name
          in: path
          description: name of the Enrollment Request
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/enrollmentrequests/{name}/status:
    get:
      tags:
        - enrollmentrequest
      description: read status of the specified EnrollmentRequest
      operationId: readEnrollmentRequestStatus
      parameters:
        - name: name
          in: path
          description: name of the EnrollmentRequest
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - enrollmentrequest
      description: replace status of the specified EnrollmentRequest
      operationId: replaceEnrollmentRequestStatus
      parameters:
        - name: name
          in: path
          description: name of the EnrollmentRequest
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequest'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/enrollmentrequests/{name}/approval:
    post:
      tags:
        - enrollmentrequest
      description: create approval of the specified EnrollmentRequest
      operationId: createEnrollmentRequestApproval
      parameters:
        - name: name
          in: path
          description: name of the EnrollmentRequest
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentRequestApproval'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnrollmentRequestApproval'
        "422":
          description: UnprocessableEntity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/fleets:
    get:
      tags:
        - fleet
      description: list Fleets
      operationId: listFleets
      parameters:
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
        - name: owner
          in: query
          description: A selector to restrict the list of returned objects by their owner. Defaults to everything.
          required: false
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FleetList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - fleet
      description: create a Fleet
      operationId: createFleet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fleet'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: StatusConflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - fleet
      description: delete a collection of Fleets
      operationId: deleteFleets
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/fleets/{name}:
    get:
      tags:
        - fleet
      description: read the specified Fleet
      operationId: readFleet
      parameters:
        - name: name
          in: path
          description: unique name of the Fleet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - fleet
      description: replace the specified Fleet
      operationId: replaceFleet
      parameters:
        - name: name
          in: path
          description: name of the Fleet
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fleet'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - fleet
      description: Patches the specified fleet
      operationId: patchFleet
      parameters:
        - name: name
          in: path
          description: name of the fleet
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - fleet
      description: delete a Fleet
      operationId: deleteFleet
      parameters:
        - name: name
          in: path
          description: name of the Fleet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/fleets/{name}/status:
    get:
      tags:
        - fleet
      description: read status of the specified Fleet
      operationId: readFleetStatus
      parameters:
        - name: name
          in: path
          description: name of the Fleet
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - fleet
      description: replace status of the specified Fleet
      operationId: replaceFleetStatus
      parameters:
        - name: name
          in: path
          description: name of the Fleet
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fleet'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/fleets/{fleet}/templateversions:
    get:
      tags:
        - templateversion
      description: list template versions
      operationId: listTemplateVersions
      parameters:
        - name: fleet
          in: path
          description: The owner of the template versions.
          required: true
          schema:
            type: string
        - name: continue
          in: query
          description: An optional parameter to query more results from the server. The value of the paramter must match the value of the 'continue' field in the previous list response.
          required: false
          schema:
            type: string
        - name: labelSelector
          in: query
          description: A selector to restrict the list of returned objects by their labels. Defaults to everything.
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of results returned in the list response. The server will set the 'continue' field in the list response if more results exist. The continue value may then be specified as parameter in a subsequent query.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateVersionList'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - templateversion
      description: delete a collection of template versions
      operationId: deleteTemplateVersions
      parameters:
        - name: fleet
          in: path
          description: The owner of the template versions.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/fleets/{fleet}/templateversions/{name}:
    get:
      tags:
        - templateversion
      description: read the specified template version
      operationId: readTemplateVersion
      parameters:
        - name: fleet
          in: path
          description: The owner of the template version.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: Name of the template version.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateVersion'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - templateversion
      description: delete a template version
      operationId: deleteTemplateVersion
      parameters:
        - name: fleet
          in: path
          description: The owner of the template version.
          required: true
          schema:
            type: string
        - name: name
          in: path
          description: name of the template version.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateVersion'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: NotFound
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    PatchRequest:
      type: array
      items:
        type: object
        additionalProperties: false
        required:
          - op
          - path
        properties:
          path:
            description: A JSON Pointer path.
            type: string
          value:
            description: The value to add or replace.
          op:
            description: The operation to perform.
            type: string
            enum:
              - add
              - replace
              - remove
    Repository:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/RepositorySpec'
        status:
          $ref: '#/components/schemas/RepositoryStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      description: Repository represents a Git repository or an HTTP endpoint
    HttpConfig:
      type: object
      additionalProperties: false
      properties:
        username:
          type: string
          description: 'The username for auth with HTTP transport'
        password:
          type: string
          description: 'The password for auth with HTTP transport'
          format: password
        tls.crt:
          type: string
          description: 'Base64 encoded TLS cert data'
          format: password
        tls.key:
          type: string
          description: 'Base64 encoded TLS cert key'
          format: password
        ca.crt:
          type: string
          description: 'Base64 encoded root CA'
        skipServerVerification:
          type: boolean
          description: 'Skip remote server verification'
        token:
          type: string
          description: 'The token for auth with HTTP transport'
          format: password
    HttpRepoSpec:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: 'The HTTP URL to call or clone from'
        type:
          $ref: "#/components/schemas/RepoSpecType"
        httpConfig:
          $ref: "#/components/schemas/HttpConfig"
      required:
        - url
        - type
        - httpConfig
    SshConfig:
      type: object
      additionalProperties: false
      properties:
        sshPrivateKey:
          type: string
          description: 'Base64 encoded private SSH key'
          format: password
        privateKeyPassphrase:
          type: string
          description: 'The passphrase for sshPrivateKey'
          format: password
        skipServerVerification:
          type: boolean
          description: 'Skip remote server verification'
    SshRepoSpec:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: 'The SSH Git repository URL to clone from'
        type:
          $ref: "#/components/schemas/RepoSpecType"
        sshConfig:
          $ref: "#/components/schemas/SshConfig"
      required:
        - url
        - type
        - sshConfig
    GenericRepoSpec:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: 'The (possibly remote) repository URL'
        type:
          $ref: "#/components/schemas/RepoSpecType"
      required:
        - url
        - type
    RepositorySpec:
      type: object
      oneOf:
        - $ref: "#/components/schemas/GenericRepoSpec"
        - $ref: "#/components/schemas/HttpRepoSpec"
        - $ref: "#/components/schemas/SshRepoSpec"
    RepositoryStatus:
      type: object
      properties:
        conditions:
          type: array
          description: 'Current state of the repository.'
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - conditions
      description: RepositoryStatus represents information about the status of a repository. Status may trail the actual state of a repository.
    RepositoryList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of repositories.'
          items:
            $ref: '#/components/schemas/Repository'
      description: RepositoryList is a list of Repositories.
      required:
        - apiVersion
        - kind
        - metadata
        - items
    RepoSpecType:
      type: string
      description: 'RepoSpecType is the type of the repository'
      enum:
        - git
        - http
    Device:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/DeviceSpec'
        status:
          $ref: '#/components/schemas/DeviceStatus'
      required:
        - apiVersion
        - kind
        - metadata
      description: Device represents a physical device.
    DeviceConsole:
      type: object
      properties:
        # TODO: when migrating to ws, this should be a ws url instead of gRPCEndpoint
        #wsURL:
        #  type: string
        #  description: 'The URL to connect to the console through a websocket'
        gRPCEndpoint:
          type: string
        sessionID:
          type: string
      required:
        - gRPCEndpoint
        - sessionID
    GenericConfigSpec:
      type: object
      properties:
        configType:
          type: string
        name:
          type: string
      discriminator:
        propertyName: configType
      required:
        - configType
        - name
    GitConfigProviderSpec:
      allOf:
        - $ref: '#/components/schemas/GenericConfigSpec'
        - type: object
          properties:
            gitRef:
              type: object
              properties:
                repository:
                  type: string
                  description: |
                    The name of the repository resource to use as the sync source
                targetRevision:
                  type: string
                path:
                  type: string
              required:
                - repository
                - targetRevision
                - path
          required:
          - gitRef
    KubernetesSecretProviderSpec:
      allOf:
        - $ref: '#/components/schemas/GenericConfigSpec'
        - type: object
          properties:
            secretRef:
              type: object
              properties:
                name:
                  type: string
                namespace:
                  type: string
                mountPath:
                  type: string
              required:
                - name
                - namespace
                - mountPath
          required:
          - secretRef
    InlineConfigProviderSpec:
      allOf:
        - $ref: '#/components/schemas/GenericConfigSpec'
        - type: object
          properties:
            inline:
              type: object
              additionalProperties: true
          required:
          - inline
    HttpConfigProviderSpec:
      allOf:
        - $ref: '#/components/schemas/GenericConfigSpec'
        - type: object
          properties:
            httpRef:
              type: object
              properties:
                repository:
                  type: string
                  description: |
                    The name of the repository resource to use as the sync source
                suffix:
                  type: string
                  description: |
                    Part of the URL that comes after the base URL. It can include query parameters such as:
                    /path/to/endpoint?query=param
                filePath:
                  type: string
                  description: |
                    The path of the file where the response is stored in the filesystem of the device.
              required:
              - repository
              - filePath
          required:
          - httpRef
    ResourceMonitor:
      oneOf:
        - $ref: '#/components/schemas/CPUResourceMonitorSpec'
        - $ref: '#/components/schemas/MemoryResourceMonitorSpec'
        - $ref: '#/components/schemas/DiskResourceMonitorSpec'
      discriminator:
        propertyName: monitorType
        mapping:
          CPU: '#/components/schemas/CPUResourceMonitorSpec'
          Memory: '#/components/schemas/MemoryResourceMonitorSpec'
          Disk: '#/components/schemas/DiskResourceMonitorSpec'
    ResourceMonitorSpec:
      type: object
      properties:
        monitorType:
          type: string
        alertRules:
          type: array
          items:
            $ref: '#/components/schemas/ResourceAlertRule'
          description: "Array of alert rules. Only one alert per severity is allowed."
        samplingInterval:
          type: string
          pattern: '^[1-9]\d*[smhd]$'
          description: "Duration between monitor samples. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days. Must be a positive integer."
      required:
        - monitorType
        - alertRules
        - samplingInterval
    CPUResourceMonitorSpec:
      allOf:
        - $ref: '#/components/schemas/ResourceMonitorSpec'
          type: object
          description: "Specification for monitoring CPU resource load."
    MemoryResourceMonitorSpec:
      allOf:
        - $ref: '#/components/schemas/ResourceMonitorSpec'
          type: object
          description: "Specification for monitoring Memory resource usage."
    DiskResourceMonitorSpec:
      allOf:
        - $ref: '#/components/schemas/ResourceMonitorSpec'
        - type: object
          description: "Specification for monitoring disk usage."
          required:
            - path
          properties:
            path:
              type: string
              description: "The directory path to monitor for disk usage."
    CustomResourceMonitorSpec:
      allOf:
        - $ref: '#/components/schemas/ResourceMonitorSpec'
        - type: object
          description: "Specification for monitoring custom resources."
    ResourceAlertRule:
      type: object
      properties:
        severity:
          $ref: '#/components/schemas/ResourceAlertSeverityType'
          description: "Severity of the alert."
        duration:
          type: string
          pattern: '^\d+[smhd]$'
          description: "Duration is the time over which the average usage is observed before alerting. Format: number followed by 's' for seconds, 'm' for minutes, 'h' for hours, 'd' for days."
        percentage:
          type: number
          description: 'The percentage of usage that triggers the alert.'
        description:
          type: string
          description: 'A human-readable description of the alert.'
      required:
        - severity
        - duration
        - percentage
        - description
    ResourceAlertSeverityType:
      type: string
      enum:
        - "Warning"
        - "Critical"
        - "Info"
      x-enum-varnames:
        - "ResourceAlertSeverityTypeWarning"
        - "ResourceAlertSeverityTypeCritical"
        - "ResourceAlertSeverityTypeInfo"
    DeviceList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of Devices.'
          items:
            $ref: '#/components/schemas/Device'
      description: DeviceList is a list of Devices.
      required:
        - apiVersion
        - kind
        - metadata
        - items
    DeviceOSSpec:
      type: object
      properties:
        image:
          type: string
          description: 'ostree image name or URL.'
      required:
        - image
    DeviceStatus:
      type: object
      required:
        - conditions
        - systemInfo
        - applications
        - resources
        - integrity
        - config
        - os
        - updated
        - summary
        - updatedAt
      properties:
        conditions:
          type: array
          description: "Conditions represent the observations of a the current state of a device."
          items:
            $ref: '#/components/schemas/Condition'
        systemInfo:
          $ref: "#/components/schemas/DeviceSystemInfo"
        applications:
          $ref: "#/components/schemas/DeviceApplicationsStatus"
          description: "Current status of the system applications."
        resources:
          $ref: "#/components/schemas/DeviceResourceStatus"
          description: "Current status of the resources of the device."
        integrity:
          $ref: "#/components/schemas/DeviceIntegrityStatus"
          description: "Current status of the integrity of the device."
        config:
          $ref: "#/components/schemas/DeviceConfigStatus"
          description: "Current status of the device config."
        os:
          $ref: "#/components/schemas/DeviceOSStatus"
          description: "Current status of the device OS."
        updated:
          $ref: "#/components/schemas/DeviceUpdatedStatus"
          description: "Current status of the device update."
        summary:
          $ref: "#/components/schemas/DeviceSummaryStatus"
          description: "Summary status of the device."
        updatedAt:
          type: string
          format: date-time
      description: "DeviceStatus represents information about the status of a device. Status may trail the actual state of a device."
    DeviceSystemInfo:
      required:
        - architecture
        - bootID
        - operatingSystem
      type: object
      properties:
        architecture:
          type: string
          description: The Architecture reported by the device.
        bootID:
          type: string
          description: Boot ID reported by the device.
        operatingSystem:
          type: string
          description: The Operating System reported by the device.
      description: "DeviceSystemInfo is a set of ids/uuids to uniquely identify the device."
    DeviceApplicationsStatus:
      type: object
      required:
        - data
        - summary
      properties:
        data:
          type: object
          description: "Map of system application statuses."
          additionalProperties:
            $ref: "#/components/schemas/ApplicationStatus"
        summary:
          $ref: "#/components/schemas/ApplicationsSummaryStatus"
          description: "Summary status of system applications."
    ApplicationStatus:
      type: object
      required:
        - name
        - ready
        - restarts
        - status
      properties:
        name:
          type: string
          description: "Human readable name of the application."
        ready:
          type: string
          description: "The number of containers which are ready in the application."
        restarts:
          type: integer
          description: "Number of restarts observed for the application."
        status:
          $ref: "#/components/schemas/ApplicationStatusType"
          description: "Status of the application."
    ApplicationsSummaryStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/ApplicationsSummaryStatusType"
          description: "Summary status of the system applications."
        info:
          type: string
          description: "Human readable information detailing the last system application transition."
    ApplicationsSummaryStatusType:
      type: string
      enum:
        - "Healthy"
        - "Degraded"
        - "Error"
        - "Unknown"
      x-enum-varnames:
        - "ApplicationsSummaryStatusHealthy"
        - "ApplicationsSummaryStatusDegraded"
        - "ApplicationsSummaryStatusError"
        - "ApplicationsSummaryStatusUnknown"
    ApplicationStatusType:
      type: string
      enum:
        - "Preparing"
        - "Starting"
        - "Running"
        - "Error"
        - "Unknown"
        - "Completed"
      x-enum-varnames:
        - "ApplicationStatusPreparing"
        - "ApplicationStatusStarting"
        - "ApplicationStatusRunning"
        - "ApplicationStatusError"
        - "ApplicationStatusUnknown"
        - "ApplicationStatusCompleted"
    DeviceOSStatus:
      type: object
      required:
        - image
      properties:
        image:
          type: string
          description: "Version of the OS image."
    DeviceConfigStatus:
      type: object
      required:
        - renderedVersion
      properties:
        renderedVersion:
          type: string
          description: "Version of the device rendered config."
    DeviceSummaryStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/DeviceSummaryStatusType"
          description: "Summary status of the device."
        info:
          type: string
          description: "Human readable information detailing the last device status transition."
    DeviceSummaryStatusType:
      type: string
      enum:
        - "Online"
        - "Degraded"
        - "Error"
        - "Rebooting"
        - "PoweredOff"
        - "Unknown"
      x-enum-varnames:
        - "DeviceSummaryStatusOnline"
        - "DeviceSummaryStatusDegraded"
        - "DeviceSummaryStatusError"
        - "DeviceSummaryStatusRebooting"
        - "DeviceSummaryStatusPoweredOff"
        - "DeviceSummaryStatusUnknown"
    DeviceUpdatedStatus:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/DeviceUpdatedStatusType"
          description: "Status type of the device update."
        info:
          type: string
          description: "Human readable information about the last device update transition."
    DeviceUpdatedStatusType:
      type: string
      enum:
        - "UpToDate"
        - "OutOfDate"
        - "Updating"
        - "Unknown"
      x-enum-varnames:
        - "DeviceUpdatedStatusUpToDate"
        - "DeviceUpdatedStatusOutOfDate"
        - "DeviceUpdatedStatusUpdating"
        - "DeviceUpdatedStatusUnknown"
    DeviceIntegrityStatus:
      type: object
      required:
        - summary
      properties:
        summary:
          $ref: "#/components/schemas/DeviceIntegrityStatusSummary"
          description: "Summary status of the integrity of the device."
    DeviceIntegrityStatusSummary:
      type: object
      required:
        - status
      properties:
        status:
          $ref: "#/components/schemas/DeviceIntegrityStatusSummaryType"
          description: "Summary status of the integrity of the device."
        info:
          type: string
          description: "Human readable information about the last integrity transition."
    DeviceIntegrityStatusSummaryType:
      type: string
      enum:
        - "Passed"
        - "Failed"
        - "Unknown"
        - "Unsupported"
      x-enum-varnames:
        - "DeviceIntegrityStatusPassed"
        - "DeviceIntegrityStatusFailed"
        - "DeviceIntegrityStatusUnknown"
        - "DeviceIntegrityStatusUnsupported"
    DeviceResourceStatus:
      type: object
      required:
        - cpu
        - memory
        - disk
      properties:
        cpu:
          $ref: "#/components/schemas/DeviceResourceStatusType"
          description: "Status of the device CPU resources."
        memory:
          $ref: "#/components/schemas/DeviceResourceStatusType"
          description: "Status of the device memory resources."
        disk:
          $ref: "#/components/schemas/DeviceResourceStatusType"
          description: "Status of the device disk resources."
    DeviceResourceStatusType:
      type: string
      enum:
        - "Healthy"
        - "Warning"
        - "Critical"
        - "Error"
        - "Unknown"
      x-enum-varnames:
        - "DeviceResourceStatusHealthy"
        - "DeviceResourceStatusWarning"
        - "DeviceResourceStatusCritical"
        - "DeviceResourceStatusError"
        - "DeviceResourceStatusUnknown"

    EnrollmentRequestApproval:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'labels is a set of labels to apply to the device.'
        approved:
          type: boolean
          description: 'approved indicates whether the request has been approved.'
        approvedBy:
          type: string
          description: 'approvedBy is the name of the approver.'
        approvedAt:
          type: string
          format: date-time
          description: 'approvedAt is the time at which the request was approved.'
      required:
        - approved
    EnrollmentRequest:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/EnrollmentRequestSpec'
        status:
          $ref: '#/components/schemas/EnrollmentRequestStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      description: EnrollmentRequest represents a request for approval to enroll a device.
    EnrollmentRequestList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of EnrollmentRequest.'
          items:
            $ref: '#/components/schemas/EnrollmentRequest'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      description: EnrollmentRequestList is a list of EnrollmentRequest.
    EnrollmentRequestSpec:
      required:
        - csr
      type: object
      properties:
        csr:
          type: string
          description: 'csr is a PEM-encoded PKCS#10 certificate signing request.'
        deviceStatus:
          $ref: '#/components/schemas/DeviceStatus'
        labels:
          type: object
          additionalProperties:
            type: string 
          description: 'A set of labels that the service will apply to this device when its enrollment is approved'
      description: EnrollmentRequestSpec is a description of a EnrollmentRequest's target state.
    EnrollmentRequestStatus:
      type: object
      properties:
        certificate:
          type: string
          description: 'certificate is a PEM-encoded signed certificate.'
        conditions:
          type: array
          description: 'Current state of the EnrollmentRequest.'
          items:
            $ref: '#/components/schemas/Condition'
        approval:
          $ref: '#/components/schemas/EnrollmentRequestApproval'
      required:
        - conditions
      description: EnrollmentRequestStatus represents information about the status of a EnrollmentRequest.

    ResourceSync:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/ResourceSyncSpec'
        status:
          $ref: '#/components/schemas/ResourceSyncStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      description: ResourceSync represents a reference to one or more files in a repository to sync to resource definitions
    ResourceSyncSpec:
      type: object
      properties:
        repository:
          type: string
          description: |
            The name of the repository resource to use as the sync source
        targetRevision:
          type: string
          description: The desired revision in the repository
        path:
          type: string
          description: |
            The path of a file or directory in the repository. If a directory,
            the directory should contain only resource definitions with no
            subdirectories. Each file should contain the definition of one or
            more resources.
      required:
      - repository
      - targetRevision
      - path
    ResourceSyncStatus:
      type: object
      properties:
        observedCommit:
          type: string
          description: |
            The last commit hash that was synced
        observedGeneration:
          type: integer
          format: int64
          description: |
            The last generation that was synced
        conditions:
          type: array
          description: 'Current state of a resourcesync.'
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - conditions
      description: ResourceSyncStatus represents information about the status of a resourcesync
    ResourceSyncList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of resourcesync.'
          items:
            $ref: '#/components/schemas/ResourceSync'
      required:
        - apiVersion
        - kind
        - metadata
        - items
    Fleet:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/FleetSpec'
        status:
          $ref: '#/components/schemas/FleetStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      description: Fleet represents a set of devices.
    FleetList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of Fleets.'
          items:
            $ref: '#/components/schemas/Fleet'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      description: FleetList is a list of Fleets.
    FleetSpec:
      type: object
      properties:
        selector:
          $ref: '#/components/schemas/LabelSelector'
        template:
          type: object
          properties:
            metadata:
              $ref: '#/components/schemas/ObjectMeta'
            spec:
              $ref: '#/components/schemas/DeviceSpec'
          required:
            - spec
      required:
        - template
      description: FleetSpec is a description of a fleet's target state.
    RenderedDeviceSpec:
      type: object
      properties:
        renderedVersion:
          type: string
        os:
          $ref: '#/components/schemas/DeviceOSSpec'
        containers:
          type: object
          properties:
            matchPatterns:
              type: array
              items:
                type: string
        config:
          type: string
        systemd:
          type: object
          properties:
            matchPatterns:
              type: array
              items:
                type: string
        resources:
          type: array
          description: 'Array of resource monitor configurations.'
          items:
            $ref: '#/components/schemas/ResourceMonitor'
        console:
          $ref: '#/components/schemas/DeviceConsole'

      required:
        - renderedVersion
    DeviceSpec:
      type: object
      properties:
        os:
          $ref: '#/components/schemas/DeviceOSSpec'
        config:
          type: array
          description: List of config resources.
          items:
            type: object
            oneOf:
              - $ref: "#/components/schemas/GitConfigProviderSpec"
              - $ref: "#/components/schemas/KubernetesSecretProviderSpec"
              - $ref: "#/components/schemas/InlineConfigProviderSpec"
              - $ref: "#/components/schemas/HttpConfigProviderSpec"
            discriminator:
              propertyName: configType
        containers:
          type: object
          properties:
            matchPatterns:
              type: array
              items:
                type: string
                pattern: '^[a-z][a-z0-9-_.]*$'
        systemd:
          type: object
          properties:
            matchPatterns:
              type: array
              items:
                type: string
                pattern: '^[a-zA-Z0-9:\-_.\\*]*$' # * plus https://github.com/systemd/systemd/blob/9cebda59e818cdb89dc1e53ab5bb51b91b3dc3ff/src/basic/unit-name.c#L42
                maxLength: 256
        resources:
          type: array
          description: 'Array of resource monitor configurations.'
          items:
            $ref: '#/components/schemas/ResourceMonitor'
    FleetStatus:
      type: object
      properties:
        conditions:
          type: array
          description: 'Current state of the fleet.'
          items:
            $ref: '#/components/schemas/Condition'
      required:
        - conditions
      description: FleetStatus represents information about the status of a fleet. Status may trail the actual state of a fleet, especially if devices of a fleet have not contacted the management service in a while.
    TemplateVersion:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ObjectMeta'
        spec:
          $ref: '#/components/schemas/TemplateVersionSpec'
        status:
          $ref: '#/components/schemas/TemplateVersionStatus'
      required:
        - apiVersion
        - kind
        - metadata
        - spec
      description: TemplateVersion represents a version of a template.
    TemplateVersionSpec:
      type: object
      properties:
        fleet:
          type: string
          description: The fleet whose template this refers to.
      required:
        - fleet
    TemplateVersionStatus:
      allOf:
        - $ref: '#/components/schemas/DeviceSpec'
        - type: object
          properties:
            updatedAt:
              type: string
              format: date-time
            conditions:
              type: array
              description: 'Current state of the device.'
              items:
                $ref: '#/components/schemas/Condition'
          required:
            - conditions
          description: TemplateVersionStatus represents information about the status of a template version.
    TemplateVersionList:
      type: object
      properties:
        apiVersion:
          type: string
          description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
        kind:
          type: string
          description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
        metadata:
          $ref: '#/components/schemas/ListMeta'
        items:
          type: array
          description: 'List of TemplateVersions.'
          items:
            $ref: '#/components/schemas/TemplateVersion'
      required:
        - apiVersion
        - kind
        - metadata
        - items
      description: TemplateVersionList is a list of TemplateVersions.
    ListMeta:
      type: object
      properties:
        continue:
          type: string
          description: continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
        remainingItemCount:
          type: integer
          description: remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
          format: int64
      description: ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
    ObjectMeta:
      type: object
      properties:
        creationTimestamp:
          type: string
          format: date-time
        deletionTimestamp:
          type: string
          format: date-time
        name:
          type: string
          description: name of the object
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Map of string keys and values that can be used to organize and categorize (scope and select) objects.'
        generation:
          type: integer
          format: int64
          description: A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
        owner:
          type: string
          description: A resource that owns this resource, in "kind/name" format.
        annotations:
          type: object
          additionalProperties:
            type: string
          description: 'Properties set by the service.'
        resourceVersion:
          type: string
          description: An opaque string that identifies the server's internal version of an object.
      description: ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    LabelSelector:
      type: object
      properties:
        matchLabels:
          type: object
          additionalProperties:
            type: string
      required:
        - matchLabels
      description: A map of key,value pairs that are ANDed. Empty/null label selectors match nothing.
    Status:
      type: object
      properties:
        message:
          type: string
          description: A human-readable description of the status of this operation.
        reason:
          type: string
          description: A machine-readable description of why this operation is in the "Failure" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.
        status:
          type: string
          description: 'Status of the operation. One of: "Success" or "Failure". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
      description: Status is a return value for calls that don't return other objects.
    Error:
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
    Condition:
      required:
        - type
        - status
        - lastTransitionTime
        - reason
        - message
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ConditionType'
          description: Type of condition in CamelCase
        status:
          $ref: '#/components/schemas/ConditionStatus'
          description: Status of the condition, one of True, False, Unknown.
        observedGeneration:
          type: integer
          format: int64
          description: The .metadata.generation that the condition was set based upon.
        lastTransitionTime:
          type: string
          format: date-time
          description: The last time the condition transitioned from one status to another.
        message:
          type: string
          description: Human readable message indicating details about last transition.
        reason:
          type: string
          description: (brief) reason for the condition's last transition.
      description: Condition contains details for one aspect of the current state of this API Resource.
    ConditionType:
      type: string
      enum:
      - 'Approved'             # EnrollmentRequest
      - 'Accessible'           # Repository
      - 'Accessible'           # ResourceSync
      - 'ResourceParsed'       # ResourceSync
      - 'Synced'               # ResourceSync
      - 'OverlappingSelectors' # Fleet
      - 'Valid'                # Fleet
      - 'Updating'             # Device
      - 'SpecValid'            # Device (service condition)
      - 'MultipleOwners'       # Device (service condition)
      - 'Valid'                # TemplateVersion
      x-enum-varnames:
      - EnrollmentRequestApproved
      - RepositoryAccessible
      - ResourceSyncAccessible
      - ResourceSyncResourceParsed
      - ResourceSyncSynced
      - FleetOverlappingSelectors
      - FleetValid
      - DeviceUpdating
      - DeviceSpecValid
      - DeviceMultipleOwners
      - TemplateVersionValid
    ConditionStatus:
      type: string
      enum:
      - 'True'
      - 'False'
      - 'Unknown'
      x-enum-varnames:
      - 'ConditionStatusTrue'
      - 'ConditionStatusFalse'
      - 'ConditionStatusUnknown'
    TemplateDiscriminators:
      type: string
      enum:
      - 'GitConfigProviderSpec'
      - 'KubernetesSecretProviderSpec'
      - 'InlineConfigProviderSpec'
      - 'HttpConfigProviderSpec'
      x-enum-varnames:
      - 'TemplateDiscriminatorGitConfig'
      - 'TemplateDiscriminatorKubernetesSec'
      - 'TemplateDiscriminatorInlineConfig'
      - 'TemplateDiscriminatorHttpConfig'
